// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ParamsIdxReqParamsOrder.
const (
	Asc  ParamsIdxReqParamsOrder = "asc"
	Desc ParamsIdxReqParamsOrder = "desc"
)

// Defines values for ParamsIdxReqParamsSort.
const (
	DateAdded ParamsIdxReqParamsSort = "date_added"
	Timestamp ParamsIdxReqParamsSort = "_timestamp"
)

// Defines values for GetBackupIndexParamsIndex.
const (
	A10                        GetBackupIndexParamsIndex = "a10"
	Abb                        GetBackupIndexParamsIndex = "abb"
	Abbott                     GetBackupIndexParamsIndex = "abbott"
	Absolute                   GetBackupIndexParamsIndex = "absolute"
	Acronis                    GetBackupIndexParamsIndex = "acronis"
	Adobe                      GetBackupIndexParamsIndex = "adobe"
	Advisories                 GetBackupIndexParamsIndex = "advisories"
	AlephResearch              GetBackupIndexParamsIndex = "aleph-research"
	Alma                       GetBackupIndexParamsIndex = "alma"
	Alpine                     GetBackupIndexParamsIndex = "alpine"
	Amazon                     GetBackupIndexParamsIndex = "amazon"
	Amd                        GetBackupIndexParamsIndex = "amd"
	Ami                        GetBackupIndexParamsIndex = "ami"
	AnchoreNvdOverride         GetBackupIndexParamsIndex = "anchore-nvd-override"
	Android                    GetBackupIndexParamsIndex = "android"
	ApacheActivemq             GetBackupIndexParamsIndex = "apache-activemq"
	ApacheArchiva              GetBackupIndexParamsIndex = "apache-archiva"
	ApacheArrow                GetBackupIndexParamsIndex = "apache-arrow"
	ApacheCamel                GetBackupIndexParamsIndex = "apache-camel"
	ApacheCommons              GetBackupIndexParamsIndex = "apache-commons"
	ApacheCouchdb              GetBackupIndexParamsIndex = "apache-couchdb"
	ApacheFlink                GetBackupIndexParamsIndex = "apache-flink"
	ApacheGuacamole            GetBackupIndexParamsIndex = "apache-guacamole"
	ApacheHadoop               GetBackupIndexParamsIndex = "apache-hadoop"
	ApacheHttp                 GetBackupIndexParamsIndex = "apache-http"
	ApacheJspwiki              GetBackupIndexParamsIndex = "apache-jspwiki"
	ApacheKafka                GetBackupIndexParamsIndex = "apache-kafka"
	ApacheLoggingservices      GetBackupIndexParamsIndex = "apache-loggingservices"
	ApacheNifi                 GetBackupIndexParamsIndex = "apache-nifi"
	ApacheOfbiz                GetBackupIndexParamsIndex = "apache-ofbiz"
	ApacheOpenmeetings         GetBackupIndexParamsIndex = "apache-openmeetings"
	ApacheOpenoffice           GetBackupIndexParamsIndex = "apache-openoffice"
	ApachePulsar               GetBackupIndexParamsIndex = "apache-pulsar"
	ApacheShiro                GetBackupIndexParamsIndex = "apache-shiro"
	ApacheSpark                GetBackupIndexParamsIndex = "apache-spark"
	ApacheStruts               GetBackupIndexParamsIndex = "apache-struts"
	ApacheSubversion           GetBackupIndexParamsIndex = "apache-subversion"
	ApacheSuperset             GetBackupIndexParamsIndex = "apache-superset"
	ApacheTomcat               GetBackupIndexParamsIndex = "apache-tomcat"
	ApacheZookeeper            GetBackupIndexParamsIndex = "apache-zookeeper"
	Appcheck                   GetBackupIndexParamsIndex = "appcheck"
	Appgate                    GetBackupIndexParamsIndex = "appgate"
	Apple                      GetBackupIndexParamsIndex = "apple"
	Arch                       GetBackupIndexParamsIndex = "arch"
	Arista                     GetBackupIndexParamsIndex = "arista"
	Aruba                      GetBackupIndexParamsIndex = "aruba"
	Asrg                       GetBackupIndexParamsIndex = "asrg"
	Assetnote                  GetBackupIndexParamsIndex = "assetnote"
	Asterisk                   GetBackupIndexParamsIndex = "asterisk"
	Asus                       GetBackupIndexParamsIndex = "asus"
	Atlassian                  GetBackupIndexParamsIndex = "atlassian"
	AtlassianVulns             GetBackupIndexParamsIndex = "atlassian-vulns"
	Atredis                    GetBackupIndexParamsIndex = "atredis"
	Auscert                    GetBackupIndexParamsIndex = "auscert"
	Autodesk                   GetBackupIndexParamsIndex = "autodesk"
	Avaya                      GetBackupIndexParamsIndex = "avaya"
	Aveva                      GetBackupIndexParamsIndex = "aveva"
	Avigilon                   GetBackupIndexParamsIndex = "avigilon"
	Aws                        GetBackupIndexParamsIndex = "aws"
	Axis                       GetBackupIndexParamsIndex = "axis"
	Bandr                      GetBackupIndexParamsIndex = "bandr"
	Baxter                     GetBackupIndexParamsIndex = "baxter"
	Bbraun                     GetBackupIndexParamsIndex = "bbraun"
	Bd                         GetBackupIndexParamsIndex = "bd"
	Bdu                        GetBackupIndexParamsIndex = "bdu"
	Beckhoff                   GetBackupIndexParamsIndex = "beckhoff"
	Belden                     GetBackupIndexParamsIndex = "belden"
	BeyondTrust                GetBackupIndexParamsIndex = "beyond-trust"
	Binarly                    GetBackupIndexParamsIndex = "binarly"
	Bitdefender                GetBackupIndexParamsIndex = "bitdefender"
	Blackberry                 GetBackupIndexParamsIndex = "blackberry"
	Bls                        GetBackupIndexParamsIndex = "bls"
	Bosch                      GetBackupIndexParamsIndex = "bosch"
	BostonScientific           GetBackupIndexParamsIndex = "boston-scientific"
	Botnets                    GetBackupIndexParamsIndex = "botnets"
	CaCyberCentre              GetBackupIndexParamsIndex = "ca-cyber-centre"
	Canvas                     GetBackupIndexParamsIndex = "canvas"
	Carestream                 GetBackupIndexParamsIndex = "carestream"
	Cargo                      GetBackupIndexParamsIndex = "cargo"
	Carrier                    GetBackupIndexParamsIndex = "carrier"
	CblMariner                 GetBackupIndexParamsIndex = "cbl-mariner"
	Centos                     GetBackupIndexParamsIndex = "centos"
	CertBe                     GetBackupIndexParamsIndex = "cert-be"
	CertUa                     GetBackupIndexParamsIndex = "cert-ua"
	Certeu                     GetBackupIndexParamsIndex = "certeu"
	Certfr                     GetBackupIndexParamsIndex = "certfr"
	Chainguard                 GetBackupIndexParamsIndex = "chainguard"
	Checkpoint                 GetBackupIndexParamsIndex = "checkpoint"
	Chrome                     GetBackupIndexParamsIndex = "chrome"
	CisaAlerts                 GetBackupIndexParamsIndex = "cisa-alerts"
	CisaKev                    GetBackupIndexParamsIndex = "cisa-kev"
	Cisco                      GetBackupIndexParamsIndex = "cisco"
	CiscoTalos                 GetBackupIndexParamsIndex = "cisco-talos"
	Citrix                     GetBackupIndexParamsIndex = "citrix"
	Claroty                    GetBackupIndexParamsIndex = "claroty"
	Cloudbees                  GetBackupIndexParamsIndex = "cloudbees"
	Cloudvulndb                GetBackupIndexParamsIndex = "cloudvulndb"
	CnaCveCount                GetBackupIndexParamsIndex = "cna-cve-count"
	Cnnvd                      GetBackupIndexParamsIndex = "cnnvd"
	CnvdBulletins              GetBackupIndexParamsIndex = "cnvd-bulletins"
	CnvdFlaws                  GetBackupIndexParamsIndex = "cnvd-flaws"
	Cocoapods                  GetBackupIndexParamsIndex = "cocoapods"
	Codesys                    GetBackupIndexParamsIndex = "codesys"
	CompassSecurity            GetBackupIndexParamsIndex = "compass-security"
	Composer                   GetBackupIndexParamsIndex = "composer"
	Conan                      GetBackupIndexParamsIndex = "conan"
	Crestron                   GetBackupIndexParamsIndex = "crestron"
	Curl                       GetBackupIndexParamsIndex = "curl"
	Cwe                        GetBackupIndexParamsIndex = "cwe"
	Dahua                      GetBackupIndexParamsIndex = "dahua"
	Dassault                   GetBackupIndexParamsIndex = "dassault"
	Debian                     GetBackupIndexParamsIndex = "debian"
	DebianDsa                  GetBackupIndexParamsIndex = "debian-dsa"
	Dell                       GetBackupIndexParamsIndex = "dell"
	Delta                      GetBackupIndexParamsIndex = "delta"
	Dotcms                     GetBackupIndexParamsIndex = "dotcms"
	Dragos                     GetBackupIndexParamsIndex = "dragos"
	Draytek                    GetBackupIndexParamsIndex = "draytek"
	Eaton                      GetBackupIndexParamsIndex = "eaton"
	Elastic                    GetBackupIndexParamsIndex = "elastic"
	Elspec                     GetBackupIndexParamsIndex = "elspec"
	Emerson                    GetBackupIndexParamsIndex = "emerson"
	Eol                        GetBackupIndexParamsIndex = "eol"
	Epss                       GetBackupIndexParamsIndex = "epss"
	ExodusIntel                GetBackupIndexParamsIndex = "exodus-intel"
	ExploitChains              GetBackupIndexParamsIndex = "exploit-chains"
	Exploitdb                  GetBackupIndexParamsIndex = "exploitdb"
	Exploits                   GetBackupIndexParamsIndex = "exploits"
	FSecure                    GetBackupIndexParamsIndex = "f-secure"
	Fastly                     GetBackupIndexParamsIndex = "fastly"
	Fedora                     GetBackupIndexParamsIndex = "fedora"
	Filecloud                  GetBackupIndexParamsIndex = "filecloud"
	Forgerock                  GetBackupIndexParamsIndex = "forgerock"
	Fortinet                   GetBackupIndexParamsIndex = "fortinet"
	Freebsd                    GetBackupIndexParamsIndex = "freebsd"
	Gallagher                  GetBackupIndexParamsIndex = "gallagher"
	Gcp                        GetBackupIndexParamsIndex = "gcp"
	GeGas                      GetBackupIndexParamsIndex = "ge-gas"
	GeHealthcare               GetBackupIndexParamsIndex = "ge-healthcare"
	Gem                        GetBackupIndexParamsIndex = "gem"
	Genetec                    GetBackupIndexParamsIndex = "genetec"
	Gigabyte                   GetBackupIndexParamsIndex = "gigabyte"
	GiteeExploits              GetBackupIndexParamsIndex = "gitee-exploits"
	GithubExploits             GetBackupIndexParamsIndex = "github-exploits"
	GithubSecurityAdvisories   GetBackupIndexParamsIndex = "github-security-advisories"
	GitlabAdvisoriesCommunity  GetBackupIndexParamsIndex = "gitlab-advisories-community"
	GitlabExploits             GetBackupIndexParamsIndex = "gitlab-exploits"
	Gnutls                     GetBackupIndexParamsIndex = "gnutls"
	Golang                     GetBackupIndexParamsIndex = "golang"
	Google0dayItw              GetBackupIndexParamsIndex = "google-0day-itw"
	GoogleContainerOptimizedOs GetBackupIndexParamsIndex = "google-container-optimized-os"
	Grafana                    GetBackupIndexParamsIndex = "grafana"
	GreynoiseMetadata          GetBackupIndexParamsIndex = "greynoise-metadata"
	Hackage                    GetBackupIndexParamsIndex = "hackage"
	Harmonyos                  GetBackupIndexParamsIndex = "harmonyos"
	Hashicorp                  GetBackupIndexParamsIndex = "hashicorp"
	HaskellSadb                GetBackupIndexParamsIndex = "haskell-sadb"
	Hcl                        GetBackupIndexParamsIndex = "hcl"
	Hex                        GetBackupIndexParamsIndex = "hex"
	Hikvision                  GetBackupIndexParamsIndex = "hikvision"
	Hillrom                    GetBackupIndexParamsIndex = "hillrom"
	Hitachi                    GetBackupIndexParamsIndex = "hitachi"
	HitachiEnergy              GetBackupIndexParamsIndex = "hitachi-energy"
	Hkcert                     GetBackupIndexParamsIndex = "hkcert"
	Honeywell                  GetBackupIndexParamsIndex = "honeywell"
	Hp                         GetBackupIndexParamsIndex = "hp"
	HuaweiEuleros              GetBackupIndexParamsIndex = "huawei-euleros"
	HuaweiIps                  GetBackupIndexParamsIndex = "huawei-ips"
	HuaweiPsirt                GetBackupIndexParamsIndex = "huawei-psirt"
	Iava                       GetBackupIndexParamsIndex = "iava"
	Ibm                        GetBackupIndexParamsIndex = "ibm"
	Idemia                     GetBackupIndexParamsIndex = "idemia"
	IlAlerts                   GetBackupIndexParamsIndex = "il-alerts"
	IlVulnerabilities          GetBackupIndexParamsIndex = "il-vulnerabilities"
	Incibe                     GetBackupIndexParamsIndex = "incibe"
	InitialAccess              GetBackupIndexParamsIndex = "initial-access"
	InitialAccessGit           GetBackupIndexParamsIndex = "initial-access-git"
	Intel                      GetBackupIndexParamsIndex = "intel"
	Ipintel10d                 GetBackupIndexParamsIndex = "ipintel-10d"
	Ipintel30d                 GetBackupIndexParamsIndex = "ipintel-30d"
	Ipintel3d                  GetBackupIndexParamsIndex = "ipintel-3d"
	Ipintel90d                 GetBackupIndexParamsIndex = "ipintel-90d"
	Istio                      GetBackupIndexParamsIndex = "istio"
	Ivanti                     GetBackupIndexParamsIndex = "ivanti"
	IvantiRss                  GetBackupIndexParamsIndex = "ivanti-rss"
	Jenkins                    GetBackupIndexParamsIndex = "jenkins"
	Jetbrains                  GetBackupIndexParamsIndex = "jetbrains"
	Jfrog                      GetBackupIndexParamsIndex = "jfrog"
	Jnj                        GetBackupIndexParamsIndex = "jnj"
	Jvndb                      GetBackupIndexParamsIndex = "jvndb"
	KasperskyIcsCert           GetBackupIndexParamsIndex = "kaspersky-ics-cert"
	KrcertSecurityNotices      GetBackupIndexParamsIndex = "krcert-security-notices"
	KrcertVulnerabilities      GetBackupIndexParamsIndex = "krcert-vulnerabilities"
	Kubernetes                 GetBackupIndexParamsIndex = "kubernetes"
	Lenovo                     GetBackupIndexParamsIndex = "lenovo"
	Lexmark                    GetBackupIndexParamsIndex = "lexmark"
	Lg                         GetBackupIndexParamsIndex = "lg"
	LibreOffice                GetBackupIndexParamsIndex = "libre-office"
	Linux                      GetBackupIndexParamsIndex = "linux"
	MFiles                     GetBackupIndexParamsIndex = "m-files"
	Macert                     GetBackupIndexParamsIndex = "macert"
	Manageengine               GetBackupIndexParamsIndex = "manageengine"
	Maven                      GetBackupIndexParamsIndex = "maven"
	MbedTls                    GetBackupIndexParamsIndex = "mbed-tls"
	Mediatek                   GetBackupIndexParamsIndex = "mediatek"
	Medtronic                  GetBackupIndexParamsIndex = "medtronic"
	Mendix                     GetBackupIndexParamsIndex = "mendix"
	Metasploit                 GetBackupIndexParamsIndex = "metasploit"
	MicrosoftCvrf              GetBackupIndexParamsIndex = "microsoft-cvrf"
	MicrosoftKb                GetBackupIndexParamsIndex = "microsoft-kb"
	Mikrotik                   GetBackupIndexParamsIndex = "mikrotik"
	Mindray                    GetBackupIndexParamsIndex = "mindray"
	MispThreatActors           GetBackupIndexParamsIndex = "misp-threat-actors"
	Mitel                      GetBackupIndexParamsIndex = "mitel"
	MitreAttackCve             GetBackupIndexParamsIndex = "mitre-attack-cve"
	MitreCve                   GetBackupIndexParamsIndex = "mitre-cve"
	MitsubishiElectric         GetBackupIndexParamsIndex = "mitsubishi-electric"
	Mongodb                    GetBackupIndexParamsIndex = "mongodb"
	Moxa                       GetBackupIndexParamsIndex = "moxa"
	Mozilla                    GetBackupIndexParamsIndex = "mozilla"
	Naver                      GetBackupIndexParamsIndex = "naver"
	Nec                        GetBackupIndexParamsIndex = "nec"
	Netapp                     GetBackupIndexParamsIndex = "netapp"
	Netgate                    GetBackupIndexParamsIndex = "netgate"
	Netgear                    GetBackupIndexParamsIndex = "netgear"
	Netskope                   GetBackupIndexParamsIndex = "netskope"
	Nginx                      GetBackupIndexParamsIndex = "nginx"
	Nhs                        GetBackupIndexParamsIndex = "nhs"
	Ni                         GetBackupIndexParamsIndex = "ni"
	NistNvd                    GetBackupIndexParamsIndex = "nist-nvd"
	NistNvd2                   GetBackupIndexParamsIndex = "nist-nvd2"
	NistNvd2Cpematch           GetBackupIndexParamsIndex = "nist-nvd2-cpematch"
	NodeSecurity               GetBackupIndexParamsIndex = "node-security"
	Nodejs                     GetBackupIndexParamsIndex = "nodejs"
	Nokia                      GetBackupIndexParamsIndex = "nokia"
	Nozomi                     GetBackupIndexParamsIndex = "nozomi"
	Npm                        GetBackupIndexParamsIndex = "npm"
	Nuget                      GetBackupIndexParamsIndex = "nuget"
	Nvidia                     GetBackupIndexParamsIndex = "nvidia"
	NzAdvisories               GetBackupIndexParamsIndex = "nz-advisories"
	OctopusDeploy              GetBackupIndexParamsIndex = "octopus-deploy"
	Okta                       GetBackupIndexParamsIndex = "okta"
	Omron                      GetBackupIndexParamsIndex = "omron"
	OneE                       GetBackupIndexParamsIndex = "one-e"
	Opam                       GetBackupIndexParamsIndex = "opam"
	OpenCvdb                   GetBackupIndexParamsIndex = "open-cvdb"
	Openbsd                    GetBackupIndexParamsIndex = "openbsd"
	Openssh                    GetBackupIndexParamsIndex = "openssh"
	OpensslSecadv              GetBackupIndexParamsIndex = "openssl-secadv"
	Openstack                  GetBackupIndexParamsIndex = "openstack"
	Openwrt                    GetBackupIndexParamsIndex = "openwrt"
	Oracle                     GetBackupIndexParamsIndex = "oracle"
	OracleCpu                  GetBackupIndexParamsIndex = "oracle-cpu"
	OracleCpuCsaf              GetBackupIndexParamsIndex = "oracle-cpu-csaf"
	Osv                        GetBackupIndexParamsIndex = "osv"
	Otrs                       GetBackupIndexParamsIndex = "otrs"
	Owncloud                   GetBackupIndexParamsIndex = "owncloud"
	Palantir                   GetBackupIndexParamsIndex = "palantir"
	PaloAlto                   GetBackupIndexParamsIndex = "palo-alto"
	Panasonic                  GetBackupIndexParamsIndex = "panasonic"
	Papercut                   GetBackupIndexParamsIndex = "papercut"
	Pega                       GetBackupIndexParamsIndex = "pega"
	Philips                    GetBackupIndexParamsIndex = "philips"
	PhoenixContact             GetBackupIndexParamsIndex = "phoenix-contact"
	Postgressql                GetBackupIndexParamsIndex = "postgressql"
	Progress                   GetBackupIndexParamsIndex = "progress"
	Proofpoint                 GetBackupIndexParamsIndex = "proofpoint"
	Pub                        GetBackupIndexParamsIndex = "pub"
	PureStorage                GetBackupIndexParamsIndex = "pure-storage"
	PypaAdvisories             GetBackupIndexParamsIndex = "pypa-advisories"
	Pypi                       GetBackupIndexParamsIndex = "pypi"
	Qnap                       GetBackupIndexParamsIndex = "qnap"
	Qualcomm                   GetBackupIndexParamsIndex = "qualcomm"
	Qualys                     GetBackupIndexParamsIndex = "qualys"
	Ransomware                 GetBackupIndexParamsIndex = "ransomware"
	Redhat                     GetBackupIndexParamsIndex = "redhat"
	Renesas                    GetBackupIndexParamsIndex = "renesas"
	Revive                     GetBackupIndexParamsIndex = "revive"
	Rockwell                   GetBackupIndexParamsIndex = "rockwell"
	Rocky                      GetBackupIndexParamsIndex = "rocky"
	Ruckus                     GetBackupIndexParamsIndex = "ruckus"
	RustsecAdvisories          GetBackupIndexParamsIndex = "rustsec-advisories"
	Sacert                     GetBackupIndexParamsIndex = "sacert"
	Saint                      GetBackupIndexParamsIndex = "saint"
	Salesforce                 GetBackupIndexParamsIndex = "salesforce"
	Samba                      GetBackupIndexParamsIndex = "samba"
	Sap                        GetBackupIndexParamsIndex = "sap"
	SchneiderElectric          GetBackupIndexParamsIndex = "schneider-electric"
	SecConsult                 GetBackupIndexParamsIndex = "sec-consult"
	Sel                        GetBackupIndexParamsIndex = "sel"
	Sentinelone                GetBackupIndexParamsIndex = "sentinelone"
	Servicenow                 GetBackupIndexParamsIndex = "servicenow"
	ShadowserverExploited      GetBackupIndexParamsIndex = "shadowserver-exploited"
	Sick                       GetBackupIndexParamsIndex = "sick"
	Siemens                    GetBackupIndexParamsIndex = "siemens"
	SierraWireless             GetBackupIndexParamsIndex = "sierra-wireless"
	Singcert                   GetBackupIndexParamsIndex = "singcert"
	Slackware                  GetBackupIndexParamsIndex = "slackware"
	Solarwinds                 GetBackupIndexParamsIndex = "solarwinds"
	Solr                       GetBackupIndexParamsIndex = "solr"
	Sonicwall                  GetBackupIndexParamsIndex = "sonicwall"
	SpacelabsHealthcare        GetBackupIndexParamsIndex = "spacelabs-healthcare"
	Spring                     GetBackupIndexParamsIndex = "spring"
	Ssd                        GetBackupIndexParamsIndex = "ssd"
	Stormshield                GetBackupIndexParamsIndex = "stormshield"
	Stryker                    GetBackupIndexParamsIndex = "stryker"
	Sudo                       GetBackupIndexParamsIndex = "sudo"
	Suse                       GetBackupIndexParamsIndex = "suse"
	Swift                      GetBackupIndexParamsIndex = "swift"
	SwisslogHealthcare         GetBackupIndexParamsIndex = "swisslog-healthcare"
	Symfony                    GetBackupIndexParamsIndex = "symfony"
	Syncrosoft                 GetBackupIndexParamsIndex = "syncrosoft"
	Synology                   GetBackupIndexParamsIndex = "synology"
	Teamviewer                 GetBackupIndexParamsIndex = "teamviewer"
	Tencent                    GetBackupIndexParamsIndex = "tencent"
	Thales                     GetBackupIndexParamsIndex = "thales"
	Themissinglink             GetBackupIndexParamsIndex = "themissinglink"
	ThreatActors               GetBackupIndexParamsIndex = "threat-actors"
	Ti                         GetBackupIndexParamsIndex = "ti"
	Tibco                      GetBackupIndexParamsIndex = "tibco"
	TpLink                     GetBackupIndexParamsIndex = "tp-link"
	TraneTechnology            GetBackupIndexParamsIndex = "trane-technology"
	Trendmicro                 GetBackupIndexParamsIndex = "trendmicro"
	Trustwave                  GetBackupIndexParamsIndex = "trustwave"
	Twcert                     GetBackupIndexParamsIndex = "twcert"
	Ubiquiti                   GetBackupIndexParamsIndex = "ubiquiti"
	Ubuntu                     GetBackupIndexParamsIndex = "ubuntu"
	Unify                      GetBackupIndexParamsIndex = "unify"
	Unisoc                     GetBackupIndexParamsIndex = "unisoc"
	Usd                        GetBackupIndexParamsIndex = "usd"
	Usom                       GetBackupIndexParamsIndex = "usom"
	Vandyke                    GetBackupIndexParamsIndex = "vandyke"
	Vapidlabs                  GetBackupIndexParamsIndex = "vapidlabs"
	Vde                        GetBackupIndexParamsIndex = "vde"
	Veeam                      GetBackupIndexParamsIndex = "veeam"
	Voidsec                    GetBackupIndexParamsIndex = "voidsec"
	VulncheckConfig            GetBackupIndexParamsIndex = "vulncheck-config"
	VulncheckKev               GetBackupIndexParamsIndex = "vulncheck-kev"
	VulncheckNvd               GetBackupIndexParamsIndex = "vulncheck-nvd"
	VulncheckNvd2              GetBackupIndexParamsIndex = "vulncheck-nvd2"
	VulnerabilityAliases       GetBackupIndexParamsIndex = "vulnerability-aliases"
	Vyaire                     GetBackupIndexParamsIndex = "vyaire"
	Watchguard                 GetBackupIndexParamsIndex = "watchguard"
	Whatsapp                   GetBackupIndexParamsIndex = "whatsapp"
	Wibu                       GetBackupIndexParamsIndex = "wibu"
	Wireshark                  GetBackupIndexParamsIndex = "wireshark"
	WithSecure                 GetBackupIndexParamsIndex = "with-secure"
	Wolfi                      GetBackupIndexParamsIndex = "wolfi"
	Wolfssl                    GetBackupIndexParamsIndex = "wolfssl"
	Wordfence                  GetBackupIndexParamsIndex = "wordfence"
	Xen                        GetBackupIndexParamsIndex = "xen"
	Xerox                      GetBackupIndexParamsIndex = "xerox"
	Xiaomi                     GetBackupIndexParamsIndex = "xiaomi"
	Xylem                      GetBackupIndexParamsIndex = "xylem"
	Yokogawa                   GetBackupIndexParamsIndex = "yokogawa"
	Yubico                     GetBackupIndexParamsIndex = "yubico"
	Zdi                        GetBackupIndexParamsIndex = "zdi"
	Zeroscience                GetBackupIndexParamsIndex = "zeroscience"
	Zimbra                     GetBackupIndexParamsIndex = "zimbra"
	Zoom                       GetBackupIndexParamsIndex = "zoom"
	Zscaler                    GetBackupIndexParamsIndex = "zscaler"
	Zuso                       GetBackupIndexParamsIndex = "zuso"
	Zyxel                      GetBackupIndexParamsIndex = "zyxel"
)

// AdvisoryA10 defines model for advisory.A10.
type AdvisoryA10 struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Reference *[]string `json:"reference,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryABBAdvisory defines model for advisory.ABBAdvisory.
type AdvisoryABBAdvisory struct {
	AbbVulnerabilityId *[]string `json:"abb_vulnerability_id,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisoryAMD defines model for advisory.AMD.
type AdvisoryAMD struct {
	BulletinId  *string   `json:"bulletin_id,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	DateUpdated *string   `json:"date_updated,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryAMI defines model for advisory.AMI.
type AdvisoryAMI struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryASRG defines model for advisory.ASRG.
type AdvisoryASRG struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Capec            *string   `json:"capec,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	Cvss             *string   `json:"cvss,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	ProblemType      *string   `json:"problem_type,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryAVEVAAdvisory defines model for advisory.AVEVAAdvisory.
type AdvisoryAVEVAAdvisory struct {
	AvevaVulnerabilityId *string   `json:"aveva_vulnerability_id,omitempty"`
	Cve                  *[]string `json:"cve,omitempty"`
	Cwe                  *[]string `json:"cwe,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	PublishedBy          *string   `json:"published_by,omitempty"`
	Rating               *string   `json:"rating,omitempty"`
	Title                *string   `json:"title,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryAWS defines model for advisory.AWS.
type AdvisoryAWS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAbbott defines model for advisory.Abbott.
type AdvisoryAbbott struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAbsolute defines model for advisory.Absolute.
type AdvisoryAbsolute struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAcknowledgement defines model for advisory.Acknowledgement.
type AdvisoryAcknowledgement struct {
	Name *[]AdvisoryIVal `json:"name,omitempty"`
	Url  *[]string       `json:"url,omitempty"`
}

// AdvisoryAcronis defines model for advisory.Acronis.
type AdvisoryAcronis struct {
	Cve         *[]string `json:"cve,omitempty"`
	Cvss        *string   `json:"cvss,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryAdobeAdvisory defines model for advisory.AdobeAdvisory.
type AdvisoryAdobeAdvisory struct {
	Affected   *[]AdvisoryAdobeAffected `json:"affected,omitempty"`
	BulletinId *string                  `json:"bulletinId,omitempty"`
	Cve        *[]string                `json:"cve,omitempty"`
	DateAdded  *string                  `json:"date_added,omitempty"`
	Link       *string                  `json:"link,omitempty"`
	Solutions  *[]AdvisoryAdobeSolution `json:"solutions,omitempty"`
}

// AdvisoryAdobeAffected defines model for advisory.AdobeAffected.
type AdvisoryAdobeAffected struct {
	Platform *string `json:"platform,omitempty"`
	Product  *string `json:"product,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryAdobeSolution defines model for advisory.AdobeSolution.
type AdvisoryAdobeSolution struct {
	Platform *string `json:"platform,omitempty"`
	Product  *string `json:"product,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryAdvisory defines model for advisory.Advisory.
type AdvisoryAdvisory struct {
	Affects     *string               `json:"affects,omitempty"`
	Announced   *string               `json:"announced,omitempty"`
	Category    *string               `json:"category,omitempty"`
	Corrections *[]AdvisoryCorrection `json:"corrections,omitempty"`
	Credits     *string               `json:"credits,omitempty"`
	Cve         *[]string             `json:"cve,omitempty"`
	DateAdded   *string               `json:"date_added,omitempty"`
	Module      *string               `json:"module,omitempty"`
	Name        *string               `json:"name,omitempty"`
	Topic       *string               `json:"topic,omitempty"`
	Url         *string               `json:"url,omitempty"`
}

// AdvisoryAdvisoryDetails defines model for advisory.AdvisoryDetails.
type AdvisoryAdvisoryDetails struct {
	Bugzilla *AdvisoryBugzilla `json:"bugzilla,omitempty"`
	Cve      *AdvisoryOvalCVE  `json:"cve,omitempty"`
	Issued   *AdvisoryIssued   `json:"issued,omitempty"`
	Severity *string           `json:"severity,omitempty"`
	Updated  *AdvisoryUpdated  `json:"updated,omitempty"`
}

// AdvisoryAdvisoryRecord defines model for advisory.AdvisoryRecord.
type AdvisoryAdvisoryRecord struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	ExternalId *[]string `json:"external_id,omitempty"`
	Lang       *string   `json:"lang,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Refsource  *string   `json:"refsource,omitempty"`
	Tags       *[]string `json:"tags,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAffected defines model for advisory.Affected.
type AdvisoryAffected struct {
	// DatabaseSpecific The meaning of the values within the object is entirely defined by the database
	DatabaseSpecific *interface{} `json:"database_specific,omitempty"`

	// EcosystemSpecific The meaning of the values within the object is entirely defined by the ecosystem
	EcosystemSpecific *interface{}        `json:"ecosystem_specific,omitempty"`
	Package           *AdvisoryOSVPackage `json:"package,omitempty"`
	Ranges            *[]AdvisoryRange    `json:"ranges,omitempty"`
	Severity          *[]AdvisorySeverity `json:"severity,omitempty"`
	Versions          *[]string           `json:"versions,omitempty"`
}

// AdvisoryAffectedDebianPackage defines model for advisory.AffectedDebianPackage.
type AdvisoryAffectedDebianPackage struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryAffectedDebianRelease defines model for advisory.AffectedDebianRelease.
type AdvisoryAffectedDebianRelease struct {
	FixedVersion *string                             `json:"fixed_version,omitempty"`
	Nodsa        *string                             `json:"nodsa,omitempty"`
	NodsaReason  *string                             `json:"nodsa_reason,omitempty"`
	ReleaseName  *string                             `json:"release_name,omitempty"`
	Repositories *[]AdvisoryAffectedDebianRepository `json:"repositories,omitempty"`
	Status       *string                             `json:"status,omitempty"`
	Urgency      *string                             `json:"urgency,omitempty"`
}

// AdvisoryAffectedDebianRepository defines model for advisory.AffectedDebianRepository.
type AdvisoryAffectedDebianRepository struct {
	RepositoryName *string `json:"repository_name,omitempty"`
	Version        *string `json:"version,omitempty"`
}

// AdvisoryAffectedFile defines model for advisory.AffectedFile.
type AdvisoryAffectedFile struct {
	FileLastModified *string `json:"file_last_modified,omitempty"`
	FileName         *string `json:"file_name,omitempty"`
}

// AdvisoryAffectedProduct defines model for advisory.AffectedProduct.
type AdvisoryAffectedProduct struct {
	AffectedReleases *string `json:"affectedReleases,omitempty"`
	FixedReleases    *string `json:"fixedReleases,omitempty"`
	LexmarkModels    *string `json:"lexmarkModels,omitempty"`
}

// AdvisoryAffectedRel defines model for advisory.AffectedRel.
type AdvisoryAffectedRel struct {
	Advisory    *string `json:"advisory,omitempty"`
	Cpe         *string `json:"cpe,omitempty"`
	Package     *string `json:"package,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
	ReleaseDate *string `json:"release_date,omitempty"`
}

// AdvisoryAffectedUbuntuPackage defines model for advisory.AffectedUbuntuPackage.
type AdvisoryAffectedUbuntuPackage struct {
	BreakCommitUrl       *[]string                             `json:"break_commit_url,omitempty"`
	FixCommitUrl         *[]string                             `json:"fix_commit_url,omitempty"`
	PackageName          *string                               `json:"package_name,omitempty"`
	PackageReleaseStatus *[]AdvisoryUbuntuPackageReleaseStatus `json:"package_release_status,omitempty"`
	UpstreamFixUrl       *[]string                             `json:"upstream_fix_url,omitempty"`
}

// AdvisoryAlephResearch defines model for advisory.AlephResearch.
type AdvisoryAlephResearch struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAlmaDate defines model for advisory.AlmaDate.
type AdvisoryAlmaDate struct {
	Date *int `json:"$date,omitempty"`
}

// AdvisoryAlmaLinuxUpdate defines model for advisory.AlmaLinuxUpdate.
type AdvisoryAlmaLinuxUpdate struct {
	BsRepoId     *AdvisoryAlmaObjectID    `json:"bs_repo_id,omitempty"`
	Cve          *[]string                `json:"cve,omitempty"`
	DateAdded    *string                  `json:"date_added,omitempty"`
	Description  *string                  `json:"description,omitempty"`
	Fromstr      *string                  `json:"fromstr,omitempty"`
	Id           *AdvisoryAlmaObjectID    `json:"id,omitempty"`
	IssuedDate   *AdvisoryAlmaDate        `json:"issued_date,omitempty"`
	Pkglist      *AdvisoryAlmaPackageList `json:"pkglist,omitempty"`
	Pushcount    *string                  `json:"pushcount,omitempty"`
	References   *[]AdvisoryAlmaReference `json:"references,omitempty"`
	Release      *string                  `json:"release,omitempty"`
	Rights       *string                  `json:"rights,omitempty"`
	Severity     *string                  `json:"severity,omitempty"`
	Solution     *string                  `json:"solution,omitempty"`
	Status       *string                  `json:"status,omitempty"`
	Summary      *string                  `json:"summary,omitempty"`
	Title        *string                  `json:"title,omitempty"`
	Type         *string                  `json:"type,omitempty"`
	UpdateUrl    *string                  `json:"update_url,omitempty"`
	UpdatedDate  *AdvisoryAlmaDate        `json:"updated_date,omitempty"`
	UpdateinfoId *string                  `json:"updateinfo_id,omitempty"`
	Version      *string                  `json:"version,omitempty"`
}

// AdvisoryAlmaObjectID defines model for advisory.AlmaObjectID.
type AdvisoryAlmaObjectID struct {
	Oid *string `json:"$oid,omitempty"`
}

// AdvisoryAlmaPackage defines model for advisory.AlmaPackage.
type AdvisoryAlmaPackage struct {
	Arch            *string `json:"arch,omitempty"`
	Epoch           *string `json:"epoch,omitempty"`
	Filename        *string `json:"filename,omitempty"`
	Name            *string `json:"name,omitempty"`
	RebootSuggested *int    `json:"reboot_suggested,omitempty"`
	Release         *string `json:"release,omitempty"`
	Source          *string `json:"source,omitempty"`
	Sum             *string `json:"sum,omitempty"`
	Version         *string `json:"version,omitempty"`
}

// AdvisoryAlmaPackageList defines model for advisory.AlmaPackageList.
type AdvisoryAlmaPackageList struct {
	Name      *string                `json:"name,omitempty"`
	Packages  *[]AdvisoryAlmaPackage `json:"packages,omitempty"`
	Shortname *string                `json:"shortname,omitempty"`
}

// AdvisoryAlmaReference defines model for advisory.AlmaReference.
type AdvisoryAlmaReference struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryAlpineLinuxSecDB defines model for advisory.AlpineLinuxSecDB.
type AdvisoryAlpineLinuxSecDB struct {
	Apkurl        *string                            `json:"apkurl,omitempty"`
	Archs         *[]string                          `json:"archs,omitempty"`
	Cve           *[]string                          `json:"cve,omitempty"`
	DateAdded     *string                            `json:"date_added,omitempty"`
	Distroversion *string                            `json:"distroversion,omitempty"`
	Packages      *[]AdvisoryAlpineLinuxSecDBPackage `json:"packages,omitempty"`
	Reponame      *string                            `json:"reponame,omitempty"`
	Urlprefix     *string                            `json:"urlprefix,omitempty"`
}

// AdvisoryAlpineLinuxSecDBPackage defines model for advisory.AlpineLinuxSecDBPackage.
type AdvisoryAlpineLinuxSecDBPackage struct {
	PackageName *string                           `json:"package_name,omitempty"`
	Secfixes    *[]AdvisoryAlpineLinuxSecurityFix `json:"secfixes,omitempty"`
}

// AdvisoryAlpineLinuxSecurityFix defines model for advisory.AlpineLinuxSecurityFix.
type AdvisoryAlpineLinuxSecurityFix struct {
	Cve          *string `json:"cve,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
}

// AdvisoryAnchoreNVDOverride defines model for advisory.AnchoreNVDOverride.
type AdvisoryAnchoreNVDOverride struct {
	Cve       *[]string         `json:"cve,omitempty"`
	DateAdded *string           `json:"date_added,omitempty"`
	Override  *AdvisoryOverride `json:"override,omitempty"`
	Url       *string           `json:"url,omitempty"`
}

// AdvisoryAndroidAdvisory defines model for advisory.AndroidAdvisory.
type AdvisoryAndroidAdvisory struct {
	Affected   *[]AdvisoryAndroidAffected  `json:"affected,omitempty"`
	Aliases    *[]string                   `json:"aliases,omitempty"`
	Cve        *[]string                   `json:"cve,omitempty"`
	DateAdded  *string                     `json:"date_added,omitempty"`
	Id         *string                     `json:"id,omitempty"`
	Modified   *string                     `json:"modified,omitempty"`
	Published  *string                     `json:"published,omitempty"`
	References *[]AdvisoryAndroidReference `json:"references,omitempty"`
	Summary    *string                     `json:"summary,omitempty"`
}

// AdvisoryAndroidAffected defines model for advisory.AndroidAffected.
type AdvisoryAndroidAffected struct {
	EcosystemSpecific *AdvisoryEcoSystem      `json:"ecosystem_specific,omitempty"`
	Package           *AdvisoryAndroidPackage `json:"package,omitempty"`
	Ranges            *[]AdvisoryAndroidRange `json:"ranges,omitempty"`
	Versions          *[]string               `json:"versions,omitempty"`
}

// AdvisoryAndroidEvent defines model for advisory.AndroidEvent.
type AdvisoryAndroidEvent struct {
	Fixed      *string `json:"fixed,omitempty"`
	Introduced *string `json:"introduced,omitempty"`
}

// AdvisoryAndroidPackage defines model for advisory.AndroidPackage.
type AdvisoryAndroidPackage struct {
	Ecosystem *string `json:"ecosystem,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// AdvisoryAndroidRange defines model for advisory.AndroidRange.
type AdvisoryAndroidRange struct {
	Events *[]AdvisoryAndroidEvent `json:"events,omitempty"`
	Type   *string                 `json:"type,omitempty"`
}

// AdvisoryAndroidReference defines model for advisory.AndroidReference.
type AdvisoryAndroidReference struct {
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// AdvisoryApacheActiveMQ defines model for advisory.ApacheActiveMQ.
type AdvisoryApacheActiveMQ struct {
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryApacheArchiva defines model for advisory.ApacheArchiva.
type AdvisoryApacheArchiva struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheArrow defines model for advisory.ApacheArrow.
type AdvisoryApacheArrow struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheCamel defines model for advisory.ApacheCamel.
type AdvisoryApacheCamel struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheCommons defines model for advisory.ApacheCommons.
type AdvisoryApacheCommons struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheCouchDB defines model for advisory.ApacheCouchDB.
type AdvisoryApacheCouchDB struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheFlink defines model for advisory.ApacheFlink.
type AdvisoryApacheFlink struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheGuacamole defines model for advisory.ApacheGuacamole.
type AdvisoryApacheGuacamole struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheHTTP defines model for advisory.ApacheHTTP.
type AdvisoryApacheHTTP struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheHadoop defines model for advisory.ApacheHadoop.
type AdvisoryApacheHadoop struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheJSPWiki defines model for advisory.ApacheJSPWiki.
type AdvisoryApacheJSPWiki struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheKafka defines model for advisory.ApacheKafka.
type AdvisoryApacheKafka struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheLoggingServices defines model for advisory.ApacheLoggingServices.
type AdvisoryApacheLoggingServices struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheNiFi defines model for advisory.ApacheNiFi.
type AdvisoryApacheNiFi struct {
	AffectedVersion *string   `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	FixedVersions   *string   `json:"fixed_versions,omitempty"`
	References      *[]string `json:"references,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryApacheOFBiz defines model for advisory.ApacheOFBiz.
type AdvisoryApacheOFBiz struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheOpenMeetings defines model for advisory.ApacheOpenMeetings.
type AdvisoryApacheOpenMeetings struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheOpenOffice defines model for advisory.ApacheOpenOffice.
type AdvisoryApacheOpenOffice struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApachePulsar defines model for advisory.ApachePulsar.
type AdvisoryApachePulsar struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryApacheShiro defines model for advisory.ApacheShiro.
type AdvisoryApacheShiro struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheSpark defines model for advisory.ApacheSpark.
type AdvisoryApacheSpark struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheStruts defines model for advisory.ApacheStruts.
type AdvisoryApacheStruts struct {
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Id                *string   `json:"id,omitempty"`
	Impact            *string   `json:"impact,omitempty"`
	Rating            *string   `json:"rating,omitempty"`
	Remediation       *string   `json:"remediation,omitempty"`
	Summary           *string   `json:"summary,omitempty"`
	Title             *string   `json:"title,omitempty"`
	Url               *string   `json:"url,omitempty"`
	VulnerableVersion *[]string `json:"vulnerable_version,omitempty"`
}

// AdvisoryApacheSubversion defines model for advisory.ApacheSubversion.
type AdvisoryApacheSubversion struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheSuperset defines model for advisory.ApacheSuperset.
type AdvisoryApacheSuperset struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheTomcat defines model for advisory.ApacheTomcat.
type AdvisoryApacheTomcat struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryApacheZooKeeper defines model for advisory.ApacheZooKeeper.
type AdvisoryApacheZooKeeper struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAppCheck defines model for advisory.AppCheck.
type AdvisoryAppCheck struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAppgate defines model for advisory.Appgate.
type AdvisoryAppgate struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAppleAdvisory defines model for advisory.AppleAdvisory.
type AdvisoryAppleAdvisory struct {
	Components *[]AdvisoryAppleComponent `json:"components,omitempty"`
	Cve        *[]string                 `json:"cve,omitempty"`
	DateAdded  *string                   `json:"date_added,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Url        *string                   `json:"url,omitempty"`
}

// AdvisoryAppleComponent defines model for advisory.AppleComponent.
type AdvisoryAppleComponent struct {
	AvailableFor *string   `json:"available_for,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Impact       *string   `json:"impact,omitempty"`
	ItwExploit   *bool     `json:"itw_exploit,omitempty"`
	Name         *string   `json:"name,omitempty"`
}

// AdvisoryArchIssue defines model for advisory.ArchIssue.
type AdvisoryArchIssue struct {
	Advisories *[]string `json:"advisories,omitempty"`
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`

	// Issues cves
	Issues     *[]string `json:"issues,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Packages   *[]string `json:"packages,omitempty"`
	References *[]string `json:"references,omitempty"`
	Severity   *string   `json:"severity,omitempty"`
	Status     *string   `json:"status,omitempty"`
	Ticket     *string   `json:"ticket,omitempty"`
	Type       *string   `json:"type,omitempty"`
}

// AdvisoryArista defines model for advisory.Arista.
type AdvisoryArista struct {
	CsafUrl    *string   `json:"csaf_url,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAruba defines model for advisory.Aruba.
type AdvisoryAruba struct {
	Csaf      *string   `json:"csaf,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAssetNote defines model for advisory.AssetNote.
type AdvisoryAssetNote struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAsterisk defines model for advisory.Asterisk.
type AdvisoryAsterisk struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryAsus defines model for advisory.Asus.
type AdvisoryAsus struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Details   *string   `json:"details,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryAtlassianAdvisory defines model for advisory.AtlassianAdvisory.
type AdvisoryAtlassianAdvisory struct {
	AffectedVersion *[]string `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`

	// DetailedSummary overloading in places with 'RiskAssessment' and other places with
	// 'Description'
	DetailedSummary *string   `json:"detailed_summary,omitempty"`
	FixedVersion    *string   `json:"fixed_version,omitempty"`
	Link            *string   `json:"link,omitempty"`
	Products        *[]string `json:"products,omitempty"`
	References      *[]string `json:"references,omitempty"`
	ReleaseDate     *string   `json:"release_date,omitempty"`
	Severity        *string   `json:"severity,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
}

// AdvisoryAtlassianProducts defines model for advisory.AtlassianProducts.
type AdvisoryAtlassianProducts struct {
	Affected *[]string `json:"affected,omitempty"`
	Fixed    *[]string `json:"fixed,omitempty"`
	Name     *string   `json:"name,omitempty"`
}

// AdvisoryAtlassianVuln defines model for advisory.AtlassianVuln.
type AdvisoryAtlassianVuln struct {
	Cve       *[]string                    `json:"cve,omitempty"`
	DateAdded *string                      `json:"date_added,omitempty"`
	Products  *[]AdvisoryAtlassianProducts `json:"products,omitempty"`
	Summary   *string                      `json:"summary,omitempty"`
	Title     *string                      `json:"title,omitempty"`
	Url       *string                      `json:"url,omitempty"`
}

// AdvisoryAtredis defines model for advisory.Atredis.
type AdvisoryAtredis struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Products   *[]string `json:"products,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Vendors    *[]string `json:"vendors,omitempty"`
}

// AdvisoryAusCert defines model for advisory.AusCert.
type AdvisoryAusCert struct {
	Body            *string   `json:"body,omitempty"`
	BulletinId      *string   `json:"bulletinId,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cvss            *string   `json:"cvss,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Link            *string   `json:"link,omitempty"`
	OperatingSystem *string   `json:"operatingSystem,omitempty"`
	Product         *string   `json:"product,omitempty"`
	Publisher       *string   `json:"publisher,omitempty"`
	Resolution      *string   `json:"resolution,omitempty"`
}

// AdvisoryAutodesk defines model for advisory.Autodesk.
type AdvisoryAutodesk struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAvaya defines model for advisory.Avaya.
type AdvisoryAvaya struct {
	AdvisoryNumber *string   `json:"advisory_number,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	LastRevised    *string   `json:"last_revised,omitempty"`
	Overview       *string   `json:"overview,omitempty"`
	Severity       *string   `json:"severity,omitempty"`
	Title          *string   `json:"title,omitempty"`
	Url            *string   `json:"url,omitempty"`
}

// AdvisoryAvigilon defines model for advisory.Avigilon.
type AdvisoryAvigilon struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryAward defines model for advisory.Award.
type AdvisoryAward struct {
	Amount   *string `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
}

// AdvisoryAxis defines model for advisory.Axis.
type AdvisoryAxis struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBBraunAdvisory defines model for advisory.BBraunAdvisory.
type AdvisoryBBraunAdvisory struct {
	Attention       *string   `json:"attention,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Equipment       *[]string `json:"equipment,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Vendor          *string   `json:"vendor,omitempty"`
	Vulnerabilities *[]string `json:"vulnerabilities,omitempty"`
}

// AdvisoryBDUAdvisory defines model for advisory.BDUAdvisory.
type AdvisoryBDUAdvisory struct {
	// BduId BDU:2022-03833
	BduId *string `json:"bdu_id,omitempty"`

	// Cve []string{"CVE-2022-28194"}
	Cve   *[]string         `json:"cve,omitempty"`
	Cvss  *AdvisoryBDUCvss  `json:"cvss,omitempty"`
	Cvss3 *AdvisoryBDUCvss3 `json:"cvss3,omitempty"`

	// Cwe CWE-119
	Cwe       *string `json:"cwe,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`

	// DescriptionRu Библиотека libxml2 до версии 2.9.12 не корректно обрабатывает XML-документы, содержащие определенные сущности. В результате могут быть выполнены произвольные команды.
	DescriptionRu *string                 `json:"description_ru,omitempty"`
	Environment   *AdvisoryBDUEnvironment `json:"environment,omitempty"`

	// ExploitStatusEn Exploited
	ExploitStatusEn *string `json:"exploit_status_en,omitempty"`

	// ExploitStatusRu Exploited
	ExploitStatusRu *string `json:"exploit_status_ru,omitempty"`

	// FixStatusEn Fixed
	FixStatusEn *string `json:"fix_status_en,omitempty"`

	// FixStatusRu Fixed
	FixStatusRu *string `json:"fix_status_ru,omitempty"`

	// IdentifyDate 2022-09-01
	IdentifyDate *string `json:"identify_date,omitempty"`

	// NameRu BDU:2022-03833: Уязвимость модуля Cboot (tegrabl_cbo.c) пакета драйверов микропрограммного обеспечения вычислительных плат NVIDIA Jetson, позволяющая нарушителю выполнить произвольный код или вызвать частичный отказ в обслуживании
	NameRu *string `json:"name_ru,omitempty"`

	// SeverityRu High
	SeverityRu *string `json:"severity_ru,omitempty"`

	// SolutionRu Обновите драйверы микропрограммного обеспечения вычислительных плат NVIDIA Jetson до версии 32.6.1 или более поздней
	SolutionRu *string `json:"solution_ru,omitempty"`

	// Sources https://nvd.nist.gov/vuln/detail/CVE-2022-28194
	Sources *[]string `json:"sources,omitempty"`

	// TextRu Библиотека libxml2 до версии 2.9.12 не корректно обрабатывает XML-документы, содержащие определенные сущности. В результате могут быть выполнены произвольные команды.
	TextRu *string `json:"text_ru,omitempty"`

	// Url https://bdu.fstec.ru/vul/2022-03833
	Url *string `json:"url,omitempty"`

	// VulStatusEn Exploitable
	VulStatusEn *string `json:"vul_status_en,omitempty"`

	// VulStatusRu Exploitable
	VulStatusRu        *string                        `json:"vul_status_ru,omitempty"`
	VulnerableSoftware *AdvisoryBDUVulnerableSoftware `json:"vulnerable_software,omitempty"`
}

// AdvisoryBDUCvss defines model for advisory.BDUCvss.
type AdvisoryBDUCvss struct {
	Vector *AdvisoryBDUVector `json:"vector,omitempty"`
}

// AdvisoryBDUCvss3 defines model for advisory.BDUCvss3.
type AdvisoryBDUCvss3 struct {
	Vector *AdvisoryBDUVector `json:"vector,omitempty"`
}

// AdvisoryBDUEnvironment defines model for advisory.BDUEnvironment.
type AdvisoryBDUEnvironment struct {
	Os *AdvisoryBDUOs `json:"os,omitempty"`
}

// AdvisoryBDUOs defines model for advisory.BDUOs.
type AdvisoryBDUOs struct {
	Name     *string `json:"name,omitempty"`
	Platform *string `json:"platform,omitempty"`
	Text     *string `json:"text,omitempty"`
	Vendor   *string `json:"vendor,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryBDUSoft defines model for advisory.BDUSoft.
type AdvisoryBDUSoft struct {
	Name     *string           `json:"name,omitempty"`
	Platform *string           `json:"platform,omitempty"`
	Text     *string           `json:"text,omitempty"`
	Types    *AdvisoryBDUTypes `json:"types,omitempty"`
	Vendor   *string           `json:"vendor,omitempty"`
	Version  *string           `json:"version,omitempty"`
}

// AdvisoryBDUTypes defines model for advisory.BDUTypes.
type AdvisoryBDUTypes struct {
	Text *string `json:"text,omitempty"`
	Type *string `json:"type,omitempty"`
}

// AdvisoryBDUVector defines model for advisory.BDUVector.
type AdvisoryBDUVector struct {
	Score *string `json:"score,omitempty"`
	Text  *string `json:"text,omitempty"`
}

// AdvisoryBDUVulnerableSoftware defines model for advisory.BDUVulnerableSoftware.
type AdvisoryBDUVulnerableSoftware struct {
	Soft *AdvisoryBDUSoft `json:"soft,omitempty"`
}

// AdvisoryBLS defines model for advisory.BLS.
type AdvisoryBLS struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Prodcut   *string   `json:"prodcut,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Vendor    *string   `json:"vendor,omitempty"`
}

// AdvisoryBandr defines model for advisory.Bandr.
type AdvisoryBandr struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	DocumentId *string   `json:"document_id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryBaxterAdvisory defines model for advisory.BaxterAdvisory.
type AdvisoryBaxterAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryBeckhoffAdvisory defines model for advisory.BeckhoffAdvisory.
type AdvisoryBeckhoffAdvisory struct {
	BeckhoffId      *string   `json:"beckhoff_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Vde             *[]string `json:"vde,omitempty"`
}

// AdvisoryBectonDickinsonAdvisory defines model for advisory.BectonDickinsonAdvisory.
type AdvisoryBectonDickinsonAdvisory struct {
	Cve              *[]string                   `json:"cve,omitempty"`
	DateAdded        *string                     `json:"date_added,omitempty"`
	ProductsAffected *[]AdvisoryProductsAffected `json:"products_affected,omitempty"`
	Title            *string                     `json:"title,omitempty"`
	Url              *string                     `json:"url,omitempty"`
}

// AdvisoryBeldenAdvisory defines model for advisory.BeldenAdvisory.
type AdvisoryBeldenAdvisory struct {
	BeldenId        *string   `json:"belden_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Version         *string   `json:"version,omitempty"`
}

// AdvisoryBeyondTrust defines model for advisory.BeyondTrust.
type AdvisoryBeyondTrust struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBinarly defines model for advisory.Binarly.
type AdvisoryBinarly struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryBitDefender defines model for advisory.BitDefender.
type AdvisoryBitDefender struct {
	AdditionalDetails *string   `json:"additional_details,omitempty"`
	AffectedProducts  *string   `json:"affected_products,omitempty"`
	AffectedVendors   *string   `json:"affected_vendors,omitempty"`
	Credit            *string   `json:"credit,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	Cvss              *string   `json:"cvss,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Details           *string   `json:"details,omitempty"`
	Timeline          *string   `json:"timeline,omitempty"`
	Title             *string   `json:"title,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// AdvisoryBlackBerry defines model for advisory.BlackBerry.
type AdvisoryBlackBerry struct {
	Bsrt      *string   `json:"bsrt,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBoschAdvisory defines model for advisory.BoschAdvisory.
type AdvisoryBoschAdvisory struct {
	BoschId         *string   `json:"bosch_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryBostonScientificAdvisory defines model for advisory.BostonScientificAdvisory.
type AdvisoryBostonScientificAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryBotnet defines model for advisory.Botnet.
type AdvisoryBotnet struct {
	BotnetName    *string                 `json:"botnet_name,omitempty"`
	Cve           *[]string               `json:"cve,omitempty"`
	CveReferences *[]AdvisoryCVEReference `json:"cve_references,omitempty"`
	DateAdded     *string                 `json:"date_added,omitempty"`
	MalpediaUrl   *string                 `json:"malpedia_url,omitempty"`
}

// AdvisoryBranch defines model for advisory.Branch.
type AdvisoryBranch struct {
	Branch          *[]AdvisoryBranch          `json:"branch,omitempty"`
	Fullproductname *[]AdvisoryFullProductName `json:"fullproductname,omitempty"`
	Name            *string                    `json:"name,omitempty"`

	// Type diff
	Type *int `json:"type,omitempty"`
}

// AdvisoryBugzilla defines model for advisory.Bugzilla.
type AdvisoryBugzilla struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// AdvisoryCACyberCentreAdvisory defines model for advisory.CACyberCentreAdvisory.
type AdvisoryCACyberCentreAdvisory struct {
	ControlSystems *bool     `json:"control_systems,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	HtmlUrl        *string   `json:"html_url,omitempty"`
	SerialNumber   *string   `json:"serial_number,omitempty"`
	Title          *string   `json:"title,omitempty"`
}

// AdvisoryCBLMariner defines model for advisory.CBLMariner.
type AdvisoryCBLMariner struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Package    *string   `json:"package,omitempty"`
	Severity   *string   `json:"severity,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Version    *string   `json:"version,omitempty"`
}

// AdvisoryCERTEUAdvisory defines model for advisory.CERTEUAdvisory.
type AdvisoryCERTEUAdvisory struct {
	AdvisoryId       *string   `json:"advisoryId,omitempty"`
	AffectedProducts *string   `json:"affectedProducts,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	History          *[]string `json:"history,omitempty"`
	Link             *string   `json:"link,omitempty"`
	Recommendations  *string   `json:"recommendations,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	TechnicalDetails *string   `json:"technicalDetails,omitempty"`
	Title            *string   `json:"title,omitempty"`
}

// AdvisoryCESA defines model for advisory.CESA.
type AdvisoryCESA struct {
	Arch       *[]string                `json:"arch,omitempty"`
	Cve        *[]string                `json:"cve,omitempty"`
	DateAdded  *string                  `json:"date_added,omitempty"`
	Id         *string                  `json:"id,omitempty"`
	IssueDate  *string                  `json:"issueDate,omitempty"`
	OsRelease  *string                  `json:"osRelease,omitempty"`
	Packages   *[]AdvisoryCentosPackage `json:"packages,omitempty"`
	References *[]string                `json:"references,omitempty"`
	Title      *string                  `json:"title,omitempty"`
}

// AdvisoryCISAAlert defines model for advisory.CISAAlert.
type AdvisoryCISAAlert struct {
	AffectedProducts *string   `json:"affectedProducts,omitempty"`
	AlertID          *string   `json:"alertID,omitempty"`
	Archived         *bool     `json:"archived,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	CveexploitedITW  *bool     `json:"cveexploitedITW,omitempty"`
	Cvss             *string   `json:"cvss,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Icsa             *bool     `json:"icsa,omitempty"`
	Icsma            *bool     `json:"icsma,omitempty"`
	Mitigations      *string   `json:"mitigations,omitempty"`
	ReleaseDate      *string   `json:"releaseDate,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
	Vendor           *string   `json:"vendor,omitempty"`
}

// AdvisoryCNNVDEntryJSON defines model for advisory.CNNVDEntryJSON.
type AdvisoryCNNVDEntryJSON struct {
	BugtraqId         *string   `json:"bugtraq-id,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Id                *string   `json:"id,omitempty"`
	ModifiedDate      *string   `json:"modified-date,omitempty"`
	NameCn            *string   `json:"name_cn,omitempty"`
	PublishedDate     *string   `json:"published-date,omitempty"`
	SeverityCn        *string   `json:"severity_cn,omitempty"`
	SeverityEn        *string   `json:"severity_en,omitempty"`
	Source            *string   `json:"source,omitempty"`
	Url               *string   `json:"url,omitempty"`
	VulnDescriptionCn *string   `json:"vuln-description_cn,omitempty"`
	VulnSolution      *string   `json:"vuln-solution,omitempty"`
	VulnTypeCn        *string   `json:"vuln-type_cn,omitempty"`
	VulnTypeEn        *string   `json:"vuln-type_en,omitempty"`
}

// AdvisoryCNVDBulletin defines model for advisory.CNVDBulletin.
type AdvisoryCNVDBulletin struct {
	Cnta          *string   `json:"cnta,omitempty"`
	Cnvd          *[]string `json:"cnvd,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	Date          *string   `json:"date,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Id            *string   `json:"id,omitempty"`
	ReferenceUrls *[]string `json:"reference_urls,omitempty"`
	Title         *string   `json:"title,omitempty"`
	Url           *string   `json:"url,omitempty"`
}

// AdvisoryCNVDFlaw defines model for advisory.CNVDFlaw.
type AdvisoryCNVDFlaw struct {
	AffectedProductsCn *string   `json:"affected_products_cn,omitempty"`
	BugtraqId          *string   `json:"bugtraq_id,omitempty"`
	Cnvd               *string   `json:"cnvd,omitempty"`
	CollectionTime     *string   `json:"collection_time,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	HarmLevel          *string   `json:"harm_level,omitempty"`
	Id                 *string   `json:"id,omitempty"`
	PublicDate         *string   `json:"public_date,omitempty"`
	ReferenceUrls      *[]string `json:"reference_urls,omitempty"`
	SubmissionTime     *string   `json:"submission_time,omitempty"`
	TitleCn            *string   `json:"title_cn,omitempty"`
	UpdateTime         *string   `json:"update_time,omitempty"`
	Url                *string   `json:"url,omitempty"`
	ValidationInfoCn   *string   `json:"validation_info_cn,omitempty"`
	ValidationInfoEn   *string   `json:"validation_info_en,omitempty"`
	VendorPatchCn      *string   `json:"vendor_patch_cn,omitempty"`
	VulnAttachments    *[]string `json:"vuln_attachments,omitempty"`
	VulnDescriptionCn  *string   `json:"vuln_description_cn,omitempty"`
	VulnSolutionCn     *string   `json:"vuln_solution_cn,omitempty"`
	VulnTypeCn         *string   `json:"vuln_type_cn,omitempty"`
}

// AdvisoryCOSUpdate defines model for advisory.COSUpdate.
type AdvisoryCOSUpdate struct {
	Changed   *[]string `json:"changed,omitempty"`
	Featured  *[]string `json:"featured,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Reference *string   `json:"reference,omitempty"`
	Security  *[]string `json:"security,omitempty"`
	Updated   *string   `json:"updated,omitempty"`
}

// AdvisoryCPEMatch defines model for advisory.CPEMatch.
type AdvisoryCPEMatch struct {
	Criteria        *string `json:"criteria,omitempty"`
	MatchCriteriaId *string `json:"matchCriteriaId,omitempty"`
	Vulnerable      *bool   `json:"vulnerable,omitempty"`
}

// AdvisoryCPENode defines model for advisory.CPENode.
type AdvisoryCPENode struct {
	CpeMatch *[]AdvisoryCPEMatch `json:"cpeMatch,omitempty"`
	Negate   *bool               `json:"negate,omitempty"`
	Operator *string             `json:"operator,omitempty"`
}

// AdvisoryCSAF defines model for advisory.CSAF.
type AdvisoryCSAF struct {
	// Document Document contains metadata about the CSAF document itself.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#321-document-property
	Document *AdvisoryDocumentMetadata `json:"document,omitempty"`

	// ProductTree ProductTree contains information about the product tree (branches only).
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#322-product-tree-property
	ProductTree *AdvisoryProductBranch `json:"product_tree,omitempty"`

	// Vulnerabilities Vulnerabilities contains information about the vulnerabilities,
	// (i.e. CVEs), associated threats, and product status.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#323-vulnerabilities-property
	Vulnerabilities *[]AdvisoryCSAFVulnerability `json:"vulnerabilities,omitempty"`
}

// AdvisoryCSAFReference defines model for advisory.CSAFReference.
type AdvisoryCSAFReference struct {
	Category *string `json:"category,omitempty"`
	Summary  *string `json:"summary,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// AdvisoryCSAFRelationship defines model for advisory.CSAFRelationship.
type AdvisoryCSAFRelationship struct {
	Category                  *string          `json:"category,omitempty"`
	FullProductName           *AdvisoryProduct `json:"full_product_name,omitempty"`
	ProductReference          *string          `json:"product_reference,omitempty"`
	RelatesToProductReference *string          `json:"relates_to_product_reference,omitempty"`
}

// AdvisoryCSAFVulnerability defines model for advisory.CSAFVulnerability.
type AdvisoryCSAFVulnerability struct {
	// Cve MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3232-vulnerabilities-property---cve
	Cve *string `json:"cve,omitempty"`

	// Flags Machine readable flags for products related to vulnerability
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3235-vulnerabilities-property---flags
	Flags *[]AdvisoryFlag `json:"flags,omitempty"`

	// Ids List of IDs represents a list of unique labels or tracking IDs for the vulnerability (if such information exists).
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3236-vulnerabilities-property---ids
	Ids *[]AdvisoryTrackingID `json:"ids,omitempty"`

	// ProductStatus Provide details on the status of the referenced product related to the vulnerability.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#3239-vulnerabilities-property---product-status
	ProductStatus *map[string][]string `json:"product_status,omitempty"`

	// References Vulnerability references holds a list of references associated with this vulnerability item.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32310-vulnerabilities-property---references
	References  *[]AdvisoryReference `json:"references,omitempty"`
	ReleaseDate *string              `json:"release_date,omitempty"`

	// Remediations Provide details of remediations associated with a Vulnerability
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32312-vulnerabilities-property---remediations
	Remediations *[]AdvisoryRemediationData `json:"remediations,omitempty"`

	// Threats Provide details of threats associated with a vulnerability.
	//
	// https://docs.oasis-open.org/csaf/csaf/v2.0/os/csaf-v2.0-os.html#32314-vulnerabilities-property---threats
	Threats *[]AdvisoryThreatData `json:"threats,omitempty"`
}

// AdvisoryCVEDetail defines model for advisory.CVEDetail.
type AdvisoryCVEDetail struct {
	BaseScore   *string `json:"baseScore,omitempty"`
	Cveid       *string `json:"cveid,omitempty"`
	Description *string `json:"description,omitempty"`
	Vector      *string `json:"vector,omitempty"`
}

// AdvisoryCVEReference defines model for advisory.CVEReference.
type AdvisoryCVEReference struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCVRFReference defines model for advisory.CVRFReference.
type AdvisoryCVRFReference struct {
	Description *string `json:"description,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// AdvisoryCVSS defines model for advisory.CVSS.
type AdvisoryCVSS struct {
	Score    *string `json:"score,omitempty"`
	Severity *string `json:"severity,omitempty"`
	Type     *string `json:"type,omitempty"`
	Vector   *string `json:"vector,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryCWENode defines model for advisory.CWENode.
type AdvisoryCWENode struct {
	Cweid       *string `json:"cweid,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AdvisoryCanvasExploit defines model for advisory.CanvasExploit.
type AdvisoryCanvasExploit struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	ExploitPack *string   `json:"exploit_pack,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryCarestreamAdvisory defines model for advisory.CarestreamAdvisory.
type AdvisoryCarestreamAdvisory struct {
	CarestreamId    *string   `json:"carestream_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryCarrier defines model for advisory.Carrier.
type AdvisoryCarrier struct {
	AdvisoryId      *string   `json:"advisory_id,omitempty"`
	AffectedProduct *string   `json:"affected_product,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryCentosPackage defines model for advisory.CentosPackage.
type AdvisoryCentosPackage struct {
	Filename *string `json:"filename,omitempty"`
	Name     *string `json:"name,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryCertBE defines model for advisory.CertBE.
type AdvisoryCertBE struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryCertFRAdvisory defines model for advisory.CertFRAdvisory.
type AdvisoryCertFRAdvisory struct {
	AffectedSystemsFr *string   `json:"affected_systems_fr,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Reference         *string   `json:"reference,omitempty"`
	References        *[]string `json:"references,omitempty"`
	ResumeFr          *string   `json:"resume_fr,omitempty"`
	RisksFr           *string   `json:"risks_fr,omitempty"`
	SolutionFr        *string   `json:"solution_fr,omitempty"`
	SourceFr          *string   `json:"source_fr,omitempty"`
	TitleFr           *string   `json:"title_fr,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// AdvisoryCertUA defines model for advisory.CertUA.
type AdvisoryCertUA struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	SummaryUa  *string   `json:"summary_ua,omitempty"`
	TitleUa    *string   `json:"title_ua,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryChainGuard defines model for advisory.ChainGuard.
type AdvisoryChainGuard struct {
	Apkurl *string   `json:"apkurl,omitempty"`
	Archs  *[]string `json:"archs,omitempty"`

	// DateAdded un-used
	DateAdded *string                      `json:"date_added,omitempty"`
	Packages  *[]AdvisoryChainGuardPackage `json:"packages,omitempty"`
	Reponame  *string                      `json:"reponame,omitempty"`
	Urlprefix *string                      `json:"urlprefix,omitempty"`
}

// AdvisoryChainGuardPackage defines model for advisory.ChainGuardPackage.
type AdvisoryChainGuardPackage struct {
	Name     *string                     `json:"name,omitempty"`
	Secfixes *[]AdvisoryChainGuardSecFix `json:"secfixes,omitempty"`
}

// AdvisoryChainGuardSecFix defines model for advisory.ChainGuardSecFix.
type AdvisoryChainGuardSecFix struct {
	Cve     *[]string `json:"cve,omitempty"`
	Version *string   `json:"version,omitempty"`
}

// AdvisoryCheckPoint defines model for advisory.CheckPoint.
type AdvisoryCheckPoint struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	DateUpdated *string   `json:"date_updated,omitempty"`
	Reference   *string   `json:"reference,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryChrome defines model for advisory.Chrome.
type AdvisoryChrome struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCiscoAdvisory defines model for advisory.CiscoAdvisory.
type AdvisoryCiscoAdvisory struct {
	// CiscoBugId multiple
	CiscoBugId *string `json:"ciscoBugId,omitempty"`
	Csaf       *string `json:"csaf,omitempty"`

	// Cve multiple
	Cve  *[]string `json:"cve,omitempty"`
	Cvrf *string   `json:"cvrf,omitempty"`

	// Cwe multiple
	Cwe              *string `json:"cwe,omitempty"`
	DateAdded        *string `json:"date_added,omitempty"`
	Id               *int    `json:"id,omitempty"`
	Identifier       *string `json:"identifier,omitempty"`
	Name             *string `json:"name,omitempty"`
	RelatedResources *string `json:"related_resources,omitempty"`
	Severity         *string `json:"severity,omitempty"`
	Status           *string `json:"status,omitempty"`
	Summary          *string `json:"summary,omitempty"`
	Title            *string `json:"title,omitempty"`
	TotalCount       *int    `json:"totalCount,omitempty"`
	Url              *string `json:"url,omitempty"`
	Version          *string `json:"version,omitempty"`
	Workarounds      *string `json:"workarounds,omitempty"`
	WorkflowStatus   *string `json:"workflowStatus,omitempty"`
}

// AdvisoryCitrixAdvisory defines model for advisory.CitrixAdvisory.
type AdvisoryCitrixAdvisory struct {
	CitrixId    *string   `json:"citrixId,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Link        *string   `json:"link,omitempty"`
	Products    *[]string `json:"products,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryClarotyVulnerability defines model for advisory.ClarotyVulnerability.
type AdvisoryClarotyVulnerability struct {
	AdvisoryUrl       *string   `json:"advisory_url,omitempty"`
	ClarotyUrl        *string   `json:"claroty_url,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	CvssV3            *float32  `json:"cvss_v3,omitempty"`
	Cwe               *string   `json:"cwe,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Product           *string   `json:"product,omitempty"`
	Target            *string   `json:"target,omitempty"`
	Vendor            *string   `json:"vendor,omitempty"`
	VendorAdvisoryUrl *string   `json:"vendor_advisory_url,omitempty"`
}

// AdvisoryCloudBees defines model for advisory.CloudBees.
type AdvisoryCloudBees struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryCloudVulnDBAdvisory defines model for advisory.CloudVulnDBAdvisory.
type AdvisoryCloudVulnDBAdvisory struct {
	AffectedServices *string   `json:"affectedServices,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Link             *string   `json:"link,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Title            *string   `json:"title,omitempty"`
}

// AdvisoryCodesysAdvisory defines model for advisory.CodesysAdvisory.
type AdvisoryCodesysAdvisory struct {
	CodesysId       *string   `json:"codesys_id,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryCompassSecurity defines model for advisory.CompassSecurity.
type AdvisoryCompassSecurity struct {
	CsncId       *string   `json:"csnc_id,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Effect       *string   `json:"effect,omitempty"`
	Introduction *string   `json:"introduction,omitempty"`
	Product      *string   `json:"product,omitempty"`
	References   *[]string `json:"references,omitempty"`
	Risk         *string   `json:"risk,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Url          *string   `json:"url,omitempty"`
	Vendor       *string   `json:"vendor,omitempty"`
}

// AdvisoryContainerOS defines model for advisory.ContainerOS.
type AdvisoryContainerOS struct {
	Cve       *[]string            `json:"cve,omitempty"`
	DateAdded *string              `json:"date_added,omitempty"`
	Title     *string              `json:"title,omitempty"`
	Updates   *[]AdvisoryCOSUpdate `json:"updates,omitempty"`
	Url       *string              `json:"url,omitempty"`
}

// AdvisoryCorrection defines model for advisory.Correction.
type AdvisoryCorrection struct {
	CorrectedAt *string `json:"correctedAt,omitempty"`
	Orelease    *string `json:"orelease,omitempty"`
	Release     *string `json:"release,omitempty"`
}

// AdvisoryCredit defines model for advisory.Credit.
type AdvisoryCredit struct {
	Lang  *string `json:"lang,omitempty"`
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryCrestron defines model for advisory.Crestron.
type AdvisoryCrestron struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Threat     *string   `json:"threat,omitempty"`
	Title      *string   `json:"title,omitempty"`
}

// AdvisoryCurl defines model for advisory.Curl.
type AdvisoryCurl struct {
	Cve       *[]string      `json:"cve,omitempty"`
	DateAdded *string        `json:"date_added,omitempty"`
	Info      *AdvisoryOCurl `json:"info,omitempty"`
	Url       *string        `json:"url,omitempty"`
}

// AdvisoryCurlAffected defines model for advisory.CurlAffected.
type AdvisoryCurlAffected struct {
	Ranges   *[]AdvisoryCurlRange `json:"ranges,omitempty"`
	Versions *[]string            `json:"versions,omitempty"`
}

// AdvisoryCurlCWE defines model for advisory.CurlCWE.
type AdvisoryCurlCWE struct {
	Desc *string `json:"desc,omitempty"`
	Id   *string `json:"id,omitempty"`
}

// AdvisoryCurlCredit defines model for advisory.CurlCredit.
type AdvisoryCurlCredit struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// AdvisoryCurlRange defines model for advisory.CurlRange.
type AdvisoryCurlRange struct {
	Events *[]map[string]string `json:"events,omitempty"`
	Repo   *string              `json:"repo,omitempty"`
	Type   *string              `json:"type,omitempty"`
}

// AdvisoryCvrf defines model for advisory.Cvrf.
type AdvisoryCvrf struct {
	Cve             *[]string                 `json:"cve,omitempty"`
	Notes           *[]AdvisoryDocumentNote   `json:"notes,omitempty"`
	ProductTree     *AdvisoryProductTree      `json:"productTree,omitempty"`
	References      *[]AdvisoryCVRFReference  `json:"references,omitempty"`
	Title           *string                   `json:"title,omitempty"`
	Tracking        *AdvisoryDocumentTracking `json:"tracking,omitempty"`
	Vulnerabilities *[]AdvisoryVulnerability  `json:"vulnerabilities,omitempty"`
}

// AdvisoryCwes defines model for advisory.Cwes.
type AdvisoryCwes struct {
	Nodes      *[]AdvisoryCWENode `json:"nodes,omitempty"`
	TotalCount *int               `json:"totalCount,omitempty"`
}

// AdvisoryDBSpecific defines model for advisory.DBSpecific.
type AdvisoryDBSpecific struct {
	CWE          *AdvisoryCurlCWE `json:"CWE,omitempty"`
	Award        *AdvisoryAward   `json:"award,omitempty"`
	LastAffected *string          `json:"last_affected,omitempty"`
	Package      *string          `json:"package,omitempty"`
	Severity     *string          `json:"severity,omitempty"`
	Url          *string          `json:"url,omitempty"`
	Www          *string          `json:"www,omitempty"`
}

// AdvisoryDahua defines model for advisory.Dahua.
type AdvisoryDahua struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryDassault defines model for advisory.Dassault.
type AdvisoryDassault struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Title            *string   `json:"title,omitempty"`
	UpdatedAt        *string   `json:"updated_at,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryDateTime defines model for advisory.DateTime.
type AdvisoryDateTime struct {
	Date *string `json:"date,omitempty"`
}

// AdvisoryDebianCVE defines model for advisory.DebianCVE.
type AdvisoryDebianCVE struct {
	Cve         *string                          `json:"cve,omitempty"`
	Debianbug   *int                             `json:"debianbug,omitempty"`
	Description *string                          `json:"description,omitempty"`
	Releases    *[]AdvisoryAffectedDebianRelease `json:"releases,omitempty"`
	Scope       *string                          `json:"scope,omitempty"`
	Url         *string                          `json:"url,omitempty"`
}

// AdvisoryDebianSecurityAdvisory defines model for advisory.DebianSecurityAdvisory.
type AdvisoryDebianSecurityAdvisory struct {
	AffectedPackages *[]AdvisoryAffectedDebianPackage `json:"affected_packages,omitempty"`
	Cve              *[]string                        `json:"cve,omitempty"`
	DateAdded        *string                          `json:"date_added,omitempty"`
	Dsa              *string                          `json:"dsa,omitempty"`
	Title            *string                          `json:"title,omitempty"`
	Url              *string                          `json:"url,omitempty"`
}

// AdvisoryDell defines model for advisory.Dell.
type AdvisoryDell struct {
	CombinedProductList *string   `json:"combinedProductList,omitempty"`
	Cve                 *[]string `json:"cve,omitempty"`
	DateAdded           *string   `json:"date_added,omitempty"`
	Severity            *string   `json:"severity,omitempty"`
	Title               *string   `json:"title,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryDeltaAdvisory defines model for advisory.DeltaAdvisory.
type AdvisoryDeltaAdvisory struct {
	AffectedProducts  *string   `json:"affectedProducts,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	Cvss              *string   `json:"cvss,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	Description       *string   `json:"description,omitempty"`
	Link              *string   `json:"link,omitempty"`
	RecommendedAction *string   `json:"recommendedAction,omitempty"`
	Title             *string   `json:"title,omitempty"`
}

// AdvisoryDocumentMetadata defines model for advisory.DocumentMetadata.
type AdvisoryDocumentMetadata struct {
	References *[]AdvisoryCSAFReference `json:"references,omitempty"`

	// Title Aggregate severity is a vehicle that is provided by the document producer to convey the urgency and
	// criticality with which the one or more vulnerabilities reported should be addressed.
	Title    *string           `json:"title,omitempty"`
	Tracking *AdvisoryTracking `json:"tracking,omitempty"`
}

// AdvisoryDocumentNote defines model for advisory.DocumentNote.
type AdvisoryDocumentNote struct {
	Text  *string `json:"text,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryDocumentPublisher defines model for advisory.DocumentPublisher.
type AdvisoryDocumentPublisher struct {
	ContactDetails   *string `json:"contact_details,omitempty"`
	IssuingAuthority *string `json:"issuing_authority,omitempty"`

	// Type the json for this is missing/broke
	Type *int `json:"type,omitempty"`
}

// AdvisoryDocumentTracking defines model for advisory.DocumentTracking.
type AdvisoryDocumentTracking struct {
	CurrentReleaseDate *string             `json:"currentReleaseDate,omitempty"`
	Id                 *string             `json:"id,omitempty"`
	InitialReleaseDate *string             `json:"initialReleaseDate,omitempty"`
	RevisionHistory    *[]AdvisoryRevision `json:"revisionHistory,omitempty"`
	Status             *string             `json:"status,omitempty"`
	Version            *string             `json:"version,omitempty"`
}

// AdvisoryDotCMS defines model for advisory.DotCMS.
type AdvisoryDotCMS struct {
	Credit       *string   `json:"credit,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Description  *string   `json:"description,omitempty"`
	FixedVersion *string   `json:"fixed_version,omitempty"`
	IssueId      *string   `json:"issue_id,omitempty"`
	Mitigation   *string   `json:"mitigation,omitempty"`
	References   *[]string `json:"references,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// AdvisoryDragosAdvisory defines model for advisory.DragosAdvisory.
type AdvisoryDragosAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryDraytek defines model for advisory.Draytek.
type AdvisoryDraytek struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEOLReleaseData defines model for advisory.EOLReleaseData.
type AdvisoryEOLReleaseData struct {
	AlreadyEol *bool `json:"already_eol,omitempty"`

	// Branch Alpine Linux
	Branch *string `json:"branch,omitempty"`

	// BranchUrl Alpine Linux
	BranchUrl *string `json:"branch_url,omitempty"`
	Codename  *string `json:"codename,omitempty"`
	Cpe       *string `json:"cpe,omitempty"`
	EolDate   *string `json:"eol_date,omitempty"`

	// EolDateExtendedSupport Oracle Linux, Solaris
	EolDateExtendedSupport *string `json:"eol_date_extended_support,omitempty"`

	// EolDatePremierSupport Oracle Linux, Solaris
	EolDatePremierSupport *string `json:"eol_date_premier_support,omitempty"`
	EolEltsDate           *string `json:"eol_elts_date,omitempty"`
	EolLtsDate            *string `json:"eol_lts_date,omitempty"`

	// GitBranch Alpine Linux
	GitBranch *string `json:"git_branch,omitempty"`

	// GitBranchUrl Alpine Linux
	GitBranchUrl *string `json:"git_branch_url,omitempty"`

	// Lts Ubuntu
	Lts *bool `json:"lts,omitempty"`

	// MinorReleases Alpine Linux
	MinorReleases *[]string `json:"minor_releases,omitempty"`
	Product       *string   `json:"product,omitempty"`
	ReleaseDate   *string   `json:"release_date,omitempty"`
	ReleaseName   *string   `json:"release_name,omitempty"`
	SourceUrl     *string   `json:"source_url,omitempty"`

	// TechnologyLevel AIX
	TechnologyLevel *string `json:"technology_level,omitempty"`
	Vendor          *string `json:"vendor,omitempty"`
	Version         *string `json:"version,omitempty"`

	// VersionApi Android
	VersionApi *string `json:"version_api,omitempty"`

	// VersionDarwin macOS
	VersionDarwin *string `json:"version_darwin,omitempty"`

	// VersionSunos Solaris
	VersionSunos *string `json:"version_sunos,omitempty"`

	// WindowsCurrentBuild Microsoft Windows
	WindowsCurrentBuild *string `json:"windows_current_build,omitempty"`

	// WindowsDisplayVersion Microsoft Windows
	WindowsDisplayVersion *string `json:"windows_display_version,omitempty"`

	// WindowsEditionId Microsoft Windows
	WindowsEditionId *string `json:"windows_edition_id,omitempty"`

	// WindowsInsiderPreview Microsoft Windows
	WindowsInsiderPreview *bool `json:"windows_insider_preview,omitempty"`
}

// AdvisoryEatonAdvisory defines model for advisory.EatonAdvisory.
type AdvisoryEatonAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	EatonId   *string   `json:"eaton_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEcoSystem defines model for advisory.EcoSystem.
type AdvisoryEcoSystem struct {
	Severity *string `json:"severity,omitempty"`
	Spl      *string `json:"spl,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// AdvisoryElastic defines model for advisory.Elastic.
type AdvisoryElastic struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Esaid       *string   `json:"esaid,omitempty"`
	Remediation *string   `json:"remediation,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
}

// AdvisoryElspec defines model for advisory.Elspec.
type AdvisoryElspec struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Severity  *string   `json:"severity,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEmersonAdvisory defines model for advisory.EmersonAdvisory.
type AdvisoryEmersonAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	EmersonId *string   `json:"emerson_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryEvent defines model for advisory.Event.
type AdvisoryEvent struct {
	Fixed        *string `json:"fixed,omitempty"`
	Introduced   *string `json:"introduced,omitempty"`
	LastAffected *string `json:"last_affected,omitempty"`
	Limit        *string `json:"limit,omitempty"`
}

// AdvisoryExodusIntel defines model for advisory.ExodusIntel.
type AdvisoryExodusIntel struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DisclosedPublic *string   `json:"disclosed_public,omitempty"`
	DisclosedVendor *string   `json:"disclosed_vendor,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryExploitDBExploitv2 defines model for advisory.ExploitDBExploitv2.
type AdvisoryExploitDBExploitv2 struct {
	Author    *string   `json:"author,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	EdbId     *string   `json:"edb_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFSecure defines model for advisory.FSecure.
type AdvisoryFSecure struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFastly defines model for advisory.Fastly.
type AdvisoryFastly struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFileCloud defines model for advisory.FileCloud.
type AdvisoryFileCloud struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryFixAff defines model for advisory.FixAff.
type AdvisoryFixAff struct {
	AffectedSince *string `json:"affected_since,omitempty"`
	FixedVersion  *string `json:"fixed_version,omitempty"`
	PatchUrl      *string `json:"patch_url,omitempty"`
}

// AdvisoryFlag defines model for advisory.Flag.
type AdvisoryFlag struct {
	Date       *string   `json:"date,omitempty"`
	GroupIds   *[]string `json:"group_ids,omitempty"`
	Label      *string   `json:"label,omitempty"`
	ProductIds *[]string `json:"product_ids,omitempty"`
}

// AdvisoryForgeRock defines model for advisory.ForgeRock.
type AdvisoryForgeRock struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Updated    *string   `json:"updated,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryFortinetAdvisory defines model for advisory.FortinetAdvisory.
type AdvisoryFortinetAdvisory struct {
	Acknowledgement  *string   `json:"acknowledgement,omitempty"`
	AffectedProducts *[]string `json:"affectedProducts,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	Cvssv3           *string   `json:"cvssv3,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Irnumber         *string   `json:"irnumber,omitempty"`
	Link             *string   `json:"link,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Solutions        *[]string `json:"solutions,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
}

// AdvisoryFullProductName defines model for advisory.FullProductName.
type AdvisoryFullProductName struct {
	Productid *string `json:"productid,omitempty"`
	Text      *string `json:"text,omitempty"`
}

// AdvisoryGCP defines model for advisory.GCP.
type AdvisoryGCP struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryGEGas defines model for advisory.GEGas.
type AdvisoryGEGas struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryGEHealthcareAdvisory defines model for advisory.GEHealthcareAdvisory.
type AdvisoryGEHealthcareAdvisory struct {
	BaseScore       *string   `json:"base_score,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Description     *string   `json:"description,omitempty"`
	References      *[]string `json:"references,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryGHAdvisoryJSONLean defines model for advisory.GHAdvisoryJSONLean.
type AdvisoryGHAdvisoryJSONLean struct {
	Classification *string   `json:"classification,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	Cvss           *struct {
		Score        *float32 `json:"score,omitempty"`
		VectorString *string  `json:"vectorString,omitempty"`
	} `json:"cvss,omitempty"`
	Cwes        *AdvisoryCwes `json:"cwes,omitempty"`
	DatabaseId  *int          `json:"databaseId,omitempty"`
	Description *string       `json:"description,omitempty"`
	GhsaId      *string       `json:"ghsaId,omitempty"`
	Id          *string       `json:"id,omitempty"`
	Identifiers *[]struct {
		Type  *string `json:"type,omitempty"`
		Value *string `json:"value,omitempty"`
	} `json:"identifiers,omitempty"`
	NotificationsPermalink *string `json:"notificationsPermalink,omitempty"`
	Origin                 *string `json:"origin,omitempty"`
	Permalink              *string `json:"permalink,omitempty"`
	PublishedAt            *string `json:"publishedAt,omitempty"`
	References             *[]struct {
		Url *string `json:"url,omitempty"`
	} `json:"references,omitempty"`
	Severity        *string `json:"severity,omitempty"`
	Summary         *string `json:"summary,omitempty"`
	UpdatedAt       *string `json:"updatedAt,omitempty"`
	Vulnerabilities *struct {
		Nodes *[]struct {
			Package *struct {
				Ecosystem *string `json:"ecosystem,omitempty"`
				Name      *string `json:"name,omitempty"`
			} `json:"package,omitempty"`
			Severity               *string `json:"severity,omitempty"`
			UpdatedAt              *string `json:"updatedAt,omitempty"`
			VulnerableVersionRange *string `json:"vulnerableVersionRange,omitempty"`
		} `json:"nodes,omitempty"`
		TotalCount *int `json:"totalCount,omitempty"`
	} `json:"vulnerabilities,omitempty"`
	WithdrawnAt *string `json:"withdrawnAt,omitempty"`
}

// AdvisoryGallagher defines model for advisory.Gallagher.
type AdvisoryGallagher struct {
	ActiveExploitation *bool     `json:"activeExploitation,omitempty"`
	Affected           *string   `json:"affected,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Description        *string   `json:"description,omitempty"`
	Fixes              *string   `json:"fixes,omitempty"`
	ReportedBy         *string   `json:"reportedBy,omitempty"`
	Severity           *string   `json:"severity,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisoryGenetec defines model for advisory.Genetec.
type AdvisoryGenetec struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryGigabyte defines model for advisory.Gigabyte.
type AdvisoryGigabyte struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryGitHubExploit defines model for advisory.GitHubExploit.
type AdvisoryGitHubExploit struct {
	CloneHttpsUrl     *string `json:"clone_https_url,omitempty"`
	CloneSshUrl       *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	CurrentlyTrending *bool   `json:"currently_trending,omitempty"`
	Cve               *string `json:"cve,omitempty"`
	DateAdded         *string `json:"date_added,omitempty"`
	DateLastRevised   *string `json:"date_last_revised,omitempty"`
	ExploitType       *string `json:"exploit_type,omitempty"`
	Forks             *int    `json:"forks,omitempty"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Id                *string `json:"id,omitempty"`
	Language          *string `json:"language,omitempty"`
	ReferenceUrl      *string `json:"reference_url,omitempty"`
	Refsource         *string `json:"refsource,omitempty"`
	RepoFullPath      *string `json:"repo_full_path,omitempty"`
	RepoId            *string `json:"repo_id,omitempty"`
	RepoName          *string `json:"repo_name,omitempty"`
	RepoOwner         *string `json:"repo_owner,omitempty"`
	Stars             *int    `json:"stars,omitempty"`
}

// AdvisoryGitLabExploit defines model for advisory.GitLabExploit.
type AdvisoryGitLabExploit struct {
	CloneHttpsUrl     *string `json:"clone_https_url,omitempty"`
	CloneSshUrl       *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	Cve               *string `json:"cve,omitempty"`
	DateAdded         *string `json:"date_added,omitempty"`
	DateLastRevised   *string `json:"date_last_revised,omitempty"`
	ExploitType       *string `json:"exploit_type,omitempty"`
	Forks             *int    `json:"forks,omitempty"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Language          *string `json:"language,omitempty"`
	ReferenceUrl      *string `json:"reference_url,omitempty"`
	Refsource         *string `json:"refsource,omitempty"`
	RepoFullPath      *string `json:"repo_full_path,omitempty"`
	RepoId            *string `json:"repo_id,omitempty"`
	RepoName          *string `json:"repo_name,omitempty"`
	RepoOwner         *string `json:"repo_owner,omitempty"`
	Stars             *int    `json:"stars,omitempty"`
}

// AdvisoryGiteeExploit defines model for advisory.GiteeExploit.
type AdvisoryGiteeExploit struct {
	CloneHttpsUrl     *string `json:"clone_https_url,omitempty"`
	CloneSshUrl       *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached *string `json:"clone_ssh_url_cached,omitempty"`
	Cve               *string `json:"cve,omitempty"`
	DateAdded         *string `json:"date_added,omitempty"`
	DateLastRevised   *string `json:"date_last_revised,omitempty"`
	ExploitType       *string `json:"exploit_type,omitempty"`
	Forks             *int    `json:"forks,omitempty"`
	HtmlUrl           *string `json:"html_url,omitempty"`
	Language          *string `json:"language,omitempty"`
	ReferenceUrl      *string `json:"reference_url,omitempty"`
	Refsource         *string `json:"refsource,omitempty"`
	RepoFullPath      *string `json:"repo_full_path,omitempty"`
	RepoId            *string `json:"repo_id,omitempty"`
	RepoName          *string `json:"repo_name,omitempty"`
	RepoOwner         *string `json:"repo_owner,omitempty"`
	Stars             *int    `json:"stars,omitempty"`
}

// AdvisoryGitlabAdvisory defines model for advisory.GitlabAdvisory.
type AdvisoryGitlabAdvisory struct {
	AffectedRange    *string   `json:"affected_range,omitempty"`
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	CvssV2           *string   `json:"cvss_v2,omitempty"`
	CvssV3           *string   `json:"cvss_v3,omitempty"`
	Cwe              *[]string `json:"cwe,omitempty"`
	Date             *string   `json:"date,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Filename         *string   `json:"filename,omitempty"`
	FixedVersions    *[]string `json:"fixed_versions,omitempty"`
	Ghsa             *[]string `json:"ghsa,omitempty"`
	GitlabUrl        *string   `json:"gitlab_url,omitempty"`
	Identifier       *string   `json:"identifier,omitempty"`
	Identifiers      *[]string `json:"identifiers,omitempty"`
	NotImpacted      *string   `json:"not_impacted,omitempty"`
	PackageManager   *string   `json:"package_manager,omitempty"`
	PackageName      *string   `json:"package_name,omitempty"`
	PackageSlug      *string   `json:"package_slug,omitempty"`
	Pubdate          *string   `json:"pubdate,omitempty"`
	Solution         *string   `json:"solution,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Urls             *[]string `json:"urls,omitempty"`
	Uuid             *string   `json:"uuid,omitempty"`
}

// AdvisoryGnuTLS defines model for advisory.GnuTLS.
type AdvisoryGnuTLS struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryGrafana defines model for advisory.Grafana.
type AdvisoryGrafana struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryGreyNoiseDetection defines model for advisory.GreyNoiseDetection.
type AdvisoryGreyNoiseDetection struct {
	Category       *string                  `json:"category,omitempty"`
	Cve            *[]string                `json:"cve,omitempty"`
	DateAdded      *string                  `json:"date_added,omitempty"`
	Description    *string                  `json:"description,omitempty"`
	Id             *string                  `json:"id,omitempty"`
	Intention      *string                  `json:"intention,omitempty"`
	Label          *string                  `json:"label,omitempty"`
	Name           *string                  `json:"name,omitempty"`
	RecommendBlock *bool                    `json:"recommend_block,omitempty"`
	References     *[]string                `json:"references,omitempty"`
	RelatedTags    *[]AdvisoryGreyNoiseTags `json:"related_tags,omitempty"`
	Slug           *string                  `json:"slug,omitempty"`
	Url            *string                  `json:"url,omitempty"`
}

// AdvisoryGreyNoiseTags defines model for advisory.GreyNoiseTags.
type AdvisoryGreyNoiseTags struct {
	Category  *string `json:"category,omitempty"`
	Id        *string `json:"id,omitempty"`
	Intention *string `json:"intention,omitempty"`
	Name      *string `json:"name,omitempty"`
	Slug      *string `json:"slug,omitempty"`
}

// AdvisoryHCL defines model for advisory.HCL.
type AdvisoryHCL struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Summary     *string   `json:"summary,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryHIKVision defines model for advisory.HIKVision.
type AdvisoryHIKVision struct {
	AdvisoryId  *string   `json:"advisory_id,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Link        *string   `json:"link,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryHKCert defines model for advisory.HKCert.
type AdvisoryHKCert struct {
	Affected     *[]string `json:"affected,omitempty"`
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Impact       *string   `json:"impact,omitempty"`
	Link         *string   `json:"link,omitempty"`
	RelatedLinks *[]string `json:"relatedLinks,omitempty"`
	Risk         *string   `json:"risk,omitempty"`
	Solutions    *string   `json:"solutions,omitempty"`
	Summary      *string   `json:"summary,omitempty"`
	Title        *string   `json:"title,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// AdvisoryHP defines model for advisory.HP.
type AdvisoryHP struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Severity  *string   `json:"severity,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryHardwareUpdate defines model for advisory.HardwareUpdate.
type AdvisoryHardwareUpdate struct {
	AffectedVersions *string   `json:"affectedVersions,omitempty"`
	Cves             *[]string `json:"cves,omitempty"`
	HardwarePlatform *string   `json:"hardwarePlatform,omitempty"`
	System           *string   `json:"system,omitempty"`
	UpdatedVersion   *string   `json:"updatedVersion,omitempty"`
}

// AdvisoryHarmonyOS defines model for advisory.HarmonyOS.
type AdvisoryHarmonyOS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHashiCorp defines model for advisory.HashiCorp.
type AdvisoryHashiCorp struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Background       *string   `json:"background,omitempty"`
	BulletinId       *string   `json:"bulletin_id,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Remediation      *string   `json:"remediation,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryHaskellSADBAdvisory defines model for advisory.HaskellSADBAdvisory.
type AdvisoryHaskellSADBAdvisory struct {
	AdvisoryId       *string                        `json:"advisory_id,omitempty"`
	AffectedPackages *[]AdvisoryHaskellSADBAffected `json:"affected_packages,omitempty"`
	Aliases          *[]string                      `json:"aliases,omitempty"`
	Cves             *[]string                      `json:"cves,omitempty"`
	Cwes             *[]int                         `json:"cwes,omitempty"`
	DateAdded        *string                        `json:"date_added,omitempty"`
	Keywords         *[]string                      `json:"keywords,omitempty"`
	References       *map[string][]string           `json:"references,omitempty"`
	RelatedVulns     *[]string                      `json:"related_vulns,omitempty"`
}

// AdvisoryHaskellSADBAffected defines model for advisory.HaskellSADBAffected.
type AdvisoryHaskellSADBAffected struct {
	// AffectedConstraint We produce AffectedConstraint based on AffectedVersions
	AffectedConstraint *string                       `json:"affected_constraint,omitempty"`
	AffectedVersions   *[]AdvisoryHaskellSADBVersion `json:"affected_versions,omitempty"`
	Arch               *[]string                     `json:"arch,omitempty"`
	Cvss               *string                       `json:"cvss,omitempty"`
	Os                 *[]string                     `json:"os,omitempty"`
	Package            *string                       `json:"package,omitempty"`
}

// AdvisoryHaskellSADBVersion defines model for advisory.HaskellSADBVersion.
type AdvisoryHaskellSADBVersion struct {
	Fixed      *string `json:"fixed,omitempty"`
	Introduced *string `json:"introduced,omitempty"`
}

// AdvisoryHillromAdvisory defines model for advisory.HillromAdvisory.
type AdvisoryHillromAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHitachi defines model for advisory.Hitachi.
type AdvisoryHitachi struct {
	AffectedProducts *string   `json:"affectedProducts,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	FixedProducts    *string   `json:"fixedProducts,omitempty"`
	HitachiId        *string   `json:"hitachiId,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryHitachiEnergy defines model for advisory.HitachiEnergy.
type AdvisoryHitachiEnergy struct {
	CsafUrl   *string   `json:"csaf_url,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHoneywell defines model for advisory.Honeywell.
type AdvisoryHoneywell struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHuawei defines model for advisory.Huawei.
type AdvisoryHuawei struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	SaNumber  *string   `json:"sa_number,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryHuaweiEulerOS defines model for advisory.HuaweiEulerOS.
type AdvisoryHuaweiEulerOS struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Packages    *string   `json:"packages,omitempty"`
	Products    *[]string `json:"products,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Synopsis    *string   `json:"synopsis,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryHuaweiIPS defines model for advisory.HuaweiIPS.
type AdvisoryHuaweiIPS struct {
	Cnnvd       *string   `json:"cnnvd,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	DateUpdated *string   `json:"date_updated,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	ThreatId    *int      `json:"threat_id,omitempty"`
	Url         *string   `json:"url,omitempty"`
	Vendor      *string   `json:"vendor,omitempty"`
}

// AdvisoryIAVA defines model for advisory.IAVA.
type AdvisoryIAVA struct {
	IAVA *string   `json:"IAVA,omitempty"`
	Cve  *[]string `json:"cve,omitempty"`
}

// AdvisoryIBM defines model for advisory.IBM.
type AdvisoryIBM struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryITW defines model for advisory.ITW.
type AdvisoryITW struct {
	Cve       *string `json:"cve,omitempty"`
	DateAdded *string `json:"date_added,omitempty"`
	Title     *string `json:"title,omitempty"`
}

// AdvisoryITWExploit defines model for advisory.ITWExploit.
type AdvisoryITWExploit struct {
	Advisory                    *string   `json:"advisory,omitempty"`
	AffectedVersions            *string   `json:"affected_versions,omitempty"`
	AnalysisUrl                 *string   `json:"analysis_url,omitempty"`
	BugIntroducingChangeListUrl *string   `json:"bug_introducing_change_list_url,omitempty"`
	ClaimedAttribution          *string   `json:"claimed_attribution,omitempty"`
	ClaimedAttributionUrl       *string   `json:"claimed_attribution_url,omitempty"`
	Cve                         *[]string `json:"cve,omitempty"`
	DateAdded                   *string   `json:"date_added,omitempty"`
	DateDiscovered              *string   `json:"date_discovered,omitempty"`
	DatePatched                 *string   `json:"date_patched,omitempty"`
	Description                 *string   `json:"description,omitempty"`
	FirstPatchedVersion         *string   `json:"first_patched_version,omitempty"`
	PatchChangeListUrl          *string   `json:"patch_change_list_url,omitempty"`
	Product                     *string   `json:"product,omitempty"`
	ReportedBy                  *string   `json:"reported_by,omitempty"`
	RootCauseAnalysisUrl        *string   `json:"root_cause_analysis_url,omitempty"`
	Vendor                      *string   `json:"vendor,omitempty"`
	VulnerabilityType           *string   `json:"vulnerability_type,omitempty"`
}

// AdvisoryIVal defines model for advisory.IVal.
type AdvisoryIVal struct {
	Value *string `json:"value,omitempty"`
}

// AdvisoryIdemia defines model for advisory.Idemia.
type AdvisoryIdemia struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Sbid      *string   `json:"sbid,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryIncibeAdvisory defines model for advisory.IncibeAdvisory.
type AdvisoryIncibeAdvisory struct {
	Affected    *string   `json:"affected,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Detail      *string   `json:"detail,omitempty"`
	Link        *string   `json:"link,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Solution    *string   `json:"solution,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryIntel defines model for advisory.Intel.
type AdvisoryIntel struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryIpIntelRecord defines model for advisory.IpIntelRecord.
type AdvisoryIpIntelRecord struct {
	Asn         *string             `json:"asn,omitempty"`
	City        *string             `json:"city,omitempty"`
	Country     *string             `json:"country,omitempty"`
	CountryCode *string             `json:"country_code,omitempty"`
	Cve         *[]string           `json:"cve,omitempty"`
	FeedIds     *[]string           `json:"feed_ids,omitempty"`
	Hostnames   *[]string           `json:"hostnames,omitempty"`
	Ip          *string             `json:"ip,omitempty"`
	LastSeen    *string             `json:"lastSeen,omitempty"`
	Matches     *[]string           `json:"matches,omitempty"`
	Port        *int                `json:"port,omitempty"`
	Ssl         *bool               `json:"ssl,omitempty"`
	Type        *AdvisoryRecordType `json:"type,omitempty"`
}

// AdvisoryIsraeliAlert defines model for advisory.IsraeliAlert.
type AdvisoryIsraeliAlert struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	DetailsHe  *string   `json:"details_he,omitempty"`
	HandlingHe *string   `json:"handling_he,omitempty"`
	Link       *string   `json:"link,omitempty"`
	References *[]string `json:"references,omitempty"`
	SummaryHe  *string   `json:"summary_he,omitempty"`
	TitleHe    *string   `json:"title_he,omitempty"`
}

// AdvisoryIsraeliVulnerability defines model for advisory.IsraeliVulnerability.
type AdvisoryIsraeliVulnerability struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Ilvnid    *string   `json:"ilvnid,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryIssued defines model for advisory.Issued.
type AdvisoryIssued struct {
	Date *string `json:"date,omitempty"`
}

// AdvisoryIstio defines model for advisory.Istio.
type AdvisoryIstio struct {
	AffectedVersion *string   `json:"affected_version,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Summary         *string   `json:"summary,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryIvanti defines model for advisory.Ivanti.
type AdvisoryIvanti struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryIvantiRSS defines model for advisory.IvantiRSS.
type AdvisoryIvantiRSS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryJFrog defines model for advisory.JFrog.
type AdvisoryJFrog struct {
	Cpes      *[]AdvisoryNVD20CVECPEMatch `json:"cpes,omitempty"`
	Cve       *[]string                   `json:"cve,omitempty"`
	DateAdded *string                     `json:"date_added,omitempty"`
	Product   *string                     `json:"product,omitempty"`
	Severity  *string                     `json:"severity,omitempty"`
	Summary   *string                     `json:"summary,omitempty"`
	Url       *string                     `json:"url,omitempty"`
	Versions  *[]string                   `json:"versions,omitempty"`
}

// AdvisoryJNJAdvisory defines model for advisory.JNJAdvisory.
type AdvisoryJNJAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryJVNAdvisoryItem defines model for advisory.JVNAdvisoryItem.
type AdvisoryJVNAdvisoryItem struct {
	Cpe           *[]AdvisoryJVNCPE       `json:"cpe,omitempty"`
	Cve           *[]string               `json:"cve,omitempty"`
	Cvss          *[]AdvisoryCVSS         `json:"cvss,omitempty"`
	DateAdded     *string                 `json:"date_added,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	DescriptionEn *string                 `json:"description_en,omitempty"`
	Identifier    *string                 `json:"identifier,omitempty"`
	Issued        *string                 `json:"issued,omitempty"`
	Modified      *string                 `json:"modified,omitempty"`
	References    *[]AdvisoryJVNReference `json:"references,omitempty"`
	Title         *string                 `json:"title,omitempty"`
	TitleEn       *string                 `json:"title_en,omitempty"`
	Url           *string                 `json:"url,omitempty"`
	UrlEn         *string                 `json:"url_en,omitempty"`
}

// AdvisoryJVNCPE defines model for advisory.JVNCPE.
type AdvisoryJVNCPE struct {
	Product *string `json:"product,omitempty"`
	Vendor  *string `json:"vendor,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryJVNReference defines model for advisory.JVNReference.
type AdvisoryJVNReference struct {
	Id     *string `json:"id,omitempty"`
	Source *string `json:"source,omitempty"`
	Title  *string `json:"title,omitempty"`
}

// AdvisoryJenkins defines model for advisory.Jenkins.
type AdvisoryJenkins struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fix       *string   `json:"fix,omitempty"`
	Link      *string   `json:"link,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisoryJetBrains defines model for advisory.JetBrains.
type AdvisoryJetBrains struct {
	Cve         *[]string `json:"cve,omitempty"`
	Cwe         *string   `json:"cwe,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Product     *string   `json:"product,omitempty"`
	ResolvedIn  *[]string `json:"resolved_in,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryK8S defines model for advisory.K8S.
type AdvisoryK8S struct {
	Content   *string   `json:"content,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	IssueId   *int      `json:"issue_id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryKEVCatalogVulnerability defines model for advisory.KEVCatalogVulnerability.
type AdvisoryKEVCatalogVulnerability struct {
	Cve                        *[]string `json:"cve,omitempty"`
	DateAdded                  *string   `json:"date_added,omitempty"`
	DueDate                    *string   `json:"dueDate,omitempty"`
	KnownRansomwareCampaignUse *string   `json:"knownRansomwareCampaignUse,omitempty"`
	Notes                      *string   `json:"notes,omitempty"`
	Product                    *string   `json:"product,omitempty"`
	RequiredAction             *string   `json:"requiredAction,omitempty"`
	ShortDescription           *string   `json:"shortDescription,omitempty"`
	VendorProject              *string   `json:"vendorProject,omitempty"`
	VulnerabilityName          *string   `json:"vulnerabilityName,omitempty"`
}

// AdvisoryKRCertAdvisory defines model for advisory.KRCertAdvisory.
type AdvisoryKRCertAdvisory struct {
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	DescriptionKo *string   `json:"description_ko,omitempty"`
	Link          *string   `json:"link,omitempty"`
	OverviewKo    *string   `json:"overview_ko,omitempty"`
	References    *[]string `json:"references,omitempty"`
	TitleKo       *string   `json:"title_ko,omitempty"`
}

// AdvisoryKasperskyICSCERTAdvisory defines model for advisory.KasperskyICSCERTAdvisory.
type AdvisoryKasperskyICSCERTAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	KlcertId  *string   `json:"klcert_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryKb defines model for advisory.Kb.
type AdvisoryKb struct {
	KbUrl        *string `json:"kb_url,omitempty"`
	MsDateAdded  *string `json:"ms_date_added,omitempty"`
	Status       *string `json:"status,omitempty"`
	Supercedence *string `json:"supercedence,omitempty"`
	Value        *string `json:"value,omitempty"`
}

// AdvisoryKbThreatDescription defines model for advisory.KbThreatDescription.
type AdvisoryKbThreatDescription struct {
	Dos                   *string   `json:"dos,omitempty"`
	Exploited             *string   `json:"exploited,omitempty"`
	LatestSoftwareRelease *string   `json:"latest_software_release,omitempty"`
	Level                 *[]string `json:"level,omitempty"`
	OlderSoftwareRelease  *string   `json:"older_software_release,omitempty"`
	PubliclyDisclosed     *string   `json:"publicly_disclosed,omitempty"`
	Type                  *[]string `json:"type,omitempty"`
}

// AdvisoryLG defines model for advisory.LG.
type AdvisoryLG struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryLenovo defines model for advisory.Lenovo.
type AdvisoryLenovo struct {
	Cve                 *[]string `json:"cve,omitempty"`
	DateAdded           *string   `json:"date_added,omitempty"`
	IndustryIdentifiers *[]string `json:"industry_identifiers,omitempty"`
	LastUpdated         *string   `json:"last_updated,omitempty"`
	LenovoId            *string   `json:"lenovo_id,omitempty"`
	Title               *string   `json:"title,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryLexmarkAdvisory defines model for advisory.LexmarkAdvisory.
type AdvisoryLexmarkAdvisory struct {
	AffectedProducts  *[]AdvisoryAffectedProduct `json:"affectedProducts,omitempty"`
	Cve               *[]string                  `json:"cve,omitempty"`
	DateAdded         *string                    `json:"date_added,omitempty"`
	Details           *string                    `json:"details,omitempty"`
	Impact            *string                    `json:"impact,omitempty"`
	LastUpdate        *string                    `json:"lastUpdate,omitempty"`
	Link              *string                    `json:"link,omitempty"`
	PublicReleaseDate *string                    `json:"publicReleaseDate,omitempty"`
	References        *[]string                  `json:"references,omitempty"`
	Revision          *string                    `json:"revision,omitempty"`
	Summary           *string                    `json:"summary,omitempty"`
	Workarounds       *string                    `json:"workarounds,omitempty"`
}

// AdvisoryLibreOffice defines model for advisory.LibreOffice.
type AdvisoryLibreOffice struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryLinux defines model for advisory.Linux.
type AdvisoryLinux struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMACert defines model for advisory.MACert.
type AdvisoryMACert struct {
	AffectedSystemsFr *string   `json:"affected_systems_fr,omitempty"`
	AssessmentFr      *string   `json:"assessment_fr,omitempty"`
	Cve               *[]string `json:"cve,omitempty"`
	DateAdded         *string   `json:"date_added,omitempty"`
	ImpactFr          *string   `json:"impact_fr,omitempty"`
	Reference         *string   `json:"reference,omitempty"`
	References        *[]string `json:"references,omitempty"`
	RiskFr            *string   `json:"risk_fr,omitempty"`
	RisksFr           *string   `json:"risks_fr,omitempty"`
	SolutionFr        *string   `json:"solution_fr,omitempty"`
	TitleFr           *string   `json:"title_fr,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// AdvisoryMAffected defines model for advisory.MAffected.
type AdvisoryMAffected struct {
	Cpes      *[]string           `json:"cpes,omitempty"`
	Platforms *[]string           `json:"platforms,omitempty"`
	Product   *string             `json:"product,omitempty"`
	Vendor    *string             `json:"vendor,omitempty"`
	Versions  *[]AdvisoryMVersion `json:"versions,omitempty"`
}

// AdvisoryMCna defines model for advisory.MCna.
type AdvisoryMCna struct {
	Affected         *[]AdvisoryMAffected       `json:"affected,omitempty"`
	Credits          *[]AdvisoryCredit          `json:"credits,omitempty"`
	Descriptions     *[]AdvisoryMDescriptions   `json:"descriptions,omitempty"`
	Metrics          *[]AdvisoryMetric          `json:"metrics,omitempty"`
	ProblemTypes     *[]AdvisoryMProblemTypes   `json:"problemTypes,omitempty"`
	ProviderMetadata *AdvisoryMProviderMetadata `json:"providerMetadata,omitempty"`
	References       *[]AdvisoryMReference      `json:"references,omitempty"`
	Timeline         *[]AdvisoryTimeline        `json:"timeline,omitempty"`
	Title            *string                    `json:"title,omitempty"`
}

// AdvisoryMContainers defines model for advisory.MContainers.
type AdvisoryMContainers struct {
	Cna *AdvisoryMCna `json:"cna,omitempty"`
}

// AdvisoryMCveMetadata defines model for advisory.MCveMetadata.
type AdvisoryMCveMetadata struct {
	AssignerOrgId     *string `json:"assignerOrgId,omitempty"`
	AssignerShortName *string `json:"assignerShortName,omitempty"`
	CveId             *string `json:"cveId,omitempty"`

	// DatePublished FIXME: flip to time
	DatePublished *string `json:"datePublished,omitempty"`

	// DateReserved FIXME: flip to time
	DateReserved *string `json:"dateReserved,omitempty"`

	// DateUpdated FIXME: flip to time
	DateUpdated *string `json:"dateUpdated,omitempty"`
	State       *string `json:"state,omitempty"`
}

// AdvisoryMCvssV20 defines model for advisory.MCvssV20.
type AdvisoryMCvssV20 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMCvssV30 defines model for advisory.MCvssV30.
type AdvisoryMCvssV30 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string  `json:"baseSeverity,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMCvssV31 defines model for advisory.MCvssV31.
type AdvisoryMCvssV31 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string  `json:"baseSeverity,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisoryMDescriptions defines model for advisory.MDescriptions.
type AdvisoryMDescriptions struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryMDocumentTracking defines model for advisory.MDocumentTracking.
type AdvisoryMDocumentTracking struct {
	CurrentReleaseDate *string                  `json:"CurrentReleaseDate,omitempty"`
	InitialReleaseDate *string                  `json:"InitialReleaseDate,omitempty"`
	Identification     *AdvisoryMIdentification `json:"identification,omitempty"`

	// Revisionhistory diff in xml/json
	Revisionhistory *[]AdvisoryRRevision `json:"revisionhistory,omitempty"`

	// Status again - change in json/xml
	Status  *int    `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryMFiles defines model for advisory.MFiles.
type AdvisoryMFiles struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMISPValueNoID defines model for advisory.MISPValueNoID.
type AdvisoryMISPValueNoID struct {
	Description *string                    `json:"description,omitempty"`
	Meta        *AdvisoryMispMeta          `json:"meta,omitempty"`
	Related     *[]AdvisoryMispRelatedItem `json:"related,omitempty"`
	Value       *string                    `json:"value,omitempty"`
}

// AdvisoryMITREAttackGroupNoID defines model for advisory.MITREAttackGroupNoID.
type AdvisoryMITREAttackGroupNoID struct {
	Aliases     *[]string                       `json:"aliases,omitempty"`
	Description *string                         `json:"description,omitempty"`
	Name        *string                         `json:"name,omitempty"`
	Techniques  *[]AdvisoryMitreAttackTechnique `json:"techniques,omitempty"`
}

// AdvisoryMIdentification defines model for advisory.MIdentification.
type AdvisoryMIdentification struct {
	Alias *AdvisoryIVal `json:"alias,omitempty"`
	Id    *AdvisoryIVal `json:"id,omitempty"`
}

// AdvisoryMProblemTypes defines model for advisory.MProblemTypes.
type AdvisoryMProblemTypes struct {
	Descriptions *[]AdvisoryPTMDescriptions `json:"descriptions,omitempty"`
}

// AdvisoryMProductTree defines model for advisory.MProductTree.
type AdvisoryMProductTree struct {
	Branch          *[]AdvisoryBranch          `json:"branch,omitempty"`
	Fullproductname *[]AdvisoryFullProductName `json:"fullproductname,omitempty"`
}

// AdvisoryMProviderMetadata defines model for advisory.MProviderMetadata.
type AdvisoryMProviderMetadata struct {
	// DateUpdated FIXME: flip to time
	DateUpdated *string `json:"dateUpdated,omitempty"`
	OrgId       *string `json:"orgId,omitempty"`
	ShortName   *string `json:"shortName,omitempty"`
}

// AdvisoryMReference defines model for advisory.MReference.
type AdvisoryMReference struct {
	Name *string   `json:"name,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// AdvisoryMSCVRF defines model for advisory.MSCVRF.
type AdvisoryMSCVRF struct {
	DocumentTitle    *AdvisoryMSDocumentTitle   `json:"DocumentTitle,omitempty"`
	DocumentTracking *AdvisoryMDocumentTracking `json:"DocumentTracking,omitempty"`
	DocumentType     *string                    `json:"document_type,omitempty"`

	// Documentnotes diff
	Documentnotes     *[]AdvisoryRNote           `json:"documentnotes,omitempty"`
	Documentpublisher *AdvisoryDocumentPublisher `json:"documentpublisher,omitempty"`
	Producttree       *AdvisoryMProductTree      `json:"producttree,omitempty"`
	Vulnerability     *[]AdvisoryMVulnerability  `json:"vulnerability,omitempty"`
}

// AdvisoryMSDocumentTitle defines model for advisory.MSDocumentTitle.
type AdvisoryMSDocumentTitle struct {
	Value *string `json:"Value,omitempty"`
}

// AdvisoryMVersion defines model for advisory.MVersion.
type AdvisoryMVersion struct {
	LessThan        *string `json:"lessThan,omitempty"`
	LessThanOrEqual *string `json:"lessThanOrEqual,omitempty"`
	Status          *string `json:"status,omitempty"`
	Version         *string `json:"version,omitempty"`
	VersionType     *string `json:"versionType,omitempty"`
}

// AdvisoryMVulnerability defines model for advisory.MVulnerability.
type AdvisoryMVulnerability struct {
	Acknowledgments *[]AdvisoryAcknowledgement `json:"acknowledgments,omitempty"`
	Cve             *string                    `json:"cve,omitempty"`
	Cvssscoresets   *[]AdvisoryRScoreSet       `json:"cvssscoresets,omitempty"`
	Notes           *[]AdvisoryNote            `json:"notes,omitempty"`
	Ordinal         *string                    `json:"ordinal,omitempty"`
	Productstatuses *[]AdvisoryProductStatus   `json:"productstatuses,omitempty"`
	Remediations    *[]AdvisoryRemediation     `json:"remediations,omitempty"`

	// Revisionhistory diff in xml/json
	Revisionhistory *[]AdvisoryRRevision `json:"revisionhistory,omitempty"`
	Threats         *[]AdvisoryRThreat   `json:"threats,omitempty"`
	Title           *AdvisoryIVal        `json:"title,omitempty"`
}

// AdvisoryManageEngineAdvisory defines model for advisory.ManageEngineAdvisory.
type AdvisoryManageEngineAdvisory struct {
	// AffectedVersions older versions can be labeled 'affected_builds'
	AffectedVersions *[]string `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Fixed            *string   `json:"fixed,omitempty"`

	// FixedVersions can be labeled as 'fixed_in'
	FixedVersions *[]string `json:"fixed_versions,omitempty"`

	// Impact sometimes this is a CVSS and sometimes it is not
	Impact       *string   `json:"impact,omitempty"`
	Link         *string   `json:"link,omitempty"`
	Overview     *string   `json:"overview,omitempty"`
	ProductName  *[]string `json:"product_name,omitempty"`
	RecommendFix *string   `json:"recommend_fix,omitempty"`
	Reported     *string   `json:"reported,omitempty"`
	ReportedBy   *string   `json:"reported_by,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
	Title        *string   `json:"title,omitempty"`
}

// AdvisoryMbedTLS defines model for advisory.MbedTLS.
type AdvisoryMbedTLS struct {
	Affects   *string   `json:"affects,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMediatek defines model for advisory.Mediatek.
type AdvisoryMediatek struct {
	AffectedChipsets *[]string `json:"affected_chipsets,omitempty"`
	AffectedSoftware *[]string `json:"affected_software,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryMedtronicAdvisory defines model for advisory.MedtronicAdvisory.
type AdvisoryMedtronicAdvisory struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryMendix defines model for advisory.Mendix.
type AdvisoryMendix struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMetaData defines model for advisory.MetaData.
type AdvisoryMetaData struct {
	Advisory    *AdvisoryAdvisoryDetails    `json:"advisory,omitempty"`
	Cve         *[]string                   `json:"cve,omitempty"`
	DateAdded   *string                     `json:"date_added,omitempty"`
	Description *string                     `json:"description,omitempty"`
	Packages    *[]AdvisoryVulnCheckPackage `json:"packages,omitempty"`
	References  *[]AdvisoryOvalReference    `json:"references,omitempty"`
	Title       *string                     `json:"title,omitempty"`
}

// AdvisoryMetasploitExploit defines model for advisory.MetasploitExploit.
type AdvisoryMetasploitExploit struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMetric defines model for advisory.Metric.
type AdvisoryMetric struct {
	CvssV20 *AdvisoryMCvssV20 `json:"cvssV2_0,omitempty"`
	CvssV30 *AdvisoryMCvssV30 `json:"cvssV3_0,omitempty"`
	CvssV31 *AdvisoryMCvssV31 `json:"cvssV3_1,omitempty"`
}

// AdvisoryMicrosoftCVRF defines model for advisory.MicrosoftCVRF.
type AdvisoryMicrosoftCVRF struct {
	Cve           *[]string       `json:"cve,omitempty"`
	Cvrf          *AdvisoryMSCVRF `json:"cvrf,omitempty"`
	DateAdded     *string         `json:"date_added,omitempty"`
	ExploitedList *[]AdvisoryITW  `json:"exploited_list,omitempty"`
	Title         *string         `json:"title,omitempty"`
	Url           *string         `json:"url,omitempty"`
}

// AdvisoryMicrosoftKb defines model for advisory.MicrosoftKb.
type AdvisoryMicrosoftKb struct {
	Cve       *string                      `json:"cve,omitempty"`
	DateAdded *string                      `json:"date_added,omitempty"`
	Kbs       *[]AdvisoryKb                `json:"kbs,omitempty"`
	Threat    *AdvisoryKbThreatDescription `json:"threat,omitempty"`
	Title     *string                      `json:"title,omitempty"`
}

// AdvisoryMikrotik defines model for advisory.Mikrotik.
type AdvisoryMikrotik struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMindray defines model for advisory.Mindray.
type AdvisoryMindray struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryMispMeta defines model for advisory.MispMeta.
type AdvisoryMispMeta struct {
	AttributionConfidence    *string   `json:"attribution-confidence,omitempty"`
	CfrSuspectedStateSponsor *string   `json:"cfr-suspected-state-sponsor,omitempty"`
	CfrSuspectedVictims      *[]string `json:"cfr-suspected-victims,omitempty"`
	CfrTargetCategory        *[]string `json:"cfr-target-category,omitempty"`
	CfrTypeOfIncident        *[]string `json:"cfr-type-of-incident,omitempty"`
	Country                  *string   `json:"country,omitempty"`
	Refs                     *[]string `json:"refs,omitempty"`
	Synonyms                 *[]string `json:"synonyms,omitempty"`
}

// AdvisoryMispRelatedItem defines model for advisory.MispRelatedItem.
type AdvisoryMispRelatedItem struct {
	DestUuid *string   `json:"dest-uuid,omitempty"`
	Tags     *[]string `json:"tags,omitempty"`
	Type     *string   `json:"type,omitempty"`
}

// AdvisoryMispValue defines model for advisory.MispValue.
type AdvisoryMispValue struct {
	Description *string                    `json:"description,omitempty"`
	Meta        *AdvisoryMispMeta          `json:"meta,omitempty"`
	Related     *[]AdvisoryMispRelatedItem `json:"related,omitempty"`
	Uuid        *string                    `json:"uuid,omitempty"`
	Value       *string                    `json:"value,omitempty"`
}

// AdvisoryMitel defines model for advisory.Mitel.
type AdvisoryMitel struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryMitreAttackTechnique defines model for advisory.MitreAttackTechnique.
type AdvisoryMitreAttackTechnique struct {
	SubTechnique     *string   `json:"sub_technique,omitempty"`
	SubTechniqueName *string   `json:"sub_technique_name,omitempty"`
	Tactic           *[]string `json:"tactic,omitempty"`
	TechniqueId      *string   `json:"technique_id,omitempty"`
	TechniqueName    *string   `json:"technique_name,omitempty"`
}

// AdvisoryMitreCVE defines model for advisory.MitreCVE.
type AdvisoryMitreCVE struct {
	Cve       *[]string            `json:"cve,omitempty"`
	DateAdded *string              `json:"date_added,omitempty"`
	MitreRef  *AdvisoryMitreCVERef `json:"mitre_ref,omitempty"`
	Summary   *string              `json:"summary,omitempty"`
	Title     *string              `json:"title,omitempty"`
	Url       *string              `json:"url,omitempty"`
}

// AdvisoryMitreCVERef defines model for advisory.MitreCVERef.
type AdvisoryMitreCVERef struct {
	Containers  *AdvisoryMContainers  `json:"containers,omitempty"`
	CveMetadata *AdvisoryMCveMetadata `json:"cveMetadata,omitempty"`
	DataType    *string               `json:"dataType,omitempty"`
	DataVersion *string               `json:"dataVersion,omitempty"`
}

// AdvisoryMitsubishiElectricAdvisory defines model for advisory.MitsubishiElectricAdvisory.
type AdvisoryMitsubishiElectricAdvisory struct {
	Cve                  *[]string `json:"cve,omitempty"`
	Cwe                  *[]string `json:"cwe,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	DateLastRevised      *string   `json:"date_last_revised,omitempty"`
	MitsubishiElectricId *string   `json:"mitsubishi_electric_id,omitempty"`
	Title                *string   `json:"title,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryMongoDB defines model for advisory.MongoDB.
type AdvisoryMongoDB struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Score       *string   `json:"score,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryMoxaAdvisory defines model for advisory.MoxaAdvisory.
type AdvisoryMoxaAdvisory struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryMozillaAdvisory defines model for advisory.MozillaAdvisory.
type AdvisoryMozillaAdvisory struct {
	AffectedComponents *[]AdvisoryMozillaComponent `json:"affected_components,omitempty"`
	Bugzilla           *[]string                   `json:"bugzilla,omitempty"`
	Cve                *[]string                   `json:"cve,omitempty"`
	DateAdded          *string                     `json:"date_added,omitempty"`
	Description        *string                     `json:"description,omitempty"`
	FixedIn            *[]string                   `json:"fixed_in,omitempty"`
	Impact             *string                     `json:"impact,omitempty"`
	Products           *[]string                   `json:"products,omitempty"`
	Reporter           *string                     `json:"reporter,omitempty"`
	Risk               *string                     `json:"risk,omitempty"`
	Title              *string                     `json:"title,omitempty"`
	Url                *string                     `json:"url,omitempty"`
}

// AdvisoryMozillaComponent defines model for advisory.MozillaComponent.
type AdvisoryMozillaComponent struct {
	Bugzilla    *[]string `json:"bugzilla,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	Description *string   `json:"description,omitempty"`
	Impact      *string   `json:"impact,omitempty"`
	Reporter    *string   `json:"reporter,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisoryNEC defines model for advisory.NEC.
type AdvisoryNEC struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	NvdId      *string   `json:"nvd_id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNHS defines model for advisory.NHS.
type AdvisoryNHS struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Severity   *string   `json:"severity,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	ThreatId   *string   `json:"threat_id,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNI defines model for advisory.NI.
type AdvisoryNI struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Ovewrview  *string   `json:"ovewrview,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNVD20CVECPEMatch defines model for advisory.NVD20CVECPEMatch.
type AdvisoryNVD20CVECPEMatch struct {
	Criteria              *string `json:"criteria,omitempty"`
	MatchCriteriaId       *string `json:"matchCriteriaId,omitempty"`
	VersionEndExcluding   *string `json:"versionEndExcluding,omitempty"`
	VersionEndIncluding   *string `json:"versionEndIncluding,omitempty"`
	VersionStartExcluding *string `json:"versionStartExcluding,omitempty"`
	VersionStartIncluding *string `json:"versionStartIncluding,omitempty"`
	Vulnerable            *bool   `json:"vulnerable,omitempty"`
}

// AdvisoryNVD20Configuration defines model for advisory.NVD20Configuration.
type AdvisoryNVD20Configuration struct {
	Negate   *bool                `json:"negate,omitempty"`
	Nodes    *[]AdvisoryNVD20Node `json:"nodes,omitempty"`
	Operator *string              `json:"operator,omitempty"`
}

// AdvisoryNVD20Node defines model for advisory.NVD20Node.
type AdvisoryNVD20Node struct {
	CpeMatch *[]AdvisoryNVD20CVECPEMatch `json:"cpeMatch,omitempty"`
	Negate   *bool                       `json:"negate,omitempty"`
	Operator *string                     `json:"operator,omitempty"`
}

// AdvisoryNZAdvisory defines model for advisory.NZAdvisory.
type AdvisoryNZAdvisory struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Happening   *string   `json:"happening,omitempty"`
	Link        *string   `json:"link,omitempty"`
	LookFor     *string   `json:"lookFor,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Title       *string   `json:"title,omitempty"`
	WhatToDo    *string   `json:"whatToDo,omitempty"`
}

// AdvisoryNaver defines model for advisory.Naver.
type AdvisoryNaver struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryNetApp defines model for advisory.NetApp.
type AdvisoryNetApp struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Impact     *string   `json:"impact,omitempty"`
	Ntap       *string   `json:"ntap,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNetgate defines model for advisory.Netgate.
type AdvisoryNetgate struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryNetgear defines model for advisory.Netgear.
type AdvisoryNetgear struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Products   *[]string `json:"products,omitempty"`
	PsvnNumber *string   `json:"psvn_number,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNetskope defines model for advisory.Netskope.
type AdvisoryNetskope struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNginxAdvisory defines model for advisory.NginxAdvisory.
type AdvisoryNginxAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Description     *string   `json:"description,omitempty"`
	NotVulnVersions *[]string `json:"not_vuln_versions,omitempty"`
	PatchPgp        *string   `json:"patch_pgp,omitempty"`
	PatchUrl        *string   `json:"patch_url,omitempty"`
	Severity        *string   `json:"severity,omitempty"`
	Url             *string   `json:"url,omitempty"`
	VulnVersions    *[]string `json:"vuln_versions,omitempty"`
}

// AdvisoryNodeAuthor defines model for advisory.NodeAuthor.
type AdvisoryNodeAuthor struct {
	Author   *string `json:"author,omitempty"`
	Username *string `json:"username,omitempty"`
	Website  *string `json:"website,omitempty"`
}

// AdvisoryNodeJS defines model for advisory.NodeJS.
type AdvisoryNodeJS struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNodeSecurity defines model for advisory.NodeSecurity.
type AdvisoryNodeSecurity struct {
	AffectedEnvironments *[]string           `json:"affected_environments,omitempty"`
	Author               *AdvisoryNodeAuthor `json:"author,omitempty"`
	CoordinatingVendor   *string             `json:"coordinating_vendor,omitempty"`
	CreatedAt            *string             `json:"created_at,omitempty"`
	Cve                  *[]string           `json:"cve,omitempty"`
	CvssScore            *float32            `json:"cvss_score,omitempty"`
	CvssVector           *string             `json:"cvss_vector,omitempty"`
	DateAdded            *string             `json:"date_added,omitempty"`
	Id                   *int                `json:"id,omitempty"`
	ModuleName           *string             `json:"module_name,omitempty"`
	Overview             *string             `json:"overview,omitempty"`
	PatchedVersions      *string             `json:"patched_versions,omitempty"`
	PublishDate          *string             `json:"publish_date,omitempty"`
	Recommendation       *string             `json:"recommendation,omitempty"`
	References           *[]string           `json:"references,omitempty"`
	Title                *string             `json:"title,omitempty"`
	UpdatedAt            *string             `json:"updated_at,omitempty"`
	Url                  *string             `json:"url,omitempty"`
	VulnerableVersions   *string             `json:"vulnerable_versions,omitempty"`
}

// AdvisoryNokia defines model for advisory.Nokia.
type AdvisoryNokia struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Updated    *string   `json:"updated,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryNote defines model for advisory.Note.
type AdvisoryNote struct {
	Ordinal *string `json:"ordinal,omitempty"`
	Text    *string `json:"text,omitempty"`
	Title   *string `json:"title,omitempty"`
	Type    *int    `json:"type,omitempty"`
}

// AdvisoryNozomi defines model for advisory.Nozomi.
type AdvisoryNozomi struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryNvidiaRevision defines model for advisory.NvidiaRevision.
type AdvisoryNvidiaRevision struct {
	Date        *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Revision    *string `json:"revision,omitempty"`
}

// AdvisoryOCurl defines model for advisory.OCurl.
type AdvisoryOCurl struct {
	Affected         *[]AdvisoryCurlAffected `json:"affected,omitempty"`
	Aliases          *[]string               `json:"aliases,omitempty"`
	Credits          *[]AdvisoryCurlCredit   `json:"credits,omitempty"`
	DatabaseSpecific *AdvisoryDBSpecific     `json:"database_specific,omitempty"`
	Details          *string                 `json:"details,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	Modified         *string                 `json:"modified,omitempty"`
	Published        *string                 `json:"published,omitempty"`
	SchemaVersion    *string                 `json:"schema_version,omitempty"`
	Summary          *string                 `json:"summary,omitempty"`
}

// AdvisoryOSV defines model for advisory.OSV.
type AdvisoryOSV struct {
	Cve         *[]string       `json:"cve,omitempty"`
	DateAdded   *string         `json:"date_added,omitempty"`
	DateUpdated *string         `json:"date_updated,omitempty"`
	Osv         *AdvisoryOSVObj `json:"osv,omitempty"`
	Summary     *string         `json:"summary,omitempty"`
	Title       *string         `json:"title,omitempty"`
	Url         *string         `json:"url,omitempty"`
}

// AdvisoryOSVObj defines model for advisory.OSVObj.
type AdvisoryOSVObj struct {
	// Affected collection based on https://ossf.github.io/osv-schema/
	Affected   *[]AdvisoryAffected     `json:"affected,omitempty"`
	Aliases    *[]string               `json:"aliases,omitempty"`
	Details    *string                 `json:"details,omitempty"`
	Id         *string                 `json:"id,omitempty"`
	Modified   *string                 `json:"modified,omitempty"`
	Published  *string                 `json:"published,omitempty"`
	References *[]AdvisoryOSVReference `json:"references,omitempty"`
	Related    *[]string               `json:"related,omitempty"`
	Summary    *string                 `json:"summary,omitempty"`
	Withdrawn  *string                 `json:"withdrawn,omitempty"`
}

// AdvisoryOSVPackage defines model for advisory.OSVPackage.
type AdvisoryOSVPackage struct {
	Ecosystem *string `json:"ecosystem,omitempty"`
	Name      *string `json:"name,omitempty"`
	Purl      *string `json:"purl,omitempty"`
}

// AdvisoryOSVReference defines model for advisory.OSVReference.
type AdvisoryOSVReference struct {
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// AdvisoryOTRS defines model for advisory.OTRS.
type AdvisoryOTRS struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Product   *string   `json:"product,omitempty"`
	Release   *string   `json:"release,omitempty"`
	Risk      *string   `json:"risk,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOctopusDeploy defines model for advisory.OctopusDeploy.
type AdvisoryOctopusDeploy struct {
	AdvisoryNumber *string   `json:"advisory_number,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	Summary        *string   `json:"summary,omitempty"`
	Title          *string   `json:"title,omitempty"`
	Url            *string   `json:"url,omitempty"`
}

// AdvisoryOkta defines model for advisory.Okta.
type AdvisoryOkta struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	Cvss             *string   `json:"cvss,omitempty"`
	Cwe              *string   `json:"cwe,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Resolution       *string   `json:"resolution,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryOmron defines model for advisory.Omron.
type AdvisoryOmron struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOneE defines model for advisory.OneE.
type AdvisoryOneE struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOpenBSD defines model for advisory.OpenBSD.
type AdvisoryOpenBSD struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Patch       *string   `json:"patch,omitempty"`
	Release     *string   `json:"release,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryOpenCVDB defines model for advisory.OpenCVDB.
type AdvisoryOpenCVDB struct {
	AffectedPlatforms    *[]string `json:"affected_platforms,omitempty"`
	AffectedServices     *[]string `json:"affected_services,omitempty"`
	Cve                  *[]string `json:"cve,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	DisclosedAt          *string   `json:"disclosed_at,omitempty"`
	KnownItwExploitation *bool     `json:"known_itw_exploitation,omitempty"`
	ManualRemediation    *string   `json:"manual_remediation,omitempty"`
	PublishedAt          *string   `json:"published_at,omitempty"`
	References           *[]string `json:"references,omitempty"`
	Summary              *string   `json:"summary,omitempty"`
	Title                *string   `json:"title,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryOpenSSH defines model for advisory.OpenSSH.
type AdvisoryOpenSSH struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryOpenSSLSecAdv defines model for advisory.OpenSSLSecAdv.
type AdvisoryOpenSSLSecAdv struct {
	Cve             *[]string                       `json:"cve,omitempty"`
	DateAdded       *string                         `json:"date_added,omitempty"`
	DateUpdated     *string                         `json:"date_updated,omitempty"`
	Filename        *string                         `json:"filename,omitempty"`
	Title           *string                         `json:"title,omitempty"`
	Url             *string                         `json:"url,omitempty"`
	Vulnerabilities *[]AdvisoryOpenSSLVulnerability `json:"vulnerabilities,omitempty"`
}

// AdvisoryOpenSSLVulnerability defines model for advisory.OpenSSLVulnerability.
type AdvisoryOpenSSLVulnerability struct {
	Cve      *[]string         `json:"cve,omitempty"`
	Fixed    *[]AdvisoryFixAff `json:"fixed,omitempty"`
	Severity *string           `json:"severity,omitempty"`
	Title    *string           `json:"title,omitempty"`
}

// AdvisoryOpenStack defines model for advisory.OpenStack.
type AdvisoryOpenStack struct {
	Affects    *[]string `json:"affects,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryOracleCPU defines model for advisory.OracleCPU.
type AdvisoryOracleCPU struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Product   *string   `json:"product,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryOracleCPUCSAF defines model for advisory.OracleCPUCSAF.
type AdvisoryOracleCPUCSAF struct {
	Csaf      *AdvisoryCSAF `json:"csaf,omitempty"`
	Cve       *[]string     `json:"cve,omitempty"`
	DateAdded *string       `json:"date_added,omitempty"`
	Url       *string       `json:"url,omitempty"`
}

// AdvisoryOvalCVE defines model for advisory.OvalCVE.
type AdvisoryOvalCVE struct {
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
}

// AdvisoryOvalReference defines model for advisory.OvalReference.
type AdvisoryOvalReference struct {
	RefId  *string `json:"ref_id,omitempty"`
	RefUrl *string `json:"ref_url,omitempty"`
	Source *string `json:"source,omitempty"`
}

// AdvisoryOverride defines model for advisory.Override.
type AdvisoryOverride struct {
	Annotation *AdvisoryOverrideAnnotation `json:"_annotation,omitempty"`
	Cve        *AdvisoryOverrideCVE        `json:"cve,omitempty"`
}

// AdvisoryOverrideAnnotation defines model for advisory.OverrideAnnotation.
type AdvisoryOverrideAnnotation struct {
	CveId       *string              `json:"cve_id,omitempty"`
	Reason      *string              `json:"reason,omitempty"`
	Snapshot    *string              `json:"snapshot,omitempty"`
	TriageNotes *AdvisoryTriageNotes `json:"triage_notes,omitempty"`
}

// AdvisoryOverrideCVE defines model for advisory.OverrideCVE.
type AdvisoryOverrideCVE struct {
	Configurations *[]AdvisoryOverrideConfiguration `json:"configurations,omitempty"`
}

// AdvisoryOverrideConfiguration defines model for advisory.OverrideConfiguration.
type AdvisoryOverrideConfiguration struct {
	Nodes *[]AdvisoryCPENode `json:"nodes,omitempty"`
}

// AdvisoryOwnCloud defines model for advisory.OwnCloud.
type AdvisoryOwnCloud struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPGFix defines model for advisory.PGFix.
type AdvisoryPGFix struct {
	Affected *string `json:"affected,omitempty"`
	Fixed    *string `json:"fixed,omitempty"`
}

// AdvisoryPTMDescriptions defines model for advisory.PTMDescriptions.
type AdvisoryPTMDescriptions struct {
	CweId       *string `json:"cweId,omitempty"`
	Description *string `json:"description,omitempty"`
	Lang        *string `json:"lang,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// AdvisoryPackage defines model for advisory.Package.
type AdvisoryPackage struct {
	Filename *string `json:"filename,omitempty"`

	// Name sort
	Name    *string `json:"name,omitempty"`
	Release *string `json:"release,omitempty"`
	Src     *string `json:"src,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisoryPackageStat defines model for advisory.PackageStat.
type AdvisoryPackageStat struct {
	Cpe         *string `json:"cpe,omitempty"`
	FixState    *string `json:"fix_state,omitempty"`
	PackageName *string `json:"package_name,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
}

// AdvisoryPalantir defines model for advisory.Palantir.
type AdvisoryPalantir struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Background       *string   `json:"background,omitempty"`
	BulletinId       *string   `json:"bulletin_id,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Details          *string   `json:"details,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryPaloAltoAdvisory defines model for advisory.PaloAltoAdvisory.
type AdvisoryPaloAltoAdvisory struct {
	Affected              *string   `json:"affected,omitempty"`
	ApplicableVersions    *string   `json:"applicableVersions,omitempty"`
	AttackComplexity      *string   `json:"attackComplexity,omitempty"`
	AttackVector          *string   `json:"attackVector,omitempty"`
	AvailabilityImpact    *string   `json:"availabilityImpact,omitempty"`
	ConfidentialityImpact *string   `json:"confidentialityImpact,omitempty"`
	Cve                   *[]string `json:"cve,omitempty"`
	CvssbaseScore         *string   `json:"cvssbaseScore,omitempty"`
	DatePublished         *string   `json:"datePublished,omitempty"`
	DateUpdated           *string   `json:"dateUpdated,omitempty"`
	DateAdded             *string   `json:"date_added,omitempty"`
	Id                    *string   `json:"id,omitempty"`
	IntegrityImpact       *string   `json:"integrityImpact,omitempty"`
	PrivilegesRequired    *string   `json:"privilegesRequired,omitempty"`
	Problem               *string   `json:"problem,omitempty"`
	Product               *string   `json:"product,omitempty"`
	Scope                 *string   `json:"scope,omitempty"`
	Severity              *string   `json:"severity,omitempty"`
	Solution              *string   `json:"solution,omitempty"`
	Title                 *string   `json:"title,omitempty"`
	Unaffected            *string   `json:"unaffected,omitempty"`
	Url                   *string   `json:"url,omitempty"`
	UserInteraction       *string   `json:"userInteraction,omitempty"`
	Workaround            *string   `json:"workaround,omitempty"`
}

// AdvisoryPanasonic defines model for advisory.Panasonic.
type AdvisoryPanasonic struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPaperCut defines model for advisory.PaperCut.
type AdvisoryPaperCut struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryPega defines model for advisory.Pega.
type AdvisoryPega struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Score     *string   `json:"score,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryPhilipsAdvisory defines model for advisory.PhilipsAdvisory.
type AdvisoryPhilipsAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastUpdated *string   `json:"date_last_updated,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisoryPhoenixContactAdvisory defines model for advisory.PhoenixContactAdvisory.
type AdvisoryPhoenixContactAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cwe       *[]string `json:"cwe,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Vde       *[]string `json:"vde,omitempty"`
}

// AdvisoryPostgresSQL defines model for advisory.PostgresSQL.
type AdvisoryPostgresSQL struct {
	Cve       *[]string        `json:"cve,omitempty"`
	DateAdded *string          `json:"date_added,omitempty"`
	PgFix     *[]AdvisoryPGFix `json:"pg_fix,omitempty"`
	Summary   *string          `json:"summary,omitempty"`
	Title     *string          `json:"title,omitempty"`
	Url       *string          `json:"url,omitempty"`
}

// AdvisoryProduct defines model for advisory.Product.
type AdvisoryProduct struct {
	Name                        *string            `json:"name,omitempty"`
	ProductId                   *string            `json:"product_id,omitempty"`
	ProductIdentificationHelper *map[string]string `json:"product_identification_helper,omitempty"`
}

// AdvisoryProductBranch defines model for advisory.ProductBranch.
type AdvisoryProductBranch struct {
	Branches      *[]AdvisoryProductBranch    `json:"branches,omitempty"`
	Category      *string                     `json:"category,omitempty"`
	Name          *string                     `json:"name,omitempty"`
	Product       *AdvisoryProduct            `json:"product,omitempty"`
	Relationships *[]AdvisoryCSAFRelationship `json:"relationships,omitempty"`
}

// AdvisoryProductStatus defines model for advisory.ProductStatus.
type AdvisoryProductStatus struct {
	ProductId *[]string `json:"product_id,omitempty"`

	// Type diff
	Type *int `json:"type,omitempty"`
}

// AdvisoryProductTree defines model for advisory.ProductTree.
type AdvisoryProductTree struct {
	Relationships *[]AdvisoryRelationship `json:"relationships,omitempty"`
}

// AdvisoryProductsAffected defines model for advisory.ProductsAffected.
type AdvisoryProductsAffected struct {
	Cve         *string `json:"cve,omitempty"`
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AdvisoryProgress defines model for advisory.Progress.
type AdvisoryProgress struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryProofpoint defines model for advisory.Proofpoint.
type AdvisoryProofpoint struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryPureStorage defines model for advisory.PureStorage.
type AdvisoryPureStorage struct {
	Cve         *[]string `json:"cve,omitempty"`
	Cvss        *string   `json:"cvss,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Product     *string   `json:"product,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryPyPAAdvisory defines model for advisory.PyPAAdvisory.
type AdvisoryPyPAAdvisory struct {
	// AdvisoryId ID is the PYSEC- identifier
	AdvisoryId *string `json:"advisory_id,omitempty"`

	// Affected Affected will list out the vulnerable versions.
	Affected *[]struct {
		Package *struct {
			Ecosystem *string `json:"ecosystem,omitempty"`
			Name      *string `json:"name,omitempty"`
			Purl      *string `json:"purl,omitempty"`
		} `json:"package,omitempty"`
		Ranges *[]struct {
			Events *[]struct {
				Fixed      *string `json:"fixed,omitempty"`
				Introduced *string `json:"introduced,omitempty"`
			} `json:"events,omitempty"`
			RangesType *string `json:"ranges_type,omitempty"`
		} `json:"ranges,omitempty"`
		Versions *[]string `json:"versions,omitempty"`
	} `json:"affected,omitempty"`

	// Aliases Aliases are other identifiers that refer to this, such as a CVE
	Aliases *[]string `json:"aliases,omitempty"`

	// DateAdded DateAdded is the RFC3339Nano published timestamp
	DateAdded *string `json:"date_added,omitempty"`

	// Details Details discuss the vulnerability information
	Details *string `json:"details,omitempty"`

	// Modified Modified is non-zero Time if entry was updated
	Modified *string `json:"modified,omitempty"`

	// Published Published is the datetime when this was released
	Published *string `json:"published,omitempty"`

	// References References are links to more detailed advisories, fixes, etc.
	References *[]struct {
		RefsType *string `json:"refs_type,omitempty"`
		Url      *string `json:"url,omitempty"`
	} `json:"references,omitempty"`

	// WasWithdrawn WasWD indicates if the advisory was withdrawn or not.
	WasWithdrawn *bool `json:"was_withdrawn,omitempty"`

	// Withdrawn Withdrawn is non-zero if this advisory has been withdrawn
	Withdrawn *string `json:"withdrawn,omitempty"`
}

// AdvisoryQNAPAdvisory defines model for advisory.QNAPAdvisory.
type AdvisoryQNAPAdvisory struct {
	Affected       *string   `json:"affected,omitempty"`
	BulletinId     *string   `json:"bulletin_id,omitempty"`
	Cve            *[]string `json:"cve,omitempty"`
	DateAdded      *string   `json:"date_added,omitempty"`
	LastUpdateDate *string   `json:"last_update_date,omitempty"`
	Link           *string   `json:"link,omitempty"`
	Severity       *string   `json:"severity,omitempty"`
	SeverityNumber *string   `json:"severity_number,omitempty"`
	Status         *string   `json:"status,omitempty"`
	Summary        *string   `json:"summary,omitempty"`
	Title          *string   `json:"title,omitempty"`
}

// AdvisoryQualcomm defines model for advisory.Qualcomm.
type AdvisoryQualcomm struct {
	Chipsets    *[]string `json:"chipsets,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Score       *string   `json:"score,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryQualys defines model for advisory.Qualys.
type AdvisoryQualys struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Exploits  *[]string `json:"exploits,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryRDescription defines model for advisory.RDescription.
type AdvisoryRDescription struct {
	Value *string `json:"value,omitempty"`
}

// AdvisoryRNote defines model for advisory.RNote.
type AdvisoryRNote struct {
	Audience *string `json:"audience,omitempty"`
	Ordinal  *string `json:"ordinal,omitempty"`
	Text     *string `json:"text,omitempty"`
	Title    *string `json:"title,omitempty"`

	// Type diff between xml && json
	Type *int `json:"type,omitempty"`
}

// AdvisoryRRevision defines model for advisory.RRevision.
type AdvisoryRRevision struct {
	Date        *string               `json:"date,omitempty"`
	Description *AdvisoryRDescription `json:"description,omitempty"`
	Number      *string               `json:"number,omitempty"`
}

// AdvisoryRScoreSet defines model for advisory.RScoreSet.
type AdvisoryRScoreSet struct {
	BaseScore     *string `json:"base_score,omitempty"`
	ProductId     *string `json:"product_id,omitempty"`
	TemporalScore *string `json:"temporal_score,omitempty"`
	Vector        *string `json:"vector,omitempty"`
}

// AdvisoryRThreat defines model for advisory.RThreat.
type AdvisoryRThreat struct {
	Description *AdvisoryIVal `json:"description,omitempty"`
	ProductId   *string       `json:"product_id,omitempty"`

	// Type diff
	Type *int `json:"type,omitempty"`
}

// AdvisoryRange defines model for advisory.Range.
type AdvisoryRange struct {
	Events *[]AdvisoryEvent `json:"events,omitempty"`
	Repo   *string          `json:"repo,omitempty"`
	Type   *string          `json:"type,omitempty"`
}

// AdvisoryRansomwareExploit defines model for advisory.RansomwareExploit.
type AdvisoryRansomwareExploit struct {
	Cve              *[]string               `json:"cve,omitempty"`
	CveReferences    *[]AdvisoryCVEReference `json:"cve_references,omitempty"`
	DateAdded        *string                 `json:"date_added,omitempty"`
	MalpediaUrl      *string                 `json:"malpedia_url,omitempty"`
	RansomwareFamily *string                 `json:"ransomware_family,omitempty"`
}

// AdvisoryRecordType defines model for advisory.RecordType.
type AdvisoryRecordType struct {
	Finding *string `json:"finding,omitempty"`
	Id      *string `json:"id,omitempty"`
}

// AdvisoryRedhatCVE defines model for advisory.RedhatCVE.
type AdvisoryRedhatCVE struct {
	Advisories         *[]string `json:"advisories,omitempty"`
	AdvisoryCsafVexUrl *[]string `json:"advisory_csaf_vex_url,omitempty"`

	// AffectedPackages used for un-marshlling from redhat
	AffectedPackages    *[]string              `json:"affected_packages,omitempty"`
	AffectedRelease     *[]AdvisoryAffectedRel `json:"affected_release,omitempty"`
	Bugzilla            *string                `json:"bugzilla,omitempty"`
	BugzillaDescription *string                `json:"bugzilla_description,omitempty"`
	Cve                 *[]string              `json:"cve,omitempty"`
	CveCsafVexUrl       *string                `json:"cve_csaf_vex_url,omitempty"`
	Cvss3Score          *string                `json:"cvss3_score,omitempty"`
	Cvss3ScoringVector  *string                `json:"cvss3_scoring_vector,omitempty"`
	CvssScore           *float32               `json:"cvss_score,omitempty"`
	CvssScoringVector   *string                `json:"cvss_scoring_vector,omitempty"`
	Cwe                 *string                `json:"cwe,omitempty"`
	PackageState        *[]AdvisoryPackageStat `json:"package_state,omitempty"`

	// Packages used to index into vulncheck OS
	Packages    *[]AdvisoryVulnCheckPackage `json:"packages,omitempty"`
	PublicDate  *string                     `json:"public_date,omitempty"`
	ResourceUrl *string                     `json:"resource_url,omitempty"`
	Severity    *string                     `json:"severity,omitempty"`
}

// AdvisoryReference defines model for advisory.Reference.
type AdvisoryReference struct {
	// Href sort
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryRelationship defines model for advisory.Relationship.
type AdvisoryRelationship struct {
	ProductReference          *string `json:"productReference,omitempty"`
	RelatesToProductReference *string `json:"relatesToProductReference,omitempty"`
	RelationType              *string `json:"relationType,omitempty"`
}

// AdvisoryRemediation defines model for advisory.Remediation.
type AdvisoryRemediation struct {
	Affectedfiles   *[]AdvisoryAffectedFile `json:"affectedfiles,omitempty"`
	Description     *AdvisoryIVal           `json:"description,omitempty"`
	FixedBuild      *string                 `json:"fixed_build,omitempty"`
	ProductId       *[]string               `json:"product_id,omitempty"`
	RestartRequired *string                 `json:"restart_required,omitempty"`
	SubType         *string                 `json:"sub_type,omitempty"`
	Supercedence    *string                 `json:"supercedence,omitempty"`

	// Type diff
	Type *int    `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// AdvisoryRemediationData defines model for advisory.RemediationData.
type AdvisoryRemediationData struct {
	Category        *string              `json:"category,omitempty"`
	Date            *string              `json:"date,omitempty"`
	Details         *string              `json:"details,omitempty"`
	Entitlements    *[]string            `json:"entitlements,omitempty"`
	GroupIds        *[]string            `json:"group_ids,omitempty"`
	ProductIds      *[]string            `json:"product_ids,omitempty"`
	RestartRequired *AdvisoryRestartData `json:"restart_required,omitempty"`
}

// AdvisoryRenesas defines model for advisory.Renesas.
type AdvisoryRenesas struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryReportedExploit defines model for advisory.ReportedExploit.
type AdvisoryReportedExploit struct {
	DateAdded *string `json:"date_added,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// AdvisoryRestartData defines model for advisory.RestartData.
type AdvisoryRestartData struct {
	Category *string `json:"category,omitempty"`
	Details  *string `json:"details,omitempty"`
}

// AdvisoryRevision defines model for advisory.Revision.
type AdvisoryRevision struct {
	Date        *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
	Number      *string `json:"number,omitempty"`
}

// AdvisoryRevive defines model for advisory.Revive.
type AdvisoryRevive struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryRockwell defines model for advisory.Rockwell.
type AdvisoryRockwell struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	Impact     *string   `json:"impact,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryRuckus defines model for advisory.Ruckus.
type AdvisoryRuckus struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryRustsecAdvisory defines model for advisory.RustsecAdvisory.
type AdvisoryRustsecAdvisory struct {
	Advisory    *AdvisoryRustsecFrontMatterAdvisory `json:"advisory,omitempty"`
	Affected    *AdvisoryRustsecAffected            `json:"affected,omitempty"`
	DateAdded   *string                             `json:"date_added,omitempty"`
	Description *string                             `json:"description,omitempty"`
	Versions    *AdvisoryRustsecFrontMatterVersions `json:"versions,omitempty"`
}

// AdvisoryRustsecAffected defines model for advisory.RustsecAffected.
type AdvisoryRustsecAffected struct {
	Arch      *[]string `json:"arch,omitempty"`
	Functions *string   `json:"functions,omitempty"`
	Os        *[]string `json:"os,omitempty"`
}

// AdvisoryRustsecFrontMatterAdvisory defines model for advisory.RustsecFrontMatterAdvisory.
type AdvisoryRustsecFrontMatterAdvisory struct {
	// Aliases Vulnerability aliases, e.g. CVE IDs (optional but recommended)
	// Request a CVE for your RustSec vulns: https://iwantacve.org/
	Aliases *[]string `json:"aliases,omitempty"`

	// Categories Optional: Categories this advisory falls under. Valid categories are:
	// "code-execution", "crypto-failure", "denial-of-service", "file-disclosure"
	// "format-injection", "memory-corruption", "memory-exposure", "privilege-escalation"
	Categories *[]string `json:"categories,omitempty"`

	// Cvss Optional: a Common Vulnerability Scoring System score. More information
	// can be found on the CVSS website, https://www.first.org/cvss/.
	Cvss *string `json:"cvss,omitempty"`

	// Date Disclosure date of the advisory as an RFC 3339 date (mandatory)
	Date *string `json:"date,omitempty"`

	// Informational Optional: Indicates the type of informational security  advisory
	//  - "unsound" for soundness issues
	//  - "unmaintained" for crates that are no longer maintained
	//  - "notice" for other informational notices
	Informational *string `json:"informational,omitempty"`

	// Keywords Freeform keywords which describe this vulnerability, similar to Cargo (optional)
	Keywords *[]string `json:"keywords,omitempty"`

	// Package Name of the affected crate (mandatory)
	Package *string `json:"package,omitempty"`

	// References URL to additional helpful references regarding the advisory (optional)
	References *[]string `json:"references,omitempty"`

	// Related Related vulnerabilities (optional)
	// e.g. CVE for a C library wrapped by a -sys crate)
	Related *[]string `json:"related,omitempty"`

	// RustsecId Identifier for the advisory (mandatory). Will be assigned a "RUSTSEC-YYYY-NNNN"
	// identifier e.g. RUSTSEC-2018-0001. Please use "RUSTSEC-0000-0000" in PRs.
	RustsecId *string `json:"rustsec_id,omitempty"`

	// Url URL to a long-form description of this issue, e.g. a GitHub issue/PR,
	// a change log entry, or a blogpost announcing the release (optional)
	Url *string `json:"url,omitempty"`

	// Withdrawn Whether the advisory is withdrawn (optional)
	Withdrawn *string `json:"withdrawn,omitempty"`
}

// AdvisoryRustsecFrontMatterVersions defines model for advisory.RustsecFrontMatterVersions.
type AdvisoryRustsecFrontMatterVersions struct {
	Patched *[]string `json:"patched,omitempty"`

	// Unaffected Versions which were never vulnerable (optional)
	Unaffected *[]string `json:"unaffected,omitempty"`
}

// AdvisorySAAdvisory defines model for advisory.SAAdvisory.
type AdvisorySAAdvisory struct {
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Link          *string   `json:"link,omitempty"`
	References    *[]string `json:"references,omitempty"`
	Severity      *string   `json:"severity,omitempty"`
	Threats       *string   `json:"threats,omitempty"`
	Vendor        *string   `json:"vendor,omitempty"`
	WarningDate   *string   `json:"warningDate,omitempty"`
	WarningNumber *string   `json:"warningNumber,omitempty"`
}

// AdvisorySAP defines model for advisory.SAP.
type AdvisorySAP struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisorySECConsult defines model for advisory.SECConsult.
type AdvisorySECConsult struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *string   `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySSASource defines model for advisory.SSASource.
type AdvisorySSASource struct {
	Document        *AdvisorySiemensDocument        `json:"document,omitempty"`
	ProductTree     *AdvisorySiemensProductTree     `json:"product_tree,omitempty"`
	Vulnerabilities *[]AdvisorySiemensVulnerability `json:"vulnerabilities,omitempty"`
}

// AdvisorySSDAdvisory defines model for advisory.SSDAdvisory.
type AdvisorySSDAdvisory struct {
	Analysis  *string   `json:"analysis,omitempty"`
	Credit    *string   `json:"credit,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Link      *string   `json:"link,omitempty"`

	// Poc contains actual poc code
	Poc         *string `json:"poc,omitempty"`
	Published   *string `json:"published,omitempty"`
	ResponseRef *string `json:"response_ref,omitempty"`
	Summary     *string `json:"summary,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// AdvisorySaintExploit defines model for advisory.SaintExploit.
type AdvisorySaintExploit struct {
	Bid         *string   `json:"bid,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	Osvdb       *string   `json:"osvdb,omitempty"`
	SaintId     *string   `json:"saint_id,omitempty"`
	Type        *string   `json:"type,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisorySalesForce defines model for advisory.SalesForce.
type AdvisorySalesForce struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Id          *int      `json:"id,omitempty"`
	Link        *string   `json:"link,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// AdvisorySamba defines model for advisory.Samba.
type AdvisorySamba struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Issues     *string   `json:"issues,omitempty"`
	References *[]string `json:"references,omitempty"`
}

// AdvisorySchneiderElectricAdvisory defines model for advisory.SchneiderElectricAdvisory.
type AdvisorySchneiderElectricAdvisory struct {
	CsafUrl             *string   `json:"csaf_url,omitempty"`
	Cve                 *[]string `json:"cve,omitempty"`
	Cwe                 *[]string `json:"cwe,omitempty"`
	DateAdded           *string   `json:"date_added,omitempty"`
	PdfUrl              *string   `json:"pdf_url,omitempty"`
	SchneiderElectricId *string   `json:"schneider_electric_id,omitempty"`
	Title               *string   `json:"title,omitempty"`
	Url                 *string   `json:"url,omitempty"`
}

// AdvisoryScoreSet defines model for advisory.ScoreSet.
type AdvisoryScoreSet struct {
	BaseScore *string `json:"baseScore,omitempty"`
	Vector    *string `json:"vector,omitempty"`
}

// AdvisorySecurityBulletin defines model for advisory.SecurityBulletin.
type AdvisorySecurityBulletin struct {
	Acknowledgement *string                   `json:"acknowledgement,omitempty"`
	BulletinId      *string                   `json:"bulletinId,omitempty"`
	Cve             *[]string                 `json:"cve,omitempty"`
	Cvedetails      *[]AdvisoryCVEDetail      `json:"cvedetails,omitempty"`
	DateAdded       *string                   `json:"date_added,omitempty"`
	HardwareUpdates *[]AdvisoryHardwareUpdate `json:"hardwareUpdates,omitempty"`
	LastUpdated     *string                   `json:"lastUpdated,omitempty"`
	Link            *string                   `json:"link,omitempty"`
	Revisions       *[]AdvisoryNvidiaRevision `json:"revisions,omitempty"`
	Severity        *string                   `json:"severity,omitempty"`
	SoftwareUpdates *[]AdvisorySoftwareUpdate `json:"softwareUpdates,omitempty"`
	Title           *string                   `json:"title,omitempty"`
}

// AdvisorySel defines model for advisory.Sel.
type AdvisorySel struct {
	Acknowledgement *string   `json:"acknowledgement,omitempty"`
	Cve             *[]string `json:"cve,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	Description     *string   `json:"description,omitempty"`
	Url             *string   `json:"url,omitempty"`
}

// AdvisorySentinelOne defines model for advisory.SentinelOne.
type AdvisorySentinelOne struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryServiceNow defines model for advisory.ServiceNow.
type AdvisoryServiceNow struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisorySeverity defines model for advisory.Severity.
type AdvisorySeverity struct {
	Score *string `json:"score,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// AdvisoryShadowServerExploitedVulnerability defines model for advisory.ShadowServerExploitedVulnerability.
type AdvisoryShadowServerExploitedVulnerability struct {
	Cnvd                 *string `json:"cnvd,omitempty"`
	Cve                  *string `json:"cve,omitempty"`
	DateAdded            *string `json:"date_added,omitempty"`
	DetectionsLast1Day   *int    `json:"detections_last_1_day,omitempty"`
	DetectionsLast30Days *int    `json:"detections_last_30_days,omitempty"`
	DetectionsLast7Days  *int    `json:"detections_last_7_days,omitempty"`
	DetectionsLast90Days *int    `json:"detections_last_90_days,omitempty"`
	Edb                  *string `json:"edb,omitempty"`
	InKev                *bool   `json:"in_kev,omitempty"`
	IsIot                *bool   `json:"is_iot,omitempty"`
	IsRansomware         *bool   `json:"is_ransomware,omitempty"`
	Product              *string `json:"product,omitempty"`
	Url                  *string `json:"url,omitempty"`
	Vendor               *string `json:"vendor,omitempty"`
	VulnerabilityId      *string `json:"vulnerability_id,omitempty"`
	VulnerabilityLink    *string `json:"vulnerability_link,omitempty"`
}

// AdvisorySick defines model for advisory.Sick.
type AdvisorySick struct {
	CsafUrl   *string   `json:"csaf_url,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Products  *[]string `json:"products,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// AdvisorySiemensAcknowledgments defines model for advisory.SiemensAcknowledgments.
type AdvisorySiemensAcknowledgments struct {
	Names        *[]string `json:"names,omitempty"`
	Organization *string   `json:"organization,omitempty"`
	Summary      *string   `json:"summary,omitempty"`
}

// AdvisorySiemensAdvisory defines model for advisory.SiemensAdvisory.
type AdvisorySiemensAdvisory struct {
	CsafUrl    *string            `json:"csaf_url,omitempty"`
	Cve        *[]string          `json:"cve,omitempty"`
	CvrfUrl    *string            `json:"cvrf_url,omitempty"`
	DateAdded  *string            `json:"date_added,omitempty"`
	HtmlUrl    *string            `json:"html_url,omitempty"`
	Id         *string            `json:"id,omitempty"`
	LastUpdate *string            `json:"last_update,omitempty"`
	PdfUrl     *string            `json:"pdf_url,omitempty"`
	Products   *[]string          `json:"products,omitempty"`
	Ssa        *AdvisorySSASource `json:"ssa,omitempty"`
	Tags       *[]string          `json:"tags,omitempty"`
	Title      *string            `json:"title,omitempty"`
	TxtUrl     *string            `json:"txt_url,omitempty"`
}

// AdvisorySiemensBranch defines model for advisory.SiemensBranch.
type AdvisorySiemensBranch struct {
	Branches *[]AdvisorySiemensSubBranch `json:"branches,omitempty"`
	Category *string                     `json:"category,omitempty"`
	Name     *string                     `json:"name,omitempty"`
}

// AdvisorySiemensCVSSV3 defines model for advisory.SiemensCVSSV3.
type AdvisorySiemensCVSSV3 struct {
	BaseScore    *float32 `json:"baseScore,omitempty"`
	BaseSeverity *string  `json:"baseSeverity,omitempty"`
	VectorString *string  `json:"vectorString,omitempty"`
	Version      *string  `json:"version,omitempty"`
}

// AdvisorySiemensCWE defines model for advisory.SiemensCWE.
type AdvisorySiemensCWE struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// AdvisorySiemensDistribution defines model for advisory.SiemensDistribution.
type AdvisorySiemensDistribution struct {
	Text *string             `json:"text,omitempty"`
	Tlp  *AdvisorySiemensTLP `json:"tlp,omitempty"`
}

// AdvisorySiemensDocument defines model for advisory.SiemensDocument.
type AdvisorySiemensDocument struct {
	Acknowledgments *[]AdvisorySiemensAcknowledgments `json:"acknowledgments,omitempty"`
	Category        *string                           `json:"category,omitempty"`
	CsafVersion     *string                           `json:"csaf_version,omitempty"`
	Distribution    *AdvisorySiemensDistribution      `json:"distribution,omitempty"`
	Notes           *[]AdvisorySiemensNotes           `json:"notes,omitempty"`
	Publisher       *AdvisorySiemensPublisher         `json:"publisher,omitempty"`
	References      *[]AdvisorySiemensReferences      `json:"references,omitempty"`
	Title           *string                           `json:"title,omitempty"`
	Tracking        *AdvisorySiemensTracking          `json:"tracking,omitempty"`
}

// AdvisorySiemensEngine defines model for advisory.SiemensEngine.
type AdvisorySiemensEngine struct {
	Name    *string `json:"name,omitempty"`
	Version *string `json:"version,omitempty"`
}

// AdvisorySiemensGenerator defines model for advisory.SiemensGenerator.
type AdvisorySiemensGenerator struct {
	Engine *AdvisorySiemensEngine `json:"engine,omitempty"`
}

// AdvisorySiemensNotes defines model for advisory.SiemensNotes.
type AdvisorySiemensNotes struct {
	Category *string `json:"category,omitempty"`
	Text     *string `json:"text,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// AdvisorySiemensProduct defines model for advisory.SiemensProduct.
type AdvisorySiemensProduct struct {
	Name                        *string                                     `json:"name,omitempty"`
	ProductId                   *string                                     `json:"product_id,omitempty"`
	ProductIdentificationHelper *AdvisorySiemensProductIdentificationHelper `json:"product_identification_helper,omitempty"`
}

// AdvisorySiemensProductIdentificationHelper defines model for advisory.SiemensProductIdentificationHelper.
type AdvisorySiemensProductIdentificationHelper struct {
	ModelNumbers *[]string `json:"model_numbers,omitempty"`
}

// AdvisorySiemensProductStatus defines model for advisory.SiemensProductStatus.
type AdvisorySiemensProductStatus struct {
	KnownAffected *[]string `json:"known_affected,omitempty"`
}

// AdvisorySiemensProductTree defines model for advisory.SiemensProductTree.
type AdvisorySiemensProductTree struct {
	Branches *[]AdvisorySiemensBranch `json:"branches,omitempty"`
}

// AdvisorySiemensPublisher defines model for advisory.SiemensPublisher.
type AdvisorySiemensPublisher struct {
	Category       *string `json:"category,omitempty"`
	ContactDetails *string `json:"contact_details,omitempty"`
	Name           *string `json:"name,omitempty"`
	Namespace      *string `json:"namespace,omitempty"`
}

// AdvisorySiemensReferences defines model for advisory.SiemensReferences.
type AdvisorySiemensReferences struct {
	Category *string `json:"category,omitempty"`
	Summary  *string `json:"summary,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// AdvisorySiemensRemediation defines model for advisory.SiemensRemediation.
type AdvisorySiemensRemediation struct {
	Category   *string   `json:"category,omitempty"`
	Details    *string   `json:"details,omitempty"`
	ProductIds *[]string `json:"product_ids,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisorySiemensRevisionHistory defines model for advisory.SiemensRevisionHistory.
type AdvisorySiemensRevisionHistory struct {
	Date          *string `json:"date,omitempty"`
	LegacyVersion *string `json:"legacy_version,omitempty"`
	Number        *string `json:"number,omitempty"`
	Summary       *string `json:"summary,omitempty"`
}

// AdvisorySiemensScore defines model for advisory.SiemensScore.
type AdvisorySiemensScore struct {
	CvssV3   *AdvisorySiemensCVSSV3 `json:"cvss_v3,omitempty"`
	Products *[]string              `json:"products,omitempty"`
}

// AdvisorySiemensSubBranch defines model for advisory.SiemensSubBranch.
type AdvisorySiemensSubBranch struct {
	Branches *[]AdvisorySiemensSubSubBranch `json:"branches,omitempty"`
	Category *string                        `json:"category,omitempty"`
	Name     *string                        `json:"name,omitempty"`
}

// AdvisorySiemensSubSubBranch defines model for advisory.SiemensSubSubBranch.
type AdvisorySiemensSubSubBranch struct {
	Category *string                 `json:"category,omitempty"`
	Name     *string                 `json:"name,omitempty"`
	Product  *AdvisorySiemensProduct `json:"product,omitempty"`
}

// AdvisorySiemensTLP defines model for advisory.SiemensTLP.
type AdvisorySiemensTLP struct {
	Label *string `json:"label,omitempty"`
}

// AdvisorySiemensTracking defines model for advisory.SiemensTracking.
type AdvisorySiemensTracking struct {
	CurrentReleaseDate *string                           `json:"current_release_date,omitempty"`
	Generator          *AdvisorySiemensGenerator         `json:"generator,omitempty"`
	Id                 *string                           `json:"id,omitempty"`
	InitialReleaseDate *string                           `json:"initial_release_date,omitempty"`
	RevisionHistory    *[]AdvisorySiemensRevisionHistory `json:"revision_history,omitempty"`
	Status             *string                           `json:"status,omitempty"`
	Version            *string                           `json:"version,omitempty"`
}

// AdvisorySiemensVulnerability defines model for advisory.SiemensVulnerability.
type AdvisorySiemensVulnerability struct {
	Cve           *string                       `json:"cve,omitempty"`
	Cwe           *AdvisorySiemensCWE           `json:"cwe,omitempty"`
	Notes         *[]AdvisorySiemensNotes       `json:"notes,omitempty"`
	ProductStatus *AdvisorySiemensProductStatus `json:"product_status,omitempty"`
	References    *[]AdvisorySiemensReferences  `json:"references,omitempty"`
	Remediations  *[]AdvisorySiemensRemediation `json:"remediations,omitempty"`
	Scores        *[]AdvisorySiemensScore       `json:"scores,omitempty"`
	Title         *string                       `json:"title,omitempty"`
}

// AdvisorySierraWireless defines model for advisory.SierraWireless.
type AdvisorySierraWireless struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Swid      *string   `json:"swid,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySingCert defines model for advisory.SingCert.
type AdvisorySingCert struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Link       *string   `json:"link,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Updated    *string   `json:"updated,omitempty"`
}

// AdvisorySlackware defines model for advisory.Slackware.
type AdvisorySlackware struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySoftwareUpdate defines model for advisory.SoftwareUpdate.
type AdvisorySoftwareUpdate struct {
	AffectedVersion *string   `json:"affectedVersion,omitempty"`
	Cves            *[]string `json:"cves,omitempty"`
	OperatingSystem *string   `json:"operatingSystem,omitempty"`
	SoftwareProduct *string   `json:"softwareProduct,omitempty"`
	UpdatedVersion  *string   `json:"updatedVersion,omitempty"`
}

// AdvisorySolarWindsAdvisory defines model for advisory.SolarWindsAdvisory.
type AdvisorySolarWindsAdvisory struct {
	AffectedProducts *string   `json:"affected_products,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	CvssScore        *string   `json:"cvss_score,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	FixedVersion     *string   `json:"fixed_version,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisorySolr defines model for advisory.Solr.
type AdvisorySolr struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySonicWallAdvisory defines model for advisory.SonicWallAdvisory.
type AdvisorySonicWallAdvisory struct {
	AdvisoryId             *string   `json:"advisory_id,omitempty"`
	AffectedProducts       *[]string `json:"affected_products,omitempty"`
	Cve                    *[]string `json:"cve,omitempty"`
	Cvss                   *string   `json:"cvss,omitempty"`
	CvssVector             *string   `json:"cvss_vector,omitempty"`
	CvssVersion            *float32  `json:"cvss_version,omitempty"`
	Cwe                    *string   `json:"cwe,omitempty"`
	DateAdded              *string   `json:"date_added,omitempty"`
	Impact                 *string   `json:"impact,omitempty"`
	IsWorkaroundAvailable  *bool     `json:"is_workaround_available,omitempty"`
	LastUpdatedWhen        *string   `json:"last_updated_when,omitempty"`
	PublishedWhen          *string   `json:"published_when,omitempty"`
	Summary                *string   `json:"summary,omitempty"`
	Title                  *string   `json:"title,omitempty"`
	Url                    *string   `json:"url,omitempty"`
	VulnStatus             *string   `json:"vuln_status,omitempty"`
	VulnerableProductsList *[]string `json:"vulnerable_products_list,omitempty"`
}

// AdvisorySpacelabsHealthcareAdvisory defines model for advisory.SpacelabsHealthcareAdvisory.
type AdvisorySpacelabsHealthcareAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySpring defines model for advisory.Spring.
type AdvisorySpring struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Severity    *string   `json:"severity,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryStatus defines model for advisory.Status.
type AdvisoryStatus struct {
	ProductID *[]string `json:"productID,omitempty"`
	Type      *string   `json:"type,omitempty"`
}

// AdvisoryStormshield defines model for advisory.Stormshield.
type AdvisoryStormshield struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryStrykerAdvisory defines model for advisory.StrykerAdvisory.
type AdvisoryStrykerAdvisory struct {
	AffectedComponents *[]string `json:"affected_components,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisorySudo defines model for advisory.Sudo.
type AdvisorySudo struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Details    *string   `json:"details,omitempty"`
	Fix        *string   `json:"fix,omitempty"`
	Impact     *string   `json:"impact,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Workaround *string   `json:"workaround,omitempty"`
}

// AdvisorySwisslogHealthcareAdvisory defines model for advisory.SwisslogHealthcareAdvisory.
type AdvisorySwisslogHealthcareAdvisory struct {
	AffectedComponents *[]string `json:"affected_components,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	Cwe                *[]string `json:"cwe,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisorySymfony defines model for advisory.Symfony.
type AdvisorySymfony struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySyncroSoft defines model for advisory.SyncroSoft.
type AdvisorySyncroSoft struct {
	Affected  *[]string `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fixed     *[]string `json:"fixed,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisorySynology defines model for advisory.Synology.
type AdvisorySynology struct {
	AffectedProducts *[]string `json:"affected_products,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Id               *string   `json:"id,omitempty"`
	LastUpdated      *string   `json:"last_updated,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Status           *string   `json:"status,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryTI defines model for advisory.TI.
type AdvisoryTI struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	IncidentId *string   `json:"incident_id,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryTPLink defines model for advisory.TPLink.
type AdvisoryTPLink struct {
	BulletinId  *int      `json:"bulletin_id,omitempty"`
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryTWCertAdvisory defines model for advisory.TWCertAdvisory.
type AdvisoryTWCertAdvisory struct {
	AffectedCn    *string   `json:"affected_cn,omitempty"`
	AffectedEn    *string   `json:"affected_en,omitempty"`
	CreditCn      *string   `json:"credit_cn,omitempty"`
	CreditEn      *string   `json:"credit_en,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	DescriptionCn *string   `json:"description_cn,omitempty"`
	DescriptionEn *string   `json:"description_en,omitempty"`
	Link          *string   `json:"link,omitempty"`
	SolutionCn    *string   `json:"solution_cn,omitempty"`
	SolutionEn    *string   `json:"solution_en,omitempty"`
	TitleCn       *string   `json:"title_cn,omitempty"`
	TitleEn       *string   `json:"title_en,omitempty"`
	Tvnid         *string   `json:"tvnid,omitempty"`
}

// AdvisoryTalosAdvisory defines model for advisory.TalosAdvisory.
type AdvisoryTalosAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	TalosId   *string   `json:"talos_id,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryTeamViewer defines model for advisory.TeamViewer.
type AdvisoryTeamViewer struct {
	BulletinId *string   `json:"bulletin_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryTencent defines model for advisory.Tencent.
type AdvisoryTencent struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	SummaryCn *string   `json:"summary_cn,omitempty"`
	TitleCn   *string   `json:"title_cn,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryThales defines model for advisory.Thales.
type AdvisoryThales struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	References  *[]string `json:"references,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryTheMissingLink defines model for advisory.TheMissingLink.
type AdvisoryTheMissingLink struct {
	AffectedVersions *string   `json:"affected_versions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	FixedVersions    *string   `json:"fixed_versions,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryThreat defines model for advisory.Threat.
type AdvisoryThreat struct {
	Severity *string `json:"severity,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// AdvisoryThreatActorWithExternalObjects defines model for advisory.ThreatActorWithExternalObjects.
type AdvisoryThreatActorWithExternalObjects struct {
	CveReferences              *[]AdvisoryCVEReference             `json:"cve_references,omitempty"`
	DateAdded                  *string                             `json:"date_added,omitempty"`
	MalpediaUrl                *string                             `json:"malpedia_url,omitempty"`
	MispId                     *string                             `json:"misp_id,omitempty"`
	MispThreatActor            *AdvisoryMISPValueNoID              `json:"misp_threat_actor,omitempty"`
	MitreAttackGroup           *AdvisoryMITREAttackGroupNoID       `json:"mitre_attack_group,omitempty"`
	MitreId                    *string                             `json:"mitre_id,omitempty"`
	ThreatActorName            *string                             `json:"threat_actor_name,omitempty"`
	VendorNamesForThreatActors *[]AdvisoryVendorNameForThreatActor `json:"vendor_names_for_threat_actors,omitempty"`
}

// AdvisoryThreatData defines model for advisory.ThreatData.
type AdvisoryThreatData struct {
	Category   *string   `json:"category,omitempty"`
	Details    *string   `json:"details,omitempty"`
	ProductIds *[]string `json:"product_ids,omitempty"`
}

// AdvisoryTibco defines model for advisory.Tibco.
type AdvisoryTibco struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`
	Impact      *string   `json:"impact,omitempty"`
	Overview    *string   `json:"overview,omitempty"`
	Title       *string   `json:"title,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// AdvisoryTimeline defines model for advisory.Timeline.
type AdvisoryTimeline struct {
	Lang *string `json:"lang,omitempty"`

	// Time FIXME: flip to time
	Time  *string `json:"time,omitempty"`
	Value *string `json:"value,omitempty"`
}

// AdvisoryTracking defines model for advisory.Tracking.
type AdvisoryTracking struct {
	CurrentReleaseDate *string `json:"current_release_date,omitempty"`
	Id                 *string `json:"id,omitempty"`
	InitialReleaseDate *string `json:"initial_release_date,omitempty"`
}

// AdvisoryTrackingID defines model for advisory.TrackingID.
type AdvisoryTrackingID struct {
	SystemName *string `json:"system_name,omitempty"`
	Text       *string `json:"text,omitempty"`
}

// AdvisoryTraneTechnology defines model for advisory.TraneTechnology.
type AdvisoryTraneTechnology struct {
	Brand     *string   `json:"brand,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Product   *string   `json:"product,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryTrendMicro defines model for advisory.TrendMicro.
type AdvisoryTrendMicro struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Scores    *string   `json:"scores,omitempty"`
	Severity  *string   `json:"severity,omitempty"`
	Solution  *string   `json:"solution,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryTriageNotes defines model for advisory.TriageNotes.
type AdvisoryTriageNotes struct {
	References *[]string `json:"references,omitempty"`
}

// AdvisoryTrustwave defines model for advisory.Trustwave.
type AdvisoryTrustwave struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryUSD defines model for advisory.USD.
type AdvisoryUSD struct {
	Affected  *string   `json:"affected,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryUSOMAdvisory defines model for advisory.USOMAdvisory.
type AdvisoryUSOMAdvisory struct {
	Cve                  *[]string `json:"cve,omitempty"`
	DateAdded            *string   `json:"date_added,omitempty"`
	EffectTr             *string   `json:"effect_tr,omitempty"`
	GeneralInformationTr *string   `json:"general_information_tr,omitempty"`
	References           *[]string `json:"references,omitempty"`
	SolutionTr           *string   `json:"solution_tr,omitempty"`
	TitleTr              *string   `json:"title_tr,omitempty"`
	Trid                 *string   `json:"trid,omitempty"`
	Url                  *string   `json:"url,omitempty"`
}

// AdvisoryUbiquiti defines model for advisory.Ubiquiti.
type AdvisoryUbiquiti struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Links     *[]string `json:"links,omitempty"`
	Products  *[]string `json:"products,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryUbuntuCVE defines model for advisory.UbuntuCVE.
type AdvisoryUbuntuCVE struct {
	AffectedPackages *[]AdvisoryAffectedUbuntuPackage `json:"affected_packages,omitempty"`

	// Cve Candidate
	Cve *[]string `json:"cve,omitempty"`

	// DateAdded PublicDate
	DateAdded *string `json:"date_added,omitempty"`

	// ReferenceUrls References
	ReferenceUrls *[]string `json:"reference_urls,omitempty"`
	SourceUrl     *string   `json:"source_url,omitempty"`

	// Status active || retired
	Status    *string   `json:"status,omitempty"`
	UbuntuUrl *string   `json:"ubuntu_url,omitempty"`
	Usn       *[]string `json:"usn,omitempty"`
}

// AdvisoryUbuntuPackageReleaseStatus defines model for advisory.UbuntuPackageReleaseStatus.
type AdvisoryUbuntuPackageReleaseStatus struct {
	Affected       *bool   `json:"affected,omitempty"`
	Fixed          *bool   `json:"fixed,omitempty"`
	FixedVersion   *string `json:"fixed_version,omitempty"`
	Lts            *bool   `json:"lts,omitempty"`
	Release        *string `json:"release,omitempty"`
	ReleaseLong    *string `json:"release_long,omitempty"`
	ReleaseVersion *string `json:"release_version,omitempty"`
	Status         *string `json:"status,omitempty"`
}

// AdvisoryUnify defines model for advisory.Unify.
type AdvisoryUnify struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	UpdatedAt  *string   `json:"updated_at,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryUnisoc defines model for advisory.Unisoc.
type AdvisoryUnisoc struct {
	AccessVector     *string   `json:"access_vector,omitempty"`
	AffectedChipsets *string   `json:"affected_chipsets,omitempty"`
	AffectedSoftware *string   `json:"affected_software,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Rating           *string   `json:"rating,omitempty"`
	Score            *string   `json:"score,omitempty"`
	Severity         *string   `json:"severity,omitempty"`
	Technology       *string   `json:"technology,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
	Vulnerability    *string   `json:"vulnerability,omitempty"`
}

// AdvisoryUpdate defines model for advisory.Update.
type AdvisoryUpdate struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id sort // key
	Id         *string              `json:"id,omitempty"`
	Issued     *AdvisoryDateTime    `json:"issued,omitempty"`
	OsArch     *string              `json:"os_arch,omitempty"`
	OsVersion  *string              `json:"os_version,omitempty"`
	Packages   *[]AdvisoryPackage   `json:"packages,omitempty"`
	References *[]AdvisoryReference `json:"references,omitempty"`
	Severity   *string              `json:"severity,omitempty"`
	Title      *string              `json:"title,omitempty"`
	Type       *string              `json:"type,omitempty"`
	Updated    *AdvisoryDateTime    `json:"updated,omitempty"`
}

// AdvisoryUpdated defines model for advisory.Updated.
type AdvisoryUpdated struct {
	Date *string `json:"date,omitempty"`
}

// AdvisoryVDEAdvisory defines model for advisory.VDEAdvisory.
type AdvisoryVDEAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Title           *string   `json:"title,omitempty"`
	Url             *string   `json:"url,omitempty"`
	Vde             *string   `json:"vde,omitempty"`
}

// AdvisoryVYAIREAdvisory defines model for advisory.VYAIREAdvisory.
type AdvisoryVYAIREAdvisory struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryVanDyke defines model for advisory.VanDyke.
type AdvisoryVanDyke struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVapidLabsAdvisory defines model for advisory.VapidLabsAdvisory.
type AdvisoryVapidLabsAdvisory struct {
	Author        *string   `json:"author,omitempty"`
	Cve           *[]string `json:"cve,omitempty"`
	DateAdded     *string   `json:"date_added,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Exploit       *string   `json:"exploit,omitempty"`
	Link          *string   `json:"link,omitempty"`
	Title         *string   `json:"title,omitempty"`
	VapidId       *string   `json:"vapidId,omitempty"`
	Vendor        *string   `json:"vendor,omitempty"`
	Vulnerability *string   `json:"vulnerability,omitempty"`
}

// AdvisoryVeeam defines model for advisory.Veeam.
type AdvisoryVeeam struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Details    *string   `json:"details,omitempty"`
	References *[]string `json:"references,omitempty"`
	Solution   *string   `json:"solution,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVendorNameForThreatActor defines model for advisory.VendorNameForThreatActor.
type AdvisoryVendorNameForThreatActor struct {
	ThreatActorName *string `json:"threat_actor_name,omitempty"`
	Url             *string `json:"url,omitempty"`
	VendorName      *string `json:"vendor_name,omitempty"`
}

// AdvisoryVoidSec defines model for advisory.VoidSec.
type AdvisoryVoidSec struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryVulnCheckConfig defines model for advisory.VulnCheckConfig.
type AdvisoryVulnCheckConfig struct {
	Config    *[]AdvisoryNVD20Configuration `json:"config,omitempty"`
	Cve       *[]string                     `json:"cve,omitempty"`
	DateAdded *string                       `json:"date_added,omitempty"`
}

// AdvisoryVulnCheckKEV defines model for advisory.VulnCheckKEV.
type AdvisoryVulnCheckKEV struct {
	Timestamp                     *string                    `json:"_timestamp,omitempty"`
	CisaDateAdded                 *string                    `json:"cisa_date_added,omitempty"`
	Cve                           *[]string                  `json:"cve,omitempty"`
	DateAdded                     *string                    `json:"date_added,omitempty"`
	DueDate                       *string                    `json:"dueDate,omitempty"`
	KnownRansomwareCampaignUse    *string                    `json:"knownRansomwareCampaignUse,omitempty"`
	Product                       *string                    `json:"product,omitempty"`
	RequiredAction                *string                    `json:"required_action,omitempty"`
	ShortDescription              *string                    `json:"shortDescription,omitempty"`
	VendorProject                 *string                    `json:"vendorProject,omitempty"`
	VulncheckReportedExploitation *[]AdvisoryReportedExploit `json:"vulncheck_reported_exploitation,omitempty"`
	VulncheckXdb                  *[]AdvisoryXDB             `json:"vulncheck_xdb,omitempty"`
	VulnerabilityName             *string                    `json:"vulnerabilityName,omitempty"`
}

// AdvisoryVulnCheckPackage defines model for advisory.VulnCheckPackage.
type AdvisoryVulnCheckPackage struct {
	Arch     *string `json:"arch,omitempty"`
	Distro   *string `json:"distro,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Md5      *string `json:"md5,omitempty"`
	Name     *string `json:"name,omitempty"`
	Purl     *string `json:"purl,omitempty"`
	Version  *string `json:"version,omitempty"`
}

// AdvisoryVulnerability defines model for advisory.Vulnerability.
type AdvisoryVulnerability struct {
	Cve           *string           `json:"cve,omitempty"`
	CvssscoreSets *AdvisoryScoreSet `json:"cvssscoreSets,omitempty"`
	Description   *string           `json:"description,omitempty"`

	// Packages vulncheck addition
	Packages        *[]AdvisoryVulnCheckPackage `json:"packages,omitempty"`
	ProductStatuses *[]AdvisoryStatus           `json:"productStatuses,omitempty"`
	References      *[]AdvisoryCVRFReference    `json:"references,omitempty"`
	Threats         *[]AdvisoryThreat           `json:"threats,omitempty"`
}

// AdvisoryVulnerableDebianPackage defines model for advisory.VulnerableDebianPackage.
type AdvisoryVulnerableDebianPackage struct {
	AssociatedCves *[]AdvisoryDebianCVE `json:"associated_cves,omitempty"`
	PackageName    *string              `json:"package_name,omitempty"`
}

// AdvisoryWRT defines model for advisory.WRT.
type AdvisoryWRT struct {
	Advisory         *string   `json:"advisory,omitempty"`
	AffectedVersions *string   `json:"affectedVersions,omitempty"`
	Credits          *string   `json:"credits,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Mitigations      *string   `json:"mitigations,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Requirements     *string   `json:"requirements,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Url              *string   `json:"url,omitempty"`
}

// AdvisoryWatchGuard defines model for advisory.WatchGuard.
type AdvisoryWatchGuard struct {
	AdvisoryId *string   `json:"advisory_id,omitempty"`
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Resolution *string   `json:"resolution,omitempty"`
	Score      *string   `json:"score,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryWhatsApp defines model for advisory.WhatsApp.
type AdvisoryWhatsApp struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryWibu defines model for advisory.Wibu.
type AdvisoryWibu struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryWireshark defines model for advisory.Wireshark.
type AdvisoryWireshark struct {
	Affected   *string   `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *string   `json:"fixed,omitempty"`
	Id         *string   `json:"id,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryWithSecure defines model for advisory.WithSecure.
type AdvisoryWithSecure struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryWolfSSL defines model for advisory.WolfSSL.
type AdvisoryWolfSSL struct {
	Cve          *[]string `json:"cve,omitempty"`
	DateAdded    *string   `json:"date_added,omitempty"`
	Description  *string   `json:"description,omitempty"`
	FixedVersion *string   `json:"fixed_version,omitempty"`
	Severity     *string   `json:"severity,omitempty"`
}

// AdvisoryWolfi defines model for advisory.Wolfi.
type AdvisoryWolfi struct {
	Apkurl *string   `json:"apkurl,omitempty"`
	Archs  *[]string `json:"archs,omitempty"`

	// DateAdded un-used
	DateAdded *string                 `json:"date_added,omitempty"`
	Packages  *[]AdvisoryWolfiPackage `json:"packages,omitempty"`
	Reponame  *string                 `json:"reponame,omitempty"`
	Urlprefix *string                 `json:"urlprefix,omitempty"`
}

// AdvisoryWolfiPackage defines model for advisory.WolfiPackage.
type AdvisoryWolfiPackage struct {
	Name     *string                `json:"name,omitempty"`
	Secfixes *[]AdvisoryWolfiSecFix `json:"secfixes,omitempty"`
}

// AdvisoryWolfiSecFix defines model for advisory.WolfiSecFix.
type AdvisoryWolfiSecFix struct {
	Cve     *[]string `json:"cve,omitempty"`
	Version *string   `json:"version,omitempty"`
}

// AdvisoryWordfence defines model for advisory.Wordfence.
type AdvisoryWordfence struct {
	Affected   *[]string `json:"affected,omitempty"`
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	Fixed      *[]string `json:"fixed,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryXDB defines model for advisory.XDB.
type AdvisoryXDB struct {
	CloneSshUrl *string `json:"clone_ssh_url,omitempty"`
	DateAdded   *string `json:"date_added,omitempty"`
	ExploitType *string `json:"exploit_type,omitempty"`
	XdbId       *string `json:"xdb_id,omitempty"`
	XdbUrl      *string `json:"xdb_url,omitempty"`
}

// AdvisoryXen defines model for advisory.Xen.
type AdvisoryXen struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	UpdatedAt *string   `json:"updatedAt,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryXerox defines model for advisory.Xerox.
type AdvisoryXerox struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryXiaomi defines model for advisory.Xiaomi.
type AdvisoryXiaomi struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	InternalId *string   `json:"internal_id,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	SummaryCn  *string   `json:"summary_cn,omitempty"`
	Title      *string   `json:"title,omitempty"`
	TitleCn    *string   `json:"title_cn,omitempty"`
	Url        *string   `json:"url,omitempty"`
}

// AdvisoryXylem defines model for advisory.Xylem.
type AdvisoryXylem struct {
	Cve        *[]string `json:"cve,omitempty"`
	DateAdded  *string   `json:"date_added,omitempty"`
	References *[]string `json:"references,omitempty"`
	Summary    *string   `json:"summary,omitempty"`
	Title      *string   `json:"title,omitempty"`
	Url        *string   `json:"url,omitempty"`
	Xsa        *string   `json:"xsa,omitempty"`
}

// AdvisoryYokogawaAdvisory defines model for advisory.YokogawaAdvisory.
type AdvisoryYokogawaAdvisory struct {
	Cve             *[]string `json:"cve,omitempty"`
	Cwe             *[]string `json:"cwe,omitempty"`
	DateAdded       *string   `json:"date_added,omitempty"`
	DateLastRevised *string   `json:"date_last_revised,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Url             *string   `json:"url,omitempty"`
	YsarId          *string   `json:"ysar_id,omitempty"`
}

// AdvisoryYubico defines model for advisory.Yubico.
type AdvisoryYubico struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryZeroDayAdvisory defines model for advisory.ZeroDayAdvisory.
type AdvisoryZeroDayAdvisory struct {
	AdditionalDetails  *string   `json:"additionalDetails,omitempty"`
	AffectedProducts   *string   `json:"affectedProducts,omitempty"`
	AffectedVendors    *string   `json:"affectedVendors,omitempty"`
	Credit             *string   `json:"credit,omitempty"`
	Cve                *[]string `json:"cve,omitempty"`
	Cvssscore          *string   `json:"cvssscore,omitempty"`
	DateAdded          *string   `json:"date_added,omitempty"`
	Details            *string   `json:"details,omitempty"`
	DisclosureTimeline *string   `json:"disclosureTimeline,omitempty"`
	Published          *string   `json:"published,omitempty"`
	References         *[]string `json:"references,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Url                *string   `json:"url,omitempty"`
}

// AdvisoryZeroScienceAdvisory defines model for advisory.ZeroScienceAdvisory.
type AdvisoryZeroScienceAdvisory struct {
	AdvisoryId       *string   `json:"advisoryId,omitempty"`
	AffectedVersions *string   `json:"affectedVersions,omitempty"`
	Cve              *[]string `json:"cve,omitempty"`
	DateAdded        *string   `json:"date_added,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Impact           *string   `json:"impact,omitempty"`
	Link             *string   `json:"link,omitempty"`
	PoC              *string   `json:"poC,omitempty"`
	References       *[]string `json:"references,omitempty"`
	Risk             *string   `json:"risk,omitempty"`
	Summary          *string   `json:"summary,omitempty"`
	Title            *string   `json:"title,omitempty"`
	Type             *string   `json:"type,omitempty"`
	Vendor           *string   `json:"vendor,omitempty"`
}

// AdvisoryZimbra defines model for advisory.Zimbra.
type AdvisoryZimbra struct {
	Bugs      *[]int    `json:"bugs,omitempty"`
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Fix       *string   `json:"fix,omitempty"`
	Rating    *string   `json:"rating,omitempty"`
	Reporter  *string   `json:"reporter,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
}

// AdvisoryZoom defines model for advisory.Zoom.
type AdvisoryZoom struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Zsb       *string   `json:"zsb,omitempty"`
}

// AdvisoryZscaler defines model for advisory.Zscaler.
type AdvisoryZscaler struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// AdvisoryZuso defines model for advisory.Zuso.
type AdvisoryZuso struct {
	Cve       *[]string `json:"cve,omitempty"`
	Cvss      *string   `json:"cvss,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
	Zaid      *string   `json:"zaid,omitempty"`
}

// AdvisoryZyxel defines model for advisory.Zyxel.
type AdvisoryZyxel struct {
	Cve       *[]string `json:"cve,omitempty"`
	DateAdded *string   `json:"date_added,omitempty"`
	Summary   *string   `json:"summary,omitempty"`
	Title     *string   `json:"title,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// ApiBaseMetricV2 defines model for api.BaseMetricV2.
type ApiBaseMetricV2 struct {
	AcInsufInfo             *bool      `json:"acInsufInfo,omitempty"`
	CvssV2                  *ApiCVSSV2 `json:"cvssV2,omitempty"`
	ExploitabilityScore     *float32   `json:"exploitabilityScore,omitempty"`
	ImpactScore             *float32   `json:"impactScore,omitempty"`
	ObtainAllPrivilege      *bool      `json:"obtainAllPrivilege,omitempty"`
	ObtainOtherPrivilege    *bool      `json:"obtainOtherPrivilege,omitempty"`
	ObtainUserPrivilege     *bool      `json:"obtainUserPrivilege,omitempty"`
	Severity                *string    `json:"severity,omitempty"`
	UserInteractionRequired *bool      `json:"userInteractionRequired,omitempty"`
}

// ApiBaseMetricV3 defines model for api.BaseMetricV3.
type ApiBaseMetricV3 struct {
	CvssV3              *ApiCVSSV3 `json:"cvssV3,omitempty"`
	ExploitabilityScore *float32   `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float32   `json:"impactScore,omitempty"`
}

// ApiCPE defines model for api.CPE.
type ApiCPE struct {
	Edition   *string `json:"edition,omitempty"`
	Language  *string `json:"language,omitempty"`
	Other     *string `json:"other,omitempty"`
	Part      *string `json:"part,omitempty"`
	Product   *string `json:"product,omitempty"`
	SwEdition *string `json:"sw_edition,omitempty"`
	TargetHw  *string `json:"target_hw,omitempty"`
	TargetSw  *string `json:"target_sw,omitempty"`
	Update    *string `json:"update,omitempty"`
	Vendor    *string `json:"vendor,omitempty"`
	Version   *string `json:"version,omitempty"`
}

// ApiCPEMatch defines model for api.CPEMatch.
type ApiCPEMatch struct {
	Cpe22Uri              *string       `json:"cpe22Uri,omitempty"`
	Cpe23Uri              *string       `json:"cpe23Uri,omitempty"`
	CpeName               *[]ApiCPEName `json:"cpe_name,omitempty"`
	VersionEndExcluding   *string       `json:"versionEndExcluding,omitempty"`
	VersionEndIncluding   *string       `json:"versionEndIncluding,omitempty"`
	VersionStartExcluding *string       `json:"versionStartExcluding,omitempty"`
	VersionStartIncluding *string       `json:"versionStartIncluding,omitempty"`
	Vulnerable            *bool         `json:"vulnerable,omitempty"`
}

// ApiCPEName defines model for api.CPEName.
type ApiCPEName struct {
	Cpe22Uri         *string `json:"cpe22Uri,omitempty"`
	Cpe23Uri         *string `json:"cpe23Uri,omitempty"`
	LastModifiedDate *string `json:"lastModifiedDate,omitempty"`
}

// ApiCVE defines model for api.CVE.
type ApiCVE struct {
	CVEDataMeta *ApiCVEDataMeta `json:"CVE_data_meta,omitempty"`
	DataFormat  *string         `json:"data_format,omitempty"`
	DataType    *string         `json:"data_type,omitempty"`
	DataVersion *string         `json:"data_version,omitempty"`
	Description *ApiDescription `json:"description,omitempty"`
	Problemtype *ApiProblemType `json:"problemtype,omitempty"`
	References  *ApiReferences  `json:"references,omitempty"`
}

// ApiCVEDataMeta defines model for api.CVEDataMeta.
type ApiCVEDataMeta struct {
	ASSIGNER *string `json:"ASSIGNER,omitempty"`
	ID       *string `json:"ID,omitempty"`
}

// ApiCVEDataMetaExtended defines model for api.CVEDataMetaExtended.
type ApiCVEDataMetaExtended struct {
	ALIAS    *string `json:"ALIAS,omitempty"`
	ASSIGNER *string `json:"ASSIGNER,omitempty"`
	ID       *string `json:"ID,omitempty"`
	STATUS   *string `json:"STATUS,omitempty"`
}

// ApiCVEExtended defines model for api.CVEExtended.
type ApiCVEExtended struct {
	CVEDataMeta    *ApiCVEDataMetaExtended    `json:"CVE_data_meta,omitempty"`
	Categorization *ApiCategorizationExtended `json:"categorization,omitempty"`
	DataFormat     *string                    `json:"data_format,omitempty"`
	DataType       *string                    `json:"data_type,omitempty"`
	DataVersion    *string                    `json:"data_version,omitempty"`
	Description    *ApiDescription            `json:"description,omitempty"`
	Problemtype    *ApiProblemTypeExtended    `json:"problemtype,omitempty"`
	References     *ApiReferencesExtended     `json:"references,omitempty"`
}

// ApiCVSSV2 defines model for api.CVSSV2.
type ApiCVSSV2 struct {
	AccessComplexity      *string  `json:"accessComplexity,omitempty"`
	AccessVector          *string  `json:"accessVector,omitempty"`
	Authentication        *string  `json:"authentication,omitempty"`
	AvailabilityImpact    *string  `json:"availabilityImpact,omitempty"`
	BaseScore             *float32 `json:"baseScore,omitempty"`
	ConfidentialityImpact *string  `json:"confidentialityImpact,omitempty"`
	IntegrityImpact       *string  `json:"integrityImpact,omitempty"`
	VectorString          *string  `json:"vectorString,omitempty"`
	Version               *string  `json:"version,omitempty"`
}

// ApiCVSSV3 defines model for api.CVSSV3.
type ApiCVSSV3 struct {
	AttackComplexity      *string  `json:"attackComplexity,omitempty"`
	AttackVector          *string  `json:"attackVector,omitempty"`
	AvailabilityImpact    *string  `json:"availabilityImpact,omitempty"`
	BaseScore             *float32 `json:"baseScore,omitempty"`
	BaseSeverity          *string  `json:"baseSeverity,omitempty"`
	ConfidentialityImpact *string  `json:"confidentialityImpact,omitempty"`
	IntegrityImpact       *string  `json:"integrityImpact,omitempty"`
	PrivilegesRequired    *string  `json:"privilegesRequired,omitempty"`
	Scope                 *string  `json:"scope,omitempty"`
	UserInteraction       *string  `json:"userInteraction,omitempty"`
	VectorString          *string  `json:"vectorString,omitempty"`
	Version               *string  `json:"version,omitempty"`
}

// ApiCWE defines model for api.CWE.
type ApiCWE struct {
	Abstraction       *string  `json:"abstraction,omitempty"`
	Description       *string  `json:"description,omitempty"`
	KevCount          *int     `json:"kev_count,omitempty"`
	Status            *string  `json:"status,omitempty"`
	Structure         *string  `json:"structure,omitempty"`
	VulncheckNvdCount *int     `json:"vulncheck_nvd_count,omitempty"`
	WeaknessId        *string  `json:"weakness_id,omitempty"`
	WeaknessName      *string  `json:"weakness_name,omitempty"`
	WeightedScore     *float32 `json:"weighted_score,omitempty"`
}

// ApiCategorizationExtended defines model for api.CategorizationExtended.
type ApiCategorizationExtended struct {
	Tags *[]string `json:"tags,omitempty"`
}

// ApiConfigurations defines model for api.Configurations.
type ApiConfigurations struct {
	CVEDataVersion *string     `json:"CVE_data_version,omitempty"`
	Nodes          *[]ApiNodes `json:"nodes,omitempty"`
}

// ApiCveItems defines model for api.CveItems.
type ApiCveItems struct {
	Configurations   *ApiConfigurations `json:"configurations,omitempty"`
	Cve              *ApiCVE            `json:"cve,omitempty"`
	Impact           *ApiImpact         `json:"impact,omitempty"`
	LastModifiedDate *string            `json:"lastModifiedDate,omitempty"`
	PublishedDate    *string            `json:"publishedDate,omitempty"`
	VcConfigurations *ApiConfigurations `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs *[]string          `json:"vcVulnerableCPEs,omitempty"`
}

// ApiCveItemsExtended defines model for api.CveItemsExtended.
type ApiCveItemsExtended struct {
	Timestamp      *string            `json:"_timestamp,omitempty"`
	Configurations *ApiConfigurations `json:"configurations,omitempty"`
	Cve            *ApiCVEExtended    `json:"cve,omitempty"`
	DateAdded      *string            `json:"date_added,omitempty"`

	// DocumentGenerationDate the deep tag instructs deep.Equal to ignore this field (used during OpenSearch loading)
	DocumentGenerationDate *string                    `json:"documentGenerationDate,omitempty"`
	Impact                 *ApiImpactExtended         `json:"impact,omitempty"`
	LastModifiedDate       *string                    `json:"lastModifiedDate,omitempty"`
	MitreAttackTechniques  *[]ApiMitreAttackTech      `json:"mitre_attack_techniques,omitempty"`
	PublishedDate          *string                    `json:"publishedDate,omitempty"`
	RelatedAttackPatterns  *[]ApiRelatedAttackPattern `json:"related_attack_patterns,omitempty"`
	VcConfigurations       *ApiConfigurations         `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs       *[]string                  `json:"vcVulnerableCPEs,omitempty"`
	VulnerableCpes         *[]string                  `json:"vulnerable_cpes,omitempty"`
}

// ApiDateTime defines model for api.DateTime.
type ApiDateTime struct {
	Date *string `json:"date,omitempty"`
}

// ApiDescription defines model for api.Description.
type ApiDescription struct {
	DescriptionData *[]ApiDescriptionData `json:"description_data,omitempty"`
}

// ApiDescriptionData defines model for api.DescriptionData.
type ApiDescriptionData struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiEPSS defines model for api.EPSS.
type ApiEPSS struct {
	EpssPercentile *float32 `json:"epss_percentile,omitempty"`
	EpssScore      *float32 `json:"epss_score,omitempty"`
	LastModified   *string  `json:"last_modified,omitempty"`
}

// ApiEPSSData defines model for api.EPSSData.
type ApiEPSSData struct {
	Timestamp      *string  `json:"_timestamp,omitempty"`
	Cve            *string  `json:"cve,omitempty"`
	EpssPercentile *float32 `json:"epss_percentile,omitempty"`
	EpssScore      *float32 `json:"epss_score,omitempty"`
}

// ApiExploitChain defines model for api.ExploitChain.
type ApiExploitChain struct {
	Cves      *[]ApiExploitChainCVE `json:"cves,omitempty"`
	DateAdded *string               `json:"date_added,omitempty"`
	Url       *string               `json:"url,omitempty"`
}

// ApiExploitChainCVE defines model for api.ExploitChainCVE.
type ApiExploitChainCVE struct {
	Cve  *string `json:"cve,omitempty"`
	Type *string `json:"type,omitempty"`
}

// ApiExploitV3Result defines model for api.ExploitV3Result.
type ApiExploitV3Result struct {
	// Timestamp loader adds this
	Timestamp                       *string                        `json:"_timestamp,omitempty"`
	CommercialExploitFound          *bool                          `json:"commercial_exploit_found,omitempty"`
	Counts                          *ApiExploitsV3Count            `json:"counts,omitempty"`
	DateAdded                       *string                        `json:"date_added,omitempty"`
	Epss                            *ApiEPSS                       `json:"epss,omitempty"`
	Exploits                        *[]ApiNormalizedExploitV3Entry `json:"exploits,omitempty"`
	Id                              *string                        `json:"id,omitempty"`
	InKEV                           *bool                          `json:"inKEV,omitempty"`
	InVCKEV                         *bool                          `json:"inVCKEV,omitempty"`
	MaxExploitMaturity              *string                        `json:"max_exploit_maturity,omitempty"`
	PublicExploitFound              *bool                          `json:"public_exploit_found,omitempty"`
	ReportedExploitation            *[]ApiNormalizedReportV3Entry  `json:"reported_exploitation,omitempty"`
	ReportedExploited               *bool                          `json:"reported_exploited,omitempty"`
	ReportedExploitedByBotnets      *bool                          `json:"reported_exploited_by_botnets,omitempty"`
	ReportedExploitedByRansomware   *bool                          `json:"reported_exploited_by_ransomware,omitempty"`
	ReportedExploitedByThreatActors *bool                          `json:"reported_exploited_by_threat_actors,omitempty"`
	Timeline                        *ApiExploitsV3Timeline         `json:"timeline,omitempty"`
	Trending                        *ApiExploitsTrending           `json:"trending,omitempty"`
	WeaponizedExploitFound          *bool                          `json:"weaponized_exploit_found,omitempty"`
}

// ApiExploitsTrending defines model for api.ExploitsTrending.
type ApiExploitsTrending struct {
	Github *bool `json:"github,omitempty"`
}

// ApiExploitsV3Count defines model for api.ExploitsV3Count.
type ApiExploitsV3Count struct {
	Botnets            *int `json:"botnets,omitempty"`
	Exploits           *int `json:"exploits,omitempty"`
	RansomwareFamilies *int `json:"ransomware_families,omitempty"`
	ThreatActors       *int `json:"threat_actors,omitempty"`
}

// ApiExploitsV3Timeline defines model for api.ExploitsV3Timeline.
type ApiExploitsV3Timeline struct {
	CisaKevDateAdded                        *string `json:"cisa_kev_date_added,omitempty"`
	CisaKevDateDue                          *string `json:"cisa_kev_date_due,omitempty"`
	FirstExploitPublished                   *string `json:"first_exploit_published,omitempty"`
	FirstExploitPublishedWeaponizedOrHigher *string `json:"first_exploit_published_weaponized_or_higher,omitempty"`
	FirstReportedBotnet                     *string `json:"first_reported_botnet,omitempty"`
	FirstReportedRansomware                 *string `json:"first_reported_ransomware,omitempty"`
	FirstReportedThreatActor                *string `json:"first_reported_threat_actor,omitempty"`
	MostRecentExploitPublished              *string `json:"most_recent_exploit_published,omitempty"`
	MostRecentReportedBotnet                *string `json:"most_recent_reported_botnet,omitempty"`
	MostRecentReportedRansomware            *string `json:"most_recent_reported_ransomware,omitempty"`
	MostRecentReportedThreatActor           *string `json:"most_recent_reported_threat_actor,omitempty"`
	NvdLastModified                         *string `json:"nvd_last_modified,omitempty"`
	NvdPublished                            *string `json:"nvd_published,omitempty"`
	VulncheckKevDateAdded                   *string `json:"vulncheck_kev_date_added,omitempty"`
	VulncheckKevDateDue                     *string `json:"vulncheck_kev_date_due,omitempty"`
}

// ApiImpact defines model for api.Impact.
type ApiImpact struct {
	BaseMetricV2 *ApiBaseMetricV2 `json:"baseMetricV2,omitempty"`
	BaseMetricV3 *ApiBaseMetricV3 `json:"baseMetricV3,omitempty"`
}

// ApiImpactExtended defines model for api.ImpactExtended.
type ApiImpactExtended struct {
	BaseMetricV2          *ApiBaseMetricV2     `json:"baseMetricV2,omitempty"`
	BaseMetricV3          *ApiBaseMetricV3     `json:"baseMetricV3,omitempty"`
	CorrectedBaseMetricV3 *ApiBaseMetricV3     `json:"correctedBaseMetricV3,omitempty"`
	Epss                  *ApiEPSS             `json:"epss,omitempty"`
	TemporalMetricV2      *ApiTemporalMetricV2 `json:"temporalMetricV2,omitempty"`
	TemporalMetricV3      *ApiTemporalMetricV3 `json:"temporalMetricV3,omitempty"`
	TemporalV3Corrected   *ApiTemporalMetricV3 `json:"temporalV3Corrected,omitempty"`
}

// ApiInitialAccess defines model for api.InitialAccess.
type ApiInitialAccess struct {
	Artifacts      *[]ApiInitialAccessArtifact `json:"artifacts,omitempty"`
	Cve            *string                     `json:"cve,omitempty"`
	InKEV          *bool                       `json:"inKEV,omitempty"`
	InVCKEV        *bool                       `json:"inVCKEV,omitempty"`
	VulnerableCpes *[]string                   `json:"vulnerable_cpes,omitempty"`
}

// ApiInitialAccessArtifact defines model for api.InitialAccessArtifact.
type ApiInitialAccessArtifact struct {
	ArtifactName     *string   `json:"artifactName,omitempty"`
	ArtifactsURL     *[]string `json:"artifactsURL,omitempty"`
	CensysQueries    *[]string `json:"censysQueries,omitempty"`
	CloneSSHURL      *string   `json:"cloneSSHURL,omitempty"`
	DateAdded        *string   `json:"dateAdded,omitempty"`
	Exploit          *bool     `json:"exploit,omitempty"`
	GreynoiseQueries *[]string `json:"greynoiseQueries,omitempty"`
	NmapScript       *bool     `json:"nmapScript,omitempty"`
	Pcap             *bool     `json:"pcap,omitempty"`
	Product          *[]string `json:"product,omitempty"`
	ShodanQueries    *[]string `json:"shodanQueries,omitempty"`
	SnortRule        *bool     `json:"snortRule,omitempty"`
	SuricataRule     *bool     `json:"suricataRule,omitempty"`
	TargetDocker     *bool     `json:"targetDocker,omitempty"`
	TargetService    *string   `json:"targetService,omitempty"`
	Vendor           *string   `json:"vendor,omitempty"`
	VersionScanner   *bool     `json:"versionScanner,omitempty"`
	Yara             *bool     `json:"yara,omitempty"`
	Zeroday          *bool     `json:"zeroday,omitempty"`
}

// ApiMitreAttackTech defines model for api.MitreAttackTech.
type ApiMitreAttackTech struct {
	Domain       *string   `json:"domain,omitempty"`
	Id           *string   `json:"id,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Subtechnique *bool     `json:"subtechnique,omitempty"`
	Tactics      *[]string `json:"tactics,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// ApiMitreAttackToCVE defines model for api.MitreAttackToCVE.
type ApiMitreAttackToCVE struct {
	CveList     *[]string           `json:"cve_list,omitempty"`
	DateAdded   *string             `json:"date_added,omitempty"`
	TechniqueId *ApiMitreAttackTech `json:"technique_id,omitempty"`
}

// ApiNVD20CPEMatch defines model for api.NVD20CPEMatch.
type ApiNVD20CPEMatch struct {
	CpeLastModified       *string            `json:"cpeLastModified,omitempty"`
	Created               *string            `json:"created,omitempty"`
	Criteria              *string            `json:"criteria,omitempty"`
	LastModified          *string            `json:"lastModified,omitempty"`
	MatchCriteriaId       *string            `json:"matchCriteriaId,omitempty"`
	Matches               *[]ApiNVD20CPEName `json:"matches,omitempty"`
	Status                *string            `json:"status,omitempty"`
	VersionEndExcluding   *string            `json:"versionEndExcluding,omitempty"`
	VersionEndIncluding   *string            `json:"versionEndIncluding,omitempty"`
	VersionStartExcluding *string            `json:"versionStartExcluding,omitempty"`
	VersionStartIncluding *string            `json:"versionStartIncluding,omitempty"`
}

// ApiNVD20CPEName defines model for api.NVD20CPEName.
type ApiNVD20CPEName struct {
	CpeName   *string `json:"cpeName,omitempty"`
	CpeNameId *string `json:"cpeNameId,omitempty"`
}

// ApiNVD20CVE defines model for api.NVD20CVE.
type ApiNVD20CVE struct {
	CisaActionDue         *string                       `json:"cisaActionDue,omitempty"`
	CisaExploitAdd        *string                       `json:"cisaExploitAdd,omitempty"`
	CisaRequiredAction    *string                       `json:"cisaRequiredAction,omitempty"`
	CisaVulnerabilityName *string                       `json:"cisaVulnerabilityName,omitempty"`
	Configurations        *[]AdvisoryNVD20Configuration `json:"configurations,omitempty"`
	Descriptions          *[]ApiNVD20Description        `json:"descriptions,omitempty"`
	EvaluatorComment      *string                       `json:"evaluatorComment,omitempty"`
	EvaluatorImpact       *string                       `json:"evaluatorImpact,omitempty"`
	EvaluatorSolution     *string                       `json:"evaluatorSolution,omitempty"`
	Id                    *string                       `json:"id,omitempty"`
	LastModified          *string                       `json:"lastModified,omitempty"`
	Metrics               *ApiNVD20Metric               `json:"metrics,omitempty"`
	Published             *string                       `json:"published,omitempty"`
	References            *[]ApiNVD20Reference          `json:"references,omitempty"`
	SourceIdentifier      *string                       `json:"sourceIdentifier,omitempty"`
	VcConfigurations      *[]AdvisoryNVD20Configuration `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs      *[]string                     `json:"vcVulnerableCPEs,omitempty"`
	VendorComments        *[]ApiNVD20VendorComment      `json:"vendorComments,omitempty"`
	VulnStatus            *string                       `json:"vulnStatus,omitempty"`
	Weaknesses            *[]ApiNVD20Weakness           `json:"weaknesses,omitempty"`
}

// ApiNVD20CVEExtended defines model for api.NVD20CVEExtended.
type ApiNVD20CVEExtended struct {
	ALIAS  *string `json:"ALIAS,omitempty"`
	STATUS *string `json:"STATUS,omitempty"`

	// Timestamp the deep tag instructs deep.Equal to ignore this field (used during OpenSearch loading)
	Timestamp              *string                       `json:"_timestamp,omitempty"`
	Categorization         *ApiCategorizationExtended    `json:"categorization,omitempty"`
	CisaActionDue          *string                       `json:"cisaActionDue,omitempty"`
	CisaExploitAdd         *string                       `json:"cisaExploitAdd,omitempty"`
	CisaRequiredAction     *string                       `json:"cisaRequiredAction,omitempty"`
	CisaVulnerabilityName  *string                       `json:"cisaVulnerabilityName,omitempty"`
	Configurations         *[]AdvisoryNVD20Configuration `json:"configurations,omitempty"`
	DateAdded              *string                       `json:"date_added,omitempty"`
	Descriptions           *[]ApiNVD20Description        `json:"descriptions,omitempty"`
	DocumentGenerationDate *string                       `json:"documentGenerationDate,omitempty"`
	EvaluatorComment       *string                       `json:"evaluatorComment,omitempty"`
	EvaluatorImpact        *string                       `json:"evaluatorImpact,omitempty"`
	EvaluatorSolution      *string                       `json:"evaluatorSolution,omitempty"`
	Id                     *string                       `json:"id,omitempty"`
	LastModified           *string                       `json:"lastModified,omitempty"`
	Metrics                *ApiNVD20MetricExtended       `json:"metrics,omitempty"`
	MitreAttackTechniques  *[]ApiMitreAttackTech         `json:"mitreAttackTechniques,omitempty"`
	Published              *string                       `json:"published,omitempty"`
	References             *[]ApiNVD20ReferenceExtended  `json:"references,omitempty"`
	RelatedAttackPatterns  *[]ApiRelatedAttackPattern    `json:"relatedAttackPatterns,omitempty"`
	SourceIdentifier       *string                       `json:"sourceIdentifier,omitempty"`
	VcConfigurations       *[]AdvisoryNVD20Configuration `json:"vcConfigurations,omitempty"`
	VcVulnerableCPEs       *[]string                     `json:"vcVulnerableCPEs,omitempty"`
	VendorComments         *[]ApiNVD20VendorComment      `json:"vendorComments,omitempty"`
	VulnStatus             *string                       `json:"vulnStatus,omitempty"`
	VulncheckKEVExploitAdd *string                       `json:"vulncheckKEVExploitAdd,omitempty"`
	VulnerableCPEs         *[]string                     `json:"vulnerableCPEs,omitempty"`
	Weaknesses             *[]ApiNVD20WeaknessExtended   `json:"weaknesses,omitempty"`
}

// ApiNVD20CvssDataV2 defines model for api.NVD20CvssDataV2.
type ApiNVD20CvssDataV2 struct {
	AccessComplexity           *string  `json:"accessComplexity,omitempty"`
	AccessVector               *string  `json:"accessVector,omitempty"`
	Authentication             *string  `json:"authentication,omitempty"`
	AvailabilityImpact         *string  `json:"availabilityImpact,omitempty"`
	AvailabilityRequirement    *string  `json:"availabilityRequirement,omitempty"`
	BaseScore                  *float32 `json:"baseScore,omitempty"`
	CollateralDamagePotential  *string  `json:"collateralDamagePotential,omitempty"`
	ConfidentialityImpact      *string  `json:"confidentialityImpact,omitempty"`
	ConfidentialityRequirement *string  `json:"confidentialityRequirement,omitempty"`
	EnvironmentalScore         *float32 `json:"environmentalScore,omitempty"`
	Exploitability             *string  `json:"exploitability,omitempty"`
	IntegrityImpact            *string  `json:"integrityImpact,omitempty"`
	IntegrityRequirement       *string  `json:"integrityRequirement,omitempty"`
	RemediationLevel           *string  `json:"remediationLevel,omitempty"`
	ReportConfidence           *string  `json:"reportConfidence,omitempty"`
	TargetDistribution         *string  `json:"targetDistribution,omitempty"`
	TemporalScore              *float32 `json:"temporalScore,omitempty"`
	VectorString               *string  `json:"vectorString,omitempty"`
	Version                    *string  `json:"version,omitempty"`
}

// ApiNVD20CvssDataV3 defines model for api.NVD20CvssDataV3.
type ApiNVD20CvssDataV3 struct {
	AttackComplexity              *string  `json:"attackComplexity,omitempty"`
	AttackVector                  *string  `json:"attackVector,omitempty"`
	AvailabilityImpact            *string  `json:"availabilityImpact,omitempty"`
	AvailabilityRequirement       *string  `json:"availabilityRequirement,omitempty"`
	BaseScore                     *float32 `json:"baseScore,omitempty"`
	BaseSeverity                  *string  `json:"baseSeverity,omitempty"`
	ConfidentialityImpact         *string  `json:"confidentialityImpact,omitempty"`
	ConfidentialityRequirement    *string  `json:"confidentialityRequirement,omitempty"`
	EnvironmentalScore            *float32 `json:"environmentalScore,omitempty"`
	EnvironmentalSeverity         *string  `json:"environmentalSeverity,omitempty"`
	ExploitCodeMaturity           *string  `json:"exploitCodeMaturity,omitempty"`
	IntegrityImpact               *string  `json:"integrityImpact,omitempty"`
	IntegrityRequirement          *string  `json:"integrityRequirement,omitempty"`
	ModifiedAttackComplexity      *string  `json:"modifiedAttackComplexity,omitempty"`
	ModifiedAttackVector          *string  `json:"modifiedAttackVector,omitempty"`
	ModifiedAvailabilityImpact    *string  `json:"modifiedAvailabilityImpact,omitempty"`
	ModifiedConfidentialityImpact *string  `json:"modifiedConfidentialityImpact,omitempty"`
	ModifiedIntegrityImpact       *string  `json:"modifiedIntegrityImpact,omitempty"`
	ModifiedPrivilegesRequired    *string  `json:"modifiedPrivilegesRequired,omitempty"`
	ModifiedScope                 *string  `json:"modifiedScope,omitempty"`
	ModifiedUserInteraction       *string  `json:"modifiedUserInteraction,omitempty"`
	PrivilegesRequired            *string  `json:"privilegesRequired,omitempty"`
	RemediationLevel              *string  `json:"remediationLevel,omitempty"`
	ReportConfidence              *string  `json:"reportConfidence,omitempty"`
	Scope                         *string  `json:"scope,omitempty"`
	TemporalScore                 *float32 `json:"temporalScore,omitempty"`
	TemporalSeverity              *string  `json:"temporalSeverity,omitempty"`
	UserInteraction               *string  `json:"userInteraction,omitempty"`
	VectorString                  *string  `json:"vectorString,omitempty"`
	Version                       *string  `json:"version,omitempty"`
}

// ApiNVD20CvssMetricV2 defines model for api.NVD20CvssMetricV2.
type ApiNVD20CvssMetricV2 struct {
	AcInsufInfo             *bool               `json:"acInsufInfo,omitempty"`
	BaseSeverity            *string             `json:"baseSeverity,omitempty"`
	CvssData                *ApiNVD20CvssDataV2 `json:"cvssData,omitempty"`
	ExploitabilityScore     *float32            `json:"exploitabilityScore,omitempty"`
	ImpactScore             *float32            `json:"impactScore,omitempty"`
	ObtainAllPrivilege      *bool               `json:"obtainAllPrivilege,omitempty"`
	ObtainOtherPrivilege    *bool               `json:"obtainOtherPrivilege,omitempty"`
	ObtainUserPrivilege     *bool               `json:"obtainUserPrivilege,omitempty"`
	Source                  *string             `json:"source,omitempty"`
	Type                    *string             `json:"type,omitempty"`
	UserInteractionRequired *bool               `json:"userInteractionRequired,omitempty"`
}

// ApiNVD20CvssMetricV3 defines model for api.NVD20CvssMetricV3.
type ApiNVD20CvssMetricV3 struct {
	CvssData            *ApiNVD20CvssDataV3 `json:"cvssData,omitempty"`
	ExploitabilityScore *float32            `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float32            `json:"impactScore,omitempty"`
	Source              *string             `json:"source,omitempty"`
	Type                *string             `json:"type,omitempty"`
}

// ApiNVD20Description defines model for api.NVD20Description.
type ApiNVD20Description struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiNVD20Metric defines model for api.NVD20Metric.
type ApiNVD20Metric struct {
	CvssMetricV2  *[]ApiNVD20CvssMetricV2 `json:"cvssMetricV2,omitempty"`
	CvssMetricV30 *[]ApiNVD20CvssMetricV3 `json:"cvssMetricV30,omitempty"`
	CvssMetricV31 *[]ApiNVD20CvssMetricV3 `json:"cvssMetricV31,omitempty"`
}

// ApiNVD20MetricExtended defines model for api.NVD20MetricExtended.
type ApiNVD20MetricExtended struct {
	CvssMetricV2             *[]ApiNVD20CvssMetricV2   `json:"cvssMetricV2,omitempty"`
	CvssMetricV30            *[]ApiNVD20CvssMetricV3   `json:"cvssMetricV30,omitempty"`
	CvssMetricV31            *[]ApiNVD20CvssMetricV3   `json:"cvssMetricV31,omitempty"`
	Epss                     *ApiEPSS                  `json:"epss,omitempty"`
	TemporalCVSSV2           *ApiNVD20TemporalCVSSV2   `json:"temporalCVSSV2,omitempty"`
	TemporalCVSSV2Secondary  *[]ApiNVD20TemporalCVSSV2 `json:"temporalCVSSV2Secondary,omitempty"`
	TemporalCVSSV30          *ApiNVD20TemporalCVSSV3   `json:"temporalCVSSV30,omitempty"`
	TemporalCVSSV30Secondary *[]ApiNVD20TemporalCVSSV3 `json:"temporalCVSSV30Secondary,omitempty"`
	TemporalCVSSV31          *ApiNVD20TemporalCVSSV3   `json:"temporalCVSSV31,omitempty"`
	TemporalCVSSV31Secondary *[]ApiNVD20TemporalCVSSV3 `json:"temporalCVSSV31Secondary,omitempty"`
}

// ApiNVD20Reference defines model for api.NVD20Reference.
type ApiNVD20Reference struct {
	Source *string   `json:"source,omitempty"`
	Tags   *[]string `json:"tags,omitempty"`
	Url    *string   `json:"url,omitempty"`
}

// ApiNVD20ReferenceExtended defines model for api.NVD20ReferenceExtended.
type ApiNVD20ReferenceExtended struct {
	DateAdded   *string   `json:"date_added,omitempty"`
	ExternalId  *string   `json:"external_id,omitempty"`
	Lang        *string   `json:"lang,omitempty"`
	Name        *string   `json:"name,omitempty"`
	PreviousUrl *string   `json:"previous_url,omitempty"`
	Refsource   *string   `json:"refsource,omitempty"`
	Source      *string   `json:"source,omitempty"`
	Status      *string   `json:"status,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// ApiNVD20TemporalAssociatedBaseMetric defines model for api.NVD20TemporalAssociatedBaseMetric.
type ApiNVD20TemporalAssociatedBaseMetric struct {
	BaseScore *float32 `json:"baseScore,omitempty"`
	Source    *string  `json:"source,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

// ApiNVD20TemporalCVSSV2 defines model for api.NVD20TemporalCVSSV2.
type ApiNVD20TemporalCVSSV2 struct {
	AssociatedBaseMetricV2 *ApiNVD20TemporalAssociatedBaseMetric `json:"associatedBaseMetricV2,omitempty"`
	Exploitability         *string                               `json:"exploitability,omitempty"`
	RemediationLevel       *string                               `json:"remediationLevel,omitempty"`
	ReportConfidence       *string                               `json:"reportConfidence,omitempty"`
	TemporalScore          *float32                              `json:"temporalScore,omitempty"`
	VectorString           *string                               `json:"vectorString,omitempty"`
	Version                *string                               `json:"version,omitempty"`
}

// ApiNVD20TemporalCVSSV3 defines model for api.NVD20TemporalCVSSV3.
type ApiNVD20TemporalCVSSV3 struct {
	AssociatedBaseMetricV3 *ApiNVD20TemporalAssociatedBaseMetric `json:"associatedBaseMetricV3,omitempty"`
	ExploitCodeMaturity    *string                               `json:"exploitCodeMaturity,omitempty"`
	RemediationLevel       *string                               `json:"remediationLevel,omitempty"`
	ReportConfidence       *string                               `json:"reportConfidence,omitempty"`
	TemporalScore          *float32                              `json:"temporalScore,omitempty"`
	VectorString           *string                               `json:"vectorString,omitempty"`
	Version                *string                               `json:"version,omitempty"`
}

// ApiNVD20VendorComment defines model for api.NVD20VendorComment.
type ApiNVD20VendorComment struct {
	Comment      *string `json:"comment,omitempty"`
	LastModified *string `json:"lastModified,omitempty"`
	Organization *string `json:"organization,omitempty"`
}

// ApiNVD20Weakness defines model for api.NVD20Weakness.
type ApiNVD20Weakness struct {
	Description *[]ApiNVD20Description `json:"description,omitempty"`
	Source      *string                `json:"source,omitempty"`
	Type        *string                `json:"type,omitempty"`
}

// ApiNVD20WeaknessDescExtended defines model for api.NVD20WeaknessDescExtended.
type ApiNVD20WeaknessDescExtended struct {
	Lang  *string `json:"lang,omitempty"`
	Name  *string `json:"name,omitempty"`
	Url   *string `json:"url,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiNVD20WeaknessExtended defines model for api.NVD20WeaknessExtended.
type ApiNVD20WeaknessExtended struct {
	Description *[]ApiNVD20WeaknessDescExtended `json:"description,omitempty"`
	Source      *string                         `json:"source,omitempty"`
	Type        *string                         `json:"type,omitempty"`
}

// ApiNodes defines model for api.Nodes.
type ApiNodes struct {
	Children *[]ApiNodes    `json:"children,omitempty"`
	CpeMatch *[]ApiCPEMatch `json:"cpe_match,omitempty"`
	Operator *string        `json:"operator,omitempty"`
}

// ApiNormalizedExploitV3Entry defines model for api.NormalizedExploitV3Entry.
type ApiNormalizedExploitV3Entry struct {
	CloneSshUrl         *string `json:"clone_ssh_url,omitempty"`
	CloneSshUrlCached   *string `json:"clone_ssh_url_cached,omitempty"`
	DateAdded           *string `json:"date_added,omitempty"`
	ExploitAvailability *string `json:"exploit_availability,omitempty"`
	ExploitMaturity     *string `json:"exploit_maturity,omitempty"`
	ExploitType         *string `json:"exploit_type,omitempty"`
	Name                *string `json:"name,omitempty"`
	ReferenceUrl        *string `json:"reference_url,omitempty"`
	Refsource           *string `json:"refsource,omitempty"`
	RepoId              *string `json:"repo_id,omitempty"`
	Url                 *string `json:"url,omitempty"`
}

// ApiNormalizedReportV3Entry defines model for api.NormalizedReportV3Entry.
type ApiNormalizedReportV3Entry struct {
	DateAdded *string `json:"date_added,omitempty"`
	Name      *string `json:"name,omitempty"`
	Refsource *string `json:"refsource,omitempty"`
	Url       *string `json:"url,omitempty"`
}

// ApiOSSPackage defines model for api.OSSPackage.
type ApiOSSPackage struct {
	Artifacts          *ApiOSSPackageArtifacts          `json:"artifacts,omitempty"`
	Cves               *[]string                        `json:"cves,omitempty"`
	Licenses           *[]string                        `json:"licenses,omitempty"`
	Name               *string                          `json:"name,omitempty"`
	PublishedDate      *string                          `json:"published_date,omitempty"`
	Purl               *[]string                        `json:"purl,omitempty"`
	ResearchAttributes *ApiOSSPackageResearchAttributes `json:"research_attributes,omitempty"`
	Version            *string                          `json:"version,omitempty"`
	Vulnerabilities    *[]ApiOSSPackageVulnerability    `json:"vulnerabilities,omitempty"`
}

// ApiOSSPackageArtifacts defines model for api.OSSPackageArtifacts.
type ApiOSSPackageArtifacts struct {
	Binary *[]ApiOSSPackageDownloadInfo `json:"binary,omitempty"`
	Source *[]ApiOSSPackageDownloadInfo `json:"source,omitempty"`
}

// ApiOSSPackageDownloadInfo defines model for api.OSSPackageDownloadInfo.
type ApiOSSPackageDownloadInfo struct {
	Hashes    *[]ApiOSSPackageHashInfo `json:"hashes,omitempty"`
	Reference *string                  `json:"reference,omitempty"`

	// Type See OSSPackageDownloadInfoType* consts
	Type *string `json:"type,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ApiOSSPackageHashInfo defines model for api.OSSPackageHashInfo.
type ApiOSSPackageHashInfo struct {
	// Algorithm See OSSPackageHashInfoAlgo* consts
	Algorithm *string `json:"algorithm,omitempty"`

	// Type See OSSPackageHashInfoType* consts
	Type *string `json:"type,omitempty"`

	// Value hex string digest or link to hash
	Value *string `json:"value,omitempty"`
}

// ApiOSSPackageResearchAttributes defines model for api.OSSPackageResearchAttributes.
type ApiOSSPackageResearchAttributes struct {
	Abandoned       *bool   `json:"abandoned,omitempty"`
	Eol             *bool   `json:"eol,omitempty"`
	IsMalicious     *bool   `json:"is_malicious,omitempty"`
	MaliciousSource *string `json:"malicious_source,omitempty"`
	RepoHijackable  *bool   `json:"repo_hijackable,omitempty"`
	SquattedPackage *string `json:"squatted_package,omitempty"`
}

// ApiOSSPackageVulnerability defines model for api.OSSPackageVulnerability.
type ApiOSSPackageVulnerability struct {
	Detection    *string `json:"detection,omitempty"`
	FixedVersion *string `json:"fixed_version,omitempty"`
}

// ApiPackage defines model for api.Package.
type ApiPackage struct {
	Filename *string `json:"filename,omitempty"`

	// Name sort
	Name    *string `json:"name,omitempty"`
	Release *string `json:"release,omitempty"`
	Src     *string `json:"src,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ApiProblemType defines model for api.ProblemType.
type ApiProblemType struct {
	ProblemtypeData *[]ApiProblemTypeData `json:"problemtype_data,omitempty"`
}

// ApiProblemTypeData defines model for api.ProblemTypeData.
type ApiProblemTypeData struct {
	Description *[]ApiProblemTypeDescription `json:"description,omitempty"`
}

// ApiProblemTypeDataExtended defines model for api.ProblemTypeDataExtended.
type ApiProblemTypeDataExtended struct {
	Description *[]ApiProblemTypeDescriptionExtended `json:"description,omitempty"`
}

// ApiProblemTypeDescription defines model for api.ProblemTypeDescription.
type ApiProblemTypeDescription struct {
	Lang  *string `json:"lang,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiProblemTypeDescriptionExtended defines model for api.ProblemTypeDescriptionExtended.
type ApiProblemTypeDescriptionExtended struct {
	Lang  *string `json:"lang,omitempty"`
	Name  *string `json:"name,omitempty"`
	Url   *string `json:"url,omitempty"`
	Value *string `json:"value,omitempty"`
}

// ApiProblemTypeExtended defines model for api.ProblemTypeExtended.
type ApiProblemTypeExtended struct {
	ProblemtypeData *[]ApiProblemTypeDataExtended `json:"problemtype_data,omitempty"`
}

// ApiReference defines model for api.Reference.
type ApiReference struct {
	// Href sort
	Href  *string `json:"href,omitempty"`
	Id    *string `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// ApiReferenceData defines model for api.ReferenceData.
type ApiReferenceData struct {
	Name      *string   `json:"name,omitempty"`
	Refsource *string   `json:"refsource,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
	Url       *string   `json:"url,omitempty"`
}

// ApiReferenceDataExtended defines model for api.ReferenceDataExtended.
type ApiReferenceDataExtended struct {
	DateAdded   *string   `json:"date_added,omitempty"`
	ExternalId  *string   `json:"external_id,omitempty"`
	Lang        *string   `json:"lang,omitempty"`
	Name        *string   `json:"name,omitempty"`
	PreviousUrl *string   `json:"previous_url,omitempty"`
	Refsource   *string   `json:"refsource,omitempty"`
	Status      *string   `json:"status,omitempty"`
	Tags        *[]string `json:"tags,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// ApiReferences defines model for api.References.
type ApiReferences struct {
	ReferenceData *[]ApiReferenceData `json:"reference_data,omitempty"`
}

// ApiReferencesExtended defines model for api.ReferencesExtended.
type ApiReferencesExtended struct {
	// ReferenceData ExploitData     []NormalizedExploit       `json:"exploit_data,omitempty"`
	// 		ThreatActorData []ThreatActorExtended     `json:"threat_actor_data,omitempty"`
	// 		RansomwareData  []RansomwareReferenceData `json:"ransomware_data,omitempty"`
	// 		AdvisoryData    []AdvisoryExtended        `json:"advisory_data,omitempty"`
	// 		IdentifierData  []IdentifierExtended      `json:"identifier_data,omitempty"`
	ReferenceData *[]ApiReferenceDataExtended `json:"reference_data,omitempty"`
}

// ApiRelatedAttackPattern defines model for api.RelatedAttackPattern.
type ApiRelatedAttackPattern struct {
	CapecId   *string `json:"capec_id,omitempty"`
	CapecName *string `json:"capec_name,omitempty"`
	CapecUrl  *string `json:"capec_url,omitempty"`
	Lang      *string `json:"lang,omitempty"`
}

// ApiTemporalCVSSV2 defines model for api.TemporalCVSSV2.
type ApiTemporalCVSSV2 struct {
	Exploitability   *string  `json:"exploitability,omitempty"`
	RemediationLevel *string  `json:"remediationLevel,omitempty"`
	ReportConfidence *string  `json:"reportConfidence,omitempty"`
	TemporalScore    *float32 `json:"temporalScore,omitempty"`
	VectorString     *string  `json:"vectorString,omitempty"`
	Version          *string  `json:"version,omitempty"`
}

// ApiTemporalCVSSV3 defines model for api.TemporalCVSSV3.
type ApiTemporalCVSSV3 struct {
	ExploitCodeMaturity *string  `json:"exploitCodeMaturity,omitempty"`
	RemediationLevel    *string  `json:"remediationLevel,omitempty"`
	ReportConfidence    *string  `json:"reportConfidence,omitempty"`
	TemporalScore       *float32 `json:"temporalScore,omitempty"`
	VectorString        *string  `json:"vectorString,omitempty"`
	Version             *string  `json:"version,omitempty"`
}

// ApiTemporalMetricV2 defines model for api.TemporalMetricV2.
type ApiTemporalMetricV2 struct {
	CvssV2 *ApiTemporalCVSSV2 `json:"cvssV2,omitempty"`
}

// ApiTemporalMetricV3 defines model for api.TemporalMetricV3.
type ApiTemporalMetricV3 struct {
	CvssV3 *ApiTemporalCVSSV3 `json:"cvssV3,omitempty"`
}

// ApiUpdate defines model for api.Update.
type ApiUpdate struct {
	Cve         *[]string `json:"cve,omitempty"`
	DateAdded   *string   `json:"date_added,omitempty"`
	Description *string   `json:"description,omitempty"`

	// Id sort // key
	Id         *string         `json:"id,omitempty"`
	Issued     *ApiDateTime    `json:"issued,omitempty"`
	OsArch     *string         `json:"os_arch,omitempty"`
	OsVersion  *string         `json:"os_version,omitempty"`
	Packages   *[]ApiPackage   `json:"packages,omitempty"`
	References *[]ApiReference `json:"references,omitempty"`
	Severity   *string         `json:"severity,omitempty"`
	Title      *string         `json:"title,omitempty"`
	Type       *string         `json:"type,omitempty"`
	Updated    *ApiDateTime    `json:"updated,omitempty"`
}

// ApiVulnerabilityAlias defines model for api.VulnerabilityAlias.
type ApiVulnerabilityAlias struct {
	Alias        *string `json:"alias,omitempty"`
	Cve          *string `json:"cve,omitempty"`
	ReferenceUrl *string `json:"reference_url,omitempty"`
}

// FumeResponseAdvisoryA10PaginatePagination defines model for fume.Response-advisory_A10-paginate_Pagination.
type FumeResponseAdvisoryA10PaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryA10      `json:"data,omitempty"`
}

// FumeResponseAdvisoryABBAdvisoryPaginatePagination defines model for fume.Response-advisory_ABBAdvisory-paginate_Pagination.
type FumeResponseAdvisoryABBAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryABBAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryAMDPaginatePagination defines model for fume.Response-advisory_AMD-paginate_Pagination.
type FumeResponseAdvisoryAMDPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAMD      `json:"data,omitempty"`
}

// FumeResponseAdvisoryAMIPaginatePagination defines model for fume.Response-advisory_AMI-paginate_Pagination.
type FumeResponseAdvisoryAMIPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAMI      `json:"data,omitempty"`
}

// FumeResponseAdvisoryASRGPaginatePagination defines model for fume.Response-advisory_ASRG-paginate_Pagination.
type FumeResponseAdvisoryASRGPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryASRG     `json:"data,omitempty"`
}

// FumeResponseAdvisoryAVEVAAdvisoryPaginatePagination defines model for fume.Response-advisory_AVEVAAdvisory-paginate_Pagination.
type FumeResponseAdvisoryAVEVAAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAVEVAAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryAWSPaginatePagination defines model for fume.Response-advisory_AWS-paginate_Pagination.
type FumeResponseAdvisoryAWSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAWS      `json:"data,omitempty"`
}

// FumeResponseAdvisoryAbbottPaginatePagination defines model for fume.Response-advisory_Abbott-paginate_Pagination.
type FumeResponseAdvisoryAbbottPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAbbott   `json:"data,omitempty"`
}

// FumeResponseAdvisoryAbsolutePaginatePagination defines model for fume.Response-advisory_Absolute-paginate_Pagination.
type FumeResponseAdvisoryAbsolutePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAbsolute `json:"data,omitempty"`
}

// FumeResponseAdvisoryAcronisPaginatePagination defines model for fume.Response-advisory_Acronis-paginate_Pagination.
type FumeResponseAdvisoryAcronisPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAcronis  `json:"data,omitempty"`
}

// FumeResponseAdvisoryAdobeAdvisoryPaginatePagination defines model for fume.Response-advisory_AdobeAdvisory-paginate_Pagination.
type FumeResponseAdvisoryAdobeAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAdobeAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryAdvisoryPaginatePagination defines model for fume.Response-advisory_Advisory-paginate_Pagination.
type FumeResponseAdvisoryAdvisoryPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryAdvisoryRecordPaginatePagination defines model for fume.Response-advisory_AdvisoryRecord-paginate_Pagination.
type FumeResponseAdvisoryAdvisoryRecordPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryAdvisoryRecord `json:"data,omitempty"`
}

// FumeResponseAdvisoryAlephResearchPaginatePagination defines model for fume.Response-advisory_AlephResearch-paginate_Pagination.
type FumeResponseAdvisoryAlephResearchPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAlephResearch `json:"data,omitempty"`
}

// FumeResponseAdvisoryAlmaLinuxUpdatePaginatePagination defines model for fume.Response-advisory_AlmaLinuxUpdate-paginate_Pagination.
type FumeResponseAdvisoryAlmaLinuxUpdatePaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryAlmaLinuxUpdate `json:"data,omitempty"`
}

// FumeResponseAdvisoryAlpineLinuxSecDBPaginatePagination defines model for fume.Response-advisory_AlpineLinuxSecDB-paginate_Pagination.
type FumeResponseAdvisoryAlpineLinuxSecDBPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryAlpineLinuxSecDB `json:"data,omitempty"`
}

// FumeResponseAdvisoryAnchoreNVDOverridePaginatePagination defines model for fume.Response-advisory_AnchoreNVDOverride-paginate_Pagination.
type FumeResponseAdvisoryAnchoreNVDOverridePaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryAnchoreNVDOverride `json:"data,omitempty"`
}

// FumeResponseAdvisoryAndroidAdvisoryPaginatePagination defines model for fume.Response-advisory_AndroidAdvisory-paginate_Pagination.
type FumeResponseAdvisoryAndroidAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryAndroidAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheActiveMQPaginatePagination defines model for fume.Response-advisory_ApacheActiveMQ-paginate_Pagination.
type FumeResponseAdvisoryApacheActiveMQPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheActiveMQ `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheArchivaPaginatePagination defines model for fume.Response-advisory_ApacheArchiva-paginate_Pagination.
type FumeResponseAdvisoryApacheArchivaPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheArchiva `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheArrowPaginatePagination defines model for fume.Response-advisory_ApacheArrow-paginate_Pagination.
type FumeResponseAdvisoryApacheArrowPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheArrow `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheCamelPaginatePagination defines model for fume.Response-advisory_ApacheCamel-paginate_Pagination.
type FumeResponseAdvisoryApacheCamelPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheCamel `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheCommonsPaginatePagination defines model for fume.Response-advisory_ApacheCommons-paginate_Pagination.
type FumeResponseAdvisoryApacheCommonsPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheCommons `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheCouchDBPaginatePagination defines model for fume.Response-advisory_ApacheCouchDB-paginate_Pagination.
type FumeResponseAdvisoryApacheCouchDBPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheCouchDB `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheFlinkPaginatePagination defines model for fume.Response-advisory_ApacheFlink-paginate_Pagination.
type FumeResponseAdvisoryApacheFlinkPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheFlink `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheGuacamolePaginatePagination defines model for fume.Response-advisory_ApacheGuacamole-paginate_Pagination.
type FumeResponseAdvisoryApacheGuacamolePaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheGuacamole `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheHTTPPaginatePagination defines model for fume.Response-advisory_ApacheHTTP-paginate_Pagination.
type FumeResponseAdvisoryApacheHTTPPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheHTTP `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheHadoopPaginatePagination defines model for fume.Response-advisory_ApacheHadoop-paginate_Pagination.
type FumeResponseAdvisoryApacheHadoopPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheHadoop `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheJSPWikiPaginatePagination defines model for fume.Response-advisory_ApacheJSPWiki-paginate_Pagination.
type FumeResponseAdvisoryApacheJSPWikiPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheJSPWiki `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheKafkaPaginatePagination defines model for fume.Response-advisory_ApacheKafka-paginate_Pagination.
type FumeResponseAdvisoryApacheKafkaPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheKafka `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheLoggingServicesPaginatePagination defines model for fume.Response-advisory_ApacheLoggingServices-paginate_Pagination.
type FumeResponseAdvisoryApacheLoggingServicesPaginatePagination struct {
	Benchmark *float32                         `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination              `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheLoggingServices `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheNiFiPaginatePagination defines model for fume.Response-advisory_ApacheNiFi-paginate_Pagination.
type FumeResponseAdvisoryApacheNiFiPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheNiFi `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheOFBizPaginatePagination defines model for fume.Response-advisory_ApacheOFBiz-paginate_Pagination.
type FumeResponseAdvisoryApacheOFBizPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheOFBiz `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheOpenMeetingsPaginatePagination defines model for fume.Response-advisory_ApacheOpenMeetings-paginate_Pagination.
type FumeResponseAdvisoryApacheOpenMeetingsPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheOpenMeetings `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheOpenOfficePaginatePagination defines model for fume.Response-advisory_ApacheOpenOffice-paginate_Pagination.
type FumeResponseAdvisoryApacheOpenOfficePaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheOpenOffice `json:"data,omitempty"`
}

// FumeResponseAdvisoryApachePulsarPaginatePagination defines model for fume.Response-advisory_ApachePulsar-paginate_Pagination.
type FumeResponseAdvisoryApachePulsarPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApachePulsar `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheShiroPaginatePagination defines model for fume.Response-advisory_ApacheShiro-paginate_Pagination.
type FumeResponseAdvisoryApacheShiroPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheShiro `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheSparkPaginatePagination defines model for fume.Response-advisory_ApacheSpark-paginate_Pagination.
type FumeResponseAdvisoryApacheSparkPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheSpark `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheStrutsPaginatePagination defines model for fume.Response-advisory_ApacheStruts-paginate_Pagination.
type FumeResponseAdvisoryApacheStrutsPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheStruts `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheSubversionPaginatePagination defines model for fume.Response-advisory_ApacheSubversion-paginate_Pagination.
type FumeResponseAdvisoryApacheSubversionPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheSubversion `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheSupersetPaginatePagination defines model for fume.Response-advisory_ApacheSuperset-paginate_Pagination.
type FumeResponseAdvisoryApacheSupersetPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheSuperset `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheTomcatPaginatePagination defines model for fume.Response-advisory_ApacheTomcat-paginate_Pagination.
type FumeResponseAdvisoryApacheTomcatPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheTomcat `json:"data,omitempty"`
}

// FumeResponseAdvisoryApacheZooKeeperPaginatePagination defines model for fume.Response-advisory_ApacheZooKeeper-paginate_Pagination.
type FumeResponseAdvisoryApacheZooKeeperPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryApacheZooKeeper `json:"data,omitempty"`
}

// FumeResponseAdvisoryAppCheckPaginatePagination defines model for fume.Response-advisory_AppCheck-paginate_Pagination.
type FumeResponseAdvisoryAppCheckPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAppCheck `json:"data,omitempty"`
}

// FumeResponseAdvisoryAppgatePaginatePagination defines model for fume.Response-advisory_Appgate-paginate_Pagination.
type FumeResponseAdvisoryAppgatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAppgate  `json:"data,omitempty"`
}

// FumeResponseAdvisoryAppleAdvisoryPaginatePagination defines model for fume.Response-advisory_AppleAdvisory-paginate_Pagination.
type FumeResponseAdvisoryAppleAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAppleAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryArchIssuePaginatePagination defines model for fume.Response-advisory_ArchIssue-paginate_Pagination.
type FumeResponseAdvisoryArchIssuePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryArchIssue `json:"data,omitempty"`
}

// FumeResponseAdvisoryAristaPaginatePagination defines model for fume.Response-advisory_Arista-paginate_Pagination.
type FumeResponseAdvisoryAristaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryArista   `json:"data,omitempty"`
}

// FumeResponseAdvisoryArubaPaginatePagination defines model for fume.Response-advisory_Aruba-paginate_Pagination.
type FumeResponseAdvisoryArubaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAruba    `json:"data,omitempty"`
}

// FumeResponseAdvisoryAssetNotePaginatePagination defines model for fume.Response-advisory_AssetNote-paginate_Pagination.
type FumeResponseAdvisoryAssetNotePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryAssetNote `json:"data,omitempty"`
}

// FumeResponseAdvisoryAsteriskPaginatePagination defines model for fume.Response-advisory_Asterisk-paginate_Pagination.
type FumeResponseAdvisoryAsteriskPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAsterisk `json:"data,omitempty"`
}

// FumeResponseAdvisoryAsusPaginatePagination defines model for fume.Response-advisory_Asus-paginate_Pagination.
type FumeResponseAdvisoryAsusPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAsus     `json:"data,omitempty"`
}

// FumeResponseAdvisoryAtlassianAdvisoryPaginatePagination defines model for fume.Response-advisory_AtlassianAdvisory-paginate_Pagination.
type FumeResponseAdvisoryAtlassianAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryAtlassianAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryAtlassianVulnPaginatePagination defines model for fume.Response-advisory_AtlassianVuln-paginate_Pagination.
type FumeResponseAdvisoryAtlassianVulnPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryAtlassianVuln `json:"data,omitempty"`
}

// FumeResponseAdvisoryAtredisPaginatePagination defines model for fume.Response-advisory_Atredis-paginate_Pagination.
type FumeResponseAdvisoryAtredisPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAtredis  `json:"data,omitempty"`
}

// FumeResponseAdvisoryAusCertPaginatePagination defines model for fume.Response-advisory_AusCert-paginate_Pagination.
type FumeResponseAdvisoryAusCertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAusCert  `json:"data,omitempty"`
}

// FumeResponseAdvisoryAutodeskPaginatePagination defines model for fume.Response-advisory_Autodesk-paginate_Pagination.
type FumeResponseAdvisoryAutodeskPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAutodesk `json:"data,omitempty"`
}

// FumeResponseAdvisoryAvayaPaginatePagination defines model for fume.Response-advisory_Avaya-paginate_Pagination.
type FumeResponseAdvisoryAvayaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAvaya    `json:"data,omitempty"`
}

// FumeResponseAdvisoryAvigilonPaginatePagination defines model for fume.Response-advisory_Avigilon-paginate_Pagination.
type FumeResponseAdvisoryAvigilonPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAvigilon `json:"data,omitempty"`
}

// FumeResponseAdvisoryAxisPaginatePagination defines model for fume.Response-advisory_Axis-paginate_Pagination.
type FumeResponseAdvisoryAxisPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryAxis     `json:"data,omitempty"`
}

// FumeResponseAdvisoryBBraunAdvisoryPaginatePagination defines model for fume.Response-advisory_BBraunAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBBraunAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryBBraunAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBDUAdvisoryPaginatePagination defines model for fume.Response-advisory_BDUAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBDUAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryBDUAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBLSPaginatePagination defines model for fume.Response-advisory_BLS-paginate_Pagination.
type FumeResponseAdvisoryBLSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBLS      `json:"data,omitempty"`
}

// FumeResponseAdvisoryBandrPaginatePagination defines model for fume.Response-advisory_Bandr-paginate_Pagination.
type FumeResponseAdvisoryBandrPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBandr    `json:"data,omitempty"`
}

// FumeResponseAdvisoryBaxterAdvisoryPaginatePagination defines model for fume.Response-advisory_BaxterAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBaxterAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryBaxterAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBeckhoffAdvisoryPaginatePagination defines model for fume.Response-advisory_BeckhoffAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBeckhoffAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryBeckhoffAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBectonDickinsonAdvisoryPaginatePagination defines model for fume.Response-advisory_BectonDickinsonAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBectonDickinsonAdvisoryPaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryBectonDickinsonAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBeldenAdvisoryPaginatePagination defines model for fume.Response-advisory_BeldenAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBeldenAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryBeldenAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBeyondTrustPaginatePagination defines model for fume.Response-advisory_BeyondTrust-paginate_Pagination.
type FumeResponseAdvisoryBeyondTrustPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryBeyondTrust `json:"data,omitempty"`
}

// FumeResponseAdvisoryBinarlyPaginatePagination defines model for fume.Response-advisory_Binarly-paginate_Pagination.
type FumeResponseAdvisoryBinarlyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBinarly  `json:"data,omitempty"`
}

// FumeResponseAdvisoryBitDefenderPaginatePagination defines model for fume.Response-advisory_BitDefender-paginate_Pagination.
type FumeResponseAdvisoryBitDefenderPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryBitDefender `json:"data,omitempty"`
}

// FumeResponseAdvisoryBlackBerryPaginatePagination defines model for fume.Response-advisory_BlackBerry-paginate_Pagination.
type FumeResponseAdvisoryBlackBerryPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryBlackBerry `json:"data,omitempty"`
}

// FumeResponseAdvisoryBoschAdvisoryPaginatePagination defines model for fume.Response-advisory_BoschAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBoschAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryBoschAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBostonScientificAdvisoryPaginatePagination defines model for fume.Response-advisory_BostonScientificAdvisory-paginate_Pagination.
type FumeResponseAdvisoryBostonScientificAdvisoryPaginatePagination struct {
	Benchmark *float32                            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                 `json:"_meta,omitempty"`
	Data      *[]AdvisoryBostonScientificAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryBotnetPaginatePagination defines model for fume.Response-advisory_Botnet-paginate_Pagination.
type FumeResponseAdvisoryBotnetPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryBotnet   `json:"data,omitempty"`
}

// FumeResponseAdvisoryCACyberCentreAdvisoryPaginatePagination defines model for fume.Response-advisory_CACyberCentreAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCACyberCentreAdvisoryPaginatePagination struct {
	Benchmark *float32                         `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination              `json:"_meta,omitempty"`
	Data      *[]AdvisoryCACyberCentreAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCBLMarinerPaginatePagination defines model for fume.Response-advisory_CBLMariner-paginate_Pagination.
type FumeResponseAdvisoryCBLMarinerPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryCBLMariner `json:"data,omitempty"`
}

// FumeResponseAdvisoryCERTEUAdvisoryPaginatePagination defines model for fume.Response-advisory_CERTEUAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCERTEUAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCERTEUAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCESAPaginatePagination defines model for fume.Response-advisory_CESA-paginate_Pagination.
type FumeResponseAdvisoryCESAPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCESA     `json:"data,omitempty"`
}

// FumeResponseAdvisoryCISAAlertPaginatePagination defines model for fume.Response-advisory_CISAAlert-paginate_Pagination.
type FumeResponseAdvisoryCISAAlertPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryCISAAlert `json:"data,omitempty"`
}

// FumeResponseAdvisoryCNNVDEntryJSONPaginatePagination defines model for fume.Response-advisory_CNNVDEntryJSON-paginate_Pagination.
type FumeResponseAdvisoryCNNVDEntryJSONPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCNNVDEntryJSON `json:"data,omitempty"`
}

// FumeResponseAdvisoryCNVDBulletinPaginatePagination defines model for fume.Response-advisory_CNVDBulletin-paginate_Pagination.
type FumeResponseAdvisoryCNVDBulletinPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryCNVDBulletin `json:"data,omitempty"`
}

// FumeResponseAdvisoryCNVDFlawPaginatePagination defines model for fume.Response-advisory_CNVDFlaw-paginate_Pagination.
type FumeResponseAdvisoryCNVDFlawPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCNVDFlaw `json:"data,omitempty"`
}

// FumeResponseAdvisoryCanvasExploitPaginatePagination defines model for fume.Response-advisory_CanvasExploit-paginate_Pagination.
type FumeResponseAdvisoryCanvasExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryCanvasExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryCarestreamAdvisoryPaginatePagination defines model for fume.Response-advisory_CarestreamAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCarestreamAdvisoryPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryCarestreamAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCarrierPaginatePagination defines model for fume.Response-advisory_Carrier-paginate_Pagination.
type FumeResponseAdvisoryCarrierPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCarrier  `json:"data,omitempty"`
}

// FumeResponseAdvisoryCertBEPaginatePagination defines model for fume.Response-advisory_CertBE-paginate_Pagination.
type FumeResponseAdvisoryCertBEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertBE   `json:"data,omitempty"`
}

// FumeResponseAdvisoryCertFRAdvisoryPaginatePagination defines model for fume.Response-advisory_CertFRAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCertFRAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertFRAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCertUAPaginatePagination defines model for fume.Response-advisory_CertUA-paginate_Pagination.
type FumeResponseAdvisoryCertUAPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCertUA   `json:"data,omitempty"`
}

// FumeResponseAdvisoryChainGuardPaginatePagination defines model for fume.Response-advisory_ChainGuard-paginate_Pagination.
type FumeResponseAdvisoryChainGuardPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryChainGuard `json:"data,omitempty"`
}

// FumeResponseAdvisoryCheckPointPaginatePagination defines model for fume.Response-advisory_CheckPoint-paginate_Pagination.
type FumeResponseAdvisoryCheckPointPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryCheckPoint `json:"data,omitempty"`
}

// FumeResponseAdvisoryChromePaginatePagination defines model for fume.Response-advisory_Chrome-paginate_Pagination.
type FumeResponseAdvisoryChromePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryChrome   `json:"data,omitempty"`
}

// FumeResponseAdvisoryCiscoAdvisoryPaginatePagination defines model for fume.Response-advisory_CiscoAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCiscoAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryCiscoAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCitrixAdvisoryPaginatePagination defines model for fume.Response-advisory_CitrixAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCitrixAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryCitrixAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryClarotyVulnerabilityPaginatePagination defines model for fume.Response-advisory_ClarotyVulnerability-paginate_Pagination.
type FumeResponseAdvisoryClarotyVulnerabilityPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryClarotyVulnerability `json:"data,omitempty"`
}

// FumeResponseAdvisoryCloudBeesPaginatePagination defines model for fume.Response-advisory_CloudBees-paginate_Pagination.
type FumeResponseAdvisoryCloudBeesPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryCloudBees `json:"data,omitempty"`
}

// FumeResponseAdvisoryCloudVulnDBAdvisoryPaginatePagination defines model for fume.Response-advisory_CloudVulnDBAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCloudVulnDBAdvisoryPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryCloudVulnDBAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCodesysAdvisoryPaginatePagination defines model for fume.Response-advisory_CodesysAdvisory-paginate_Pagination.
type FumeResponseAdvisoryCodesysAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryCodesysAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryCompassSecurityPaginatePagination defines model for fume.Response-advisory_CompassSecurity-paginate_Pagination.
type FumeResponseAdvisoryCompassSecurityPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryCompassSecurity `json:"data,omitempty"`
}

// FumeResponseAdvisoryContainerOSPaginatePagination defines model for fume.Response-advisory_ContainerOS-paginate_Pagination.
type FumeResponseAdvisoryContainerOSPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryContainerOS `json:"data,omitempty"`
}

// FumeResponseAdvisoryCrestronPaginatePagination defines model for fume.Response-advisory_Crestron-paginate_Pagination.
type FumeResponseAdvisoryCrestronPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCrestron `json:"data,omitempty"`
}

// FumeResponseAdvisoryCurlPaginatePagination defines model for fume.Response-advisory_Curl-paginate_Pagination.
type FumeResponseAdvisoryCurlPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCurl     `json:"data,omitempty"`
}

// FumeResponseAdvisoryCvrfPaginatePagination defines model for fume.Response-advisory_Cvrf-paginate_Pagination.
type FumeResponseAdvisoryCvrfPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryCvrf     `json:"data,omitempty"`
}

// FumeResponseAdvisoryDahuaPaginatePagination defines model for fume.Response-advisory_Dahua-paginate_Pagination.
type FumeResponseAdvisoryDahuaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDahua    `json:"data,omitempty"`
}

// FumeResponseAdvisoryDassaultPaginatePagination defines model for fume.Response-advisory_Dassault-paginate_Pagination.
type FumeResponseAdvisoryDassaultPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDassault `json:"data,omitempty"`
}

// FumeResponseAdvisoryDebianSecurityAdvisoryPaginatePagination defines model for fume.Response-advisory_DebianSecurityAdvisory-paginate_Pagination.
type FumeResponseAdvisoryDebianSecurityAdvisoryPaginatePagination struct {
	Benchmark *float32                          `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination               `json:"_meta,omitempty"`
	Data      *[]AdvisoryDebianSecurityAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryDellPaginatePagination defines model for fume.Response-advisory_Dell-paginate_Pagination.
type FumeResponseAdvisoryDellPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDell     `json:"data,omitempty"`
}

// FumeResponseAdvisoryDeltaAdvisoryPaginatePagination defines model for fume.Response-advisory_DeltaAdvisory-paginate_Pagination.
type FumeResponseAdvisoryDeltaAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryDeltaAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryDotCMSPaginatePagination defines model for fume.Response-advisory_DotCMS-paginate_Pagination.
type FumeResponseAdvisoryDotCMSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDotCMS   `json:"data,omitempty"`
}

// FumeResponseAdvisoryDragosAdvisoryPaginatePagination defines model for fume.Response-advisory_DragosAdvisory-paginate_Pagination.
type FumeResponseAdvisoryDragosAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryDragosAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryDraytekPaginatePagination defines model for fume.Response-advisory_Draytek-paginate_Pagination.
type FumeResponseAdvisoryDraytekPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryDraytek  `json:"data,omitempty"`
}

// FumeResponseAdvisoryEOLReleaseDataPaginatePagination defines model for fume.Response-advisory_EOLReleaseData-paginate_Pagination.
type FumeResponseAdvisoryEOLReleaseDataPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryEOLReleaseData `json:"data,omitempty"`
}

// FumeResponseAdvisoryEatonAdvisoryPaginatePagination defines model for fume.Response-advisory_EatonAdvisory-paginate_Pagination.
type FumeResponseAdvisoryEatonAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryEatonAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryElasticPaginatePagination defines model for fume.Response-advisory_Elastic-paginate_Pagination.
type FumeResponseAdvisoryElasticPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryElastic  `json:"data,omitempty"`
}

// FumeResponseAdvisoryElspecPaginatePagination defines model for fume.Response-advisory_Elspec-paginate_Pagination.
type FumeResponseAdvisoryElspecPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryElspec   `json:"data,omitempty"`
}

// FumeResponseAdvisoryEmersonAdvisoryPaginatePagination defines model for fume.Response-advisory_EmersonAdvisory-paginate_Pagination.
type FumeResponseAdvisoryEmersonAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryEmersonAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryExodusIntelPaginatePagination defines model for fume.Response-advisory_ExodusIntel-paginate_Pagination.
type FumeResponseAdvisoryExodusIntelPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryExodusIntel `json:"data,omitempty"`
}

// FumeResponseAdvisoryExploitDBExploitv2PaginatePagination defines model for fume.Response-advisory_ExploitDBExploitv2-paginate_Pagination.
type FumeResponseAdvisoryExploitDBExploitv2PaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryExploitDBExploitv2 `json:"data,omitempty"`
}

// FumeResponseAdvisoryFSecurePaginatePagination defines model for fume.Response-advisory_FSecure-paginate_Pagination.
type FumeResponseAdvisoryFSecurePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryFSecure  `json:"data,omitempty"`
}

// FumeResponseAdvisoryFastlyPaginatePagination defines model for fume.Response-advisory_Fastly-paginate_Pagination.
type FumeResponseAdvisoryFastlyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryFastly   `json:"data,omitempty"`
}

// FumeResponseAdvisoryFileCloudPaginatePagination defines model for fume.Response-advisory_FileCloud-paginate_Pagination.
type FumeResponseAdvisoryFileCloudPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryFileCloud `json:"data,omitempty"`
}

// FumeResponseAdvisoryForgeRockPaginatePagination defines model for fume.Response-advisory_ForgeRock-paginate_Pagination.
type FumeResponseAdvisoryForgeRockPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryForgeRock `json:"data,omitempty"`
}

// FumeResponseAdvisoryFortinetAdvisoryPaginatePagination defines model for fume.Response-advisory_FortinetAdvisory-paginate_Pagination.
type FumeResponseAdvisoryFortinetAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryFortinetAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryGCPPaginatePagination defines model for fume.Response-advisory_GCP-paginate_Pagination.
type FumeResponseAdvisoryGCPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGCP      `json:"data,omitempty"`
}

// FumeResponseAdvisoryGEGasPaginatePagination defines model for fume.Response-advisory_GEGas-paginate_Pagination.
type FumeResponseAdvisoryGEGasPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGEGas    `json:"data,omitempty"`
}

// FumeResponseAdvisoryGEHealthcareAdvisoryPaginatePagination defines model for fume.Response-advisory_GEHealthcareAdvisory-paginate_Pagination.
type FumeResponseAdvisoryGEHealthcareAdvisoryPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryGEHealthcareAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryGHAdvisoryJSONLeanPaginatePagination defines model for fume.Response-advisory_GHAdvisoryJSONLean-paginate_Pagination.
type FumeResponseAdvisoryGHAdvisoryJSONLeanPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryGHAdvisoryJSONLean `json:"data,omitempty"`
}

// FumeResponseAdvisoryGallagherPaginatePagination defines model for fume.Response-advisory_Gallagher-paginate_Pagination.
type FumeResponseAdvisoryGallagherPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryGallagher `json:"data,omitempty"`
}

// FumeResponseAdvisoryGenetecPaginatePagination defines model for fume.Response-advisory_Genetec-paginate_Pagination.
type FumeResponseAdvisoryGenetecPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGenetec  `json:"data,omitempty"`
}

// FumeResponseAdvisoryGigabytePaginatePagination defines model for fume.Response-advisory_Gigabyte-paginate_Pagination.
type FumeResponseAdvisoryGigabytePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGigabyte `json:"data,omitempty"`
}

// FumeResponseAdvisoryGitHubExploitPaginatePagination defines model for fume.Response-advisory_GitHubExploit-paginate_Pagination.
type FumeResponseAdvisoryGitHubExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryGitHubExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryGitLabExploitPaginatePagination defines model for fume.Response-advisory_GitLabExploit-paginate_Pagination.
type FumeResponseAdvisoryGitLabExploitPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryGitLabExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryGiteeExploitPaginatePagination defines model for fume.Response-advisory_GiteeExploit-paginate_Pagination.
type FumeResponseAdvisoryGiteeExploitPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryGiteeExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryGitlabAdvisoryPaginatePagination defines model for fume.Response-advisory_GitlabAdvisory-paginate_Pagination.
type FumeResponseAdvisoryGitlabAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryGitlabAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryGnuTLSPaginatePagination defines model for fume.Response-advisory_GnuTLS-paginate_Pagination.
type FumeResponseAdvisoryGnuTLSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGnuTLS   `json:"data,omitempty"`
}

// FumeResponseAdvisoryGrafanaPaginatePagination defines model for fume.Response-advisory_Grafana-paginate_Pagination.
type FumeResponseAdvisoryGrafanaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryGrafana  `json:"data,omitempty"`
}

// FumeResponseAdvisoryGreyNoiseDetectionPaginatePagination defines model for fume.Response-advisory_GreyNoiseDetection-paginate_Pagination.
type FumeResponseAdvisoryGreyNoiseDetectionPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisoryGreyNoiseDetection `json:"data,omitempty"`
}

// FumeResponseAdvisoryHCLPaginatePagination defines model for fume.Response-advisory_HCL-paginate_Pagination.
type FumeResponseAdvisoryHCLPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHCL      `json:"data,omitempty"`
}

// FumeResponseAdvisoryHIKVisionPaginatePagination defines model for fume.Response-advisory_HIKVision-paginate_Pagination.
type FumeResponseAdvisoryHIKVisionPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHIKVision `json:"data,omitempty"`
}

// FumeResponseAdvisoryHKCertPaginatePagination defines model for fume.Response-advisory_HKCert-paginate_Pagination.
type FumeResponseAdvisoryHKCertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHKCert   `json:"data,omitempty"`
}

// FumeResponseAdvisoryHPPaginatePagination defines model for fume.Response-advisory_HP-paginate_Pagination.
type FumeResponseAdvisoryHPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHP       `json:"data,omitempty"`
}

// FumeResponseAdvisoryHarmonyOSPaginatePagination defines model for fume.Response-advisory_HarmonyOS-paginate_Pagination.
type FumeResponseAdvisoryHarmonyOSPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHarmonyOS `json:"data,omitempty"`
}

// FumeResponseAdvisoryHashiCorpPaginatePagination defines model for fume.Response-advisory_HashiCorp-paginate_Pagination.
type FumeResponseAdvisoryHashiCorpPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHashiCorp `json:"data,omitempty"`
}

// FumeResponseAdvisoryHaskellSADBAdvisoryPaginatePagination defines model for fume.Response-advisory_HaskellSADBAdvisory-paginate_Pagination.
type FumeResponseAdvisoryHaskellSADBAdvisoryPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryHaskellSADBAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryHillromAdvisoryPaginatePagination defines model for fume.Response-advisory_HillromAdvisory-paginate_Pagination.
type FumeResponseAdvisoryHillromAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryHillromAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryHitachiPaginatePagination defines model for fume.Response-advisory_Hitachi-paginate_Pagination.
type FumeResponseAdvisoryHitachiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHitachi  `json:"data,omitempty"`
}

// FumeResponseAdvisoryHitachiEnergyPaginatePagination defines model for fume.Response-advisory_HitachiEnergy-paginate_Pagination.
type FumeResponseAdvisoryHitachiEnergyPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryHitachiEnergy `json:"data,omitempty"`
}

// FumeResponseAdvisoryHoneywellPaginatePagination defines model for fume.Response-advisory_Honeywell-paginate_Pagination.
type FumeResponseAdvisoryHoneywellPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHoneywell `json:"data,omitempty"`
}

// FumeResponseAdvisoryHuaweiPaginatePagination defines model for fume.Response-advisory_Huawei-paginate_Pagination.
type FumeResponseAdvisoryHuaweiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryHuawei   `json:"data,omitempty"`
}

// FumeResponseAdvisoryHuaweiEulerOSPaginatePagination defines model for fume.Response-advisory_HuaweiEulerOS-paginate_Pagination.
type FumeResponseAdvisoryHuaweiEulerOSPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryHuaweiEulerOS `json:"data,omitempty"`
}

// FumeResponseAdvisoryHuaweiIPSPaginatePagination defines model for fume.Response-advisory_HuaweiIPS-paginate_Pagination.
type FumeResponseAdvisoryHuaweiIPSPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryHuaweiIPS `json:"data,omitempty"`
}

// FumeResponseAdvisoryIAVAPaginatePagination defines model for fume.Response-advisory_IAVA-paginate_Pagination.
type FumeResponseAdvisoryIAVAPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIAVA     `json:"data,omitempty"`
}

// FumeResponseAdvisoryIBMPaginatePagination defines model for fume.Response-advisory_IBM-paginate_Pagination.
type FumeResponseAdvisoryIBMPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIBM      `json:"data,omitempty"`
}

// FumeResponseAdvisoryITWExploitPaginatePagination defines model for fume.Response-advisory_ITWExploit-paginate_Pagination.
type FumeResponseAdvisoryITWExploitPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryITWExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryIdemiaPaginatePagination defines model for fume.Response-advisory_Idemia-paginate_Pagination.
type FumeResponseAdvisoryIdemiaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIdemia   `json:"data,omitempty"`
}

// FumeResponseAdvisoryIncibeAdvisoryPaginatePagination defines model for fume.Response-advisory_IncibeAdvisory-paginate_Pagination.
type FumeResponseAdvisoryIncibeAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryIncibeAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryIntelPaginatePagination defines model for fume.Response-advisory_Intel-paginate_Pagination.
type FumeResponseAdvisoryIntelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIntel    `json:"data,omitempty"`
}

// FumeResponseAdvisoryIpIntelRecordPaginatePagination defines model for fume.Response-advisory_IpIntelRecord-paginate_Pagination.
type FumeResponseAdvisoryIpIntelRecordPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryIpIntelRecord `json:"data,omitempty"`
}

// FumeResponseAdvisoryIsraeliAlertPaginatePagination defines model for fume.Response-advisory_IsraeliAlert-paginate_Pagination.
type FumeResponseAdvisoryIsraeliAlertPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryIsraeliAlert `json:"data,omitempty"`
}

// FumeResponseAdvisoryIsraeliVulnerabilityPaginatePagination defines model for fume.Response-advisory_IsraeliVulnerability-paginate_Pagination.
type FumeResponseAdvisoryIsraeliVulnerabilityPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryIsraeliVulnerability `json:"data,omitempty"`
}

// FumeResponseAdvisoryIstioPaginatePagination defines model for fume.Response-advisory_Istio-paginate_Pagination.
type FumeResponseAdvisoryIstioPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIstio    `json:"data,omitempty"`
}

// FumeResponseAdvisoryIvantiPaginatePagination defines model for fume.Response-advisory_Ivanti-paginate_Pagination.
type FumeResponseAdvisoryIvantiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryIvanti   `json:"data,omitempty"`
}

// FumeResponseAdvisoryIvantiRSSPaginatePagination defines model for fume.Response-advisory_IvantiRSS-paginate_Pagination.
type FumeResponseAdvisoryIvantiRSSPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryIvantiRSS `json:"data,omitempty"`
}

// FumeResponseAdvisoryJFrogPaginatePagination defines model for fume.Response-advisory_JFrog-paginate_Pagination.
type FumeResponseAdvisoryJFrogPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryJFrog    `json:"data,omitempty"`
}

// FumeResponseAdvisoryJNJAdvisoryPaginatePagination defines model for fume.Response-advisory_JNJAdvisory-paginate_Pagination.
type FumeResponseAdvisoryJNJAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryJNJAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryJVNAdvisoryItemPaginatePagination defines model for fume.Response-advisory_JVNAdvisoryItem-paginate_Pagination.
type FumeResponseAdvisoryJVNAdvisoryItemPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryJVNAdvisoryItem `json:"data,omitempty"`
}

// FumeResponseAdvisoryJenkinsPaginatePagination defines model for fume.Response-advisory_Jenkins-paginate_Pagination.
type FumeResponseAdvisoryJenkinsPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryJenkins  `json:"data,omitempty"`
}

// FumeResponseAdvisoryJetBrainsPaginatePagination defines model for fume.Response-advisory_JetBrains-paginate_Pagination.
type FumeResponseAdvisoryJetBrainsPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryJetBrains `json:"data,omitempty"`
}

// FumeResponseAdvisoryK8SPaginatePagination defines model for fume.Response-advisory_K8S-paginate_Pagination.
type FumeResponseAdvisoryK8SPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryK8S      `json:"data,omitempty"`
}

// FumeResponseAdvisoryKEVCatalogVulnerabilityPaginatePagination defines model for fume.Response-advisory_KEVCatalogVulnerability-paginate_Pagination.
type FumeResponseAdvisoryKEVCatalogVulnerabilityPaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryKEVCatalogVulnerability `json:"data,omitempty"`
}

// FumeResponseAdvisoryKRCertAdvisoryPaginatePagination defines model for fume.Response-advisory_KRCertAdvisory-paginate_Pagination.
type FumeResponseAdvisoryKRCertAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryKRCertAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryKasperskyICSCERTAdvisoryPaginatePagination defines model for fume.Response-advisory_KasperskyICSCERTAdvisory-paginate_Pagination.
type FumeResponseAdvisoryKasperskyICSCERTAdvisoryPaginatePagination struct {
	Benchmark *float32                            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                 `json:"_meta,omitempty"`
	Data      *[]AdvisoryKasperskyICSCERTAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryLGPaginatePagination defines model for fume.Response-advisory_LG-paginate_Pagination.
type FumeResponseAdvisoryLGPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryLG       `json:"data,omitempty"`
}

// FumeResponseAdvisoryLenovoPaginatePagination defines model for fume.Response-advisory_Lenovo-paginate_Pagination.
type FumeResponseAdvisoryLenovoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryLenovo   `json:"data,omitempty"`
}

// FumeResponseAdvisoryLexmarkAdvisoryPaginatePagination defines model for fume.Response-advisory_LexmarkAdvisory-paginate_Pagination.
type FumeResponseAdvisoryLexmarkAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryLexmarkAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryLibreOfficePaginatePagination defines model for fume.Response-advisory_LibreOffice-paginate_Pagination.
type FumeResponseAdvisoryLibreOfficePaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryLibreOffice `json:"data,omitempty"`
}

// FumeResponseAdvisoryLinuxPaginatePagination defines model for fume.Response-advisory_Linux-paginate_Pagination.
type FumeResponseAdvisoryLinuxPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryLinux    `json:"data,omitempty"`
}

// FumeResponseAdvisoryMACertPaginatePagination defines model for fume.Response-advisory_MACert-paginate_Pagination.
type FumeResponseAdvisoryMACertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMACert   `json:"data,omitempty"`
}

// FumeResponseAdvisoryMFilesPaginatePagination defines model for fume.Response-advisory_MFiles-paginate_Pagination.
type FumeResponseAdvisoryMFilesPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMFiles   `json:"data,omitempty"`
}

// FumeResponseAdvisoryManageEngineAdvisoryPaginatePagination defines model for fume.Response-advisory_ManageEngineAdvisory-paginate_Pagination.
type FumeResponseAdvisoryManageEngineAdvisoryPaginatePagination struct {
	Benchmark *float32                        `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination             `json:"_meta,omitempty"`
	Data      *[]AdvisoryManageEngineAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryMbedTLSPaginatePagination defines model for fume.Response-advisory_MbedTLS-paginate_Pagination.
type FumeResponseAdvisoryMbedTLSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMbedTLS  `json:"data,omitempty"`
}

// FumeResponseAdvisoryMediatekPaginatePagination defines model for fume.Response-advisory_Mediatek-paginate_Pagination.
type FumeResponseAdvisoryMediatekPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMediatek `json:"data,omitempty"`
}

// FumeResponseAdvisoryMedtronicAdvisoryPaginatePagination defines model for fume.Response-advisory_MedtronicAdvisory-paginate_Pagination.
type FumeResponseAdvisoryMedtronicAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryMedtronicAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryMendixPaginatePagination defines model for fume.Response-advisory_Mendix-paginate_Pagination.
type FumeResponseAdvisoryMendixPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMendix   `json:"data,omitempty"`
}

// FumeResponseAdvisoryMetaDataPaginatePagination defines model for fume.Response-advisory_MetaData-paginate_Pagination.
type FumeResponseAdvisoryMetaDataPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMetaData `json:"data,omitempty"`
}

// FumeResponseAdvisoryMetasploitExploitPaginatePagination defines model for fume.Response-advisory_MetasploitExploit-paginate_Pagination.
type FumeResponseAdvisoryMetasploitExploitPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryMetasploitExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryMicrosoftCVRFPaginatePagination defines model for fume.Response-advisory_MicrosoftCVRF-paginate_Pagination.
type FumeResponseAdvisoryMicrosoftCVRFPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryMicrosoftCVRF `json:"data,omitempty"`
}

// FumeResponseAdvisoryMicrosoftKbPaginatePagination defines model for fume.Response-advisory_MicrosoftKb-paginate_Pagination.
type FumeResponseAdvisoryMicrosoftKbPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryMicrosoftKb `json:"data,omitempty"`
}

// FumeResponseAdvisoryMikrotikPaginatePagination defines model for fume.Response-advisory_Mikrotik-paginate_Pagination.
type FumeResponseAdvisoryMikrotikPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMikrotik `json:"data,omitempty"`
}

// FumeResponseAdvisoryMindrayPaginatePagination defines model for fume.Response-advisory_Mindray-paginate_Pagination.
type FumeResponseAdvisoryMindrayPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMindray  `json:"data,omitempty"`
}

// FumeResponseAdvisoryMispValuePaginatePagination defines model for fume.Response-advisory_MispValue-paginate_Pagination.
type FumeResponseAdvisoryMispValuePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryMispValue `json:"data,omitempty"`
}

// FumeResponseAdvisoryMitelPaginatePagination defines model for fume.Response-advisory_Mitel-paginate_Pagination.
type FumeResponseAdvisoryMitelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMitel    `json:"data,omitempty"`
}

// FumeResponseAdvisoryMitreCVEPaginatePagination defines model for fume.Response-advisory_MitreCVE-paginate_Pagination.
type FumeResponseAdvisoryMitreCVEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMitreCVE `json:"data,omitempty"`
}

// FumeResponseAdvisoryMitsubishiElectricAdvisoryPaginatePagination defines model for fume.Response-advisory_MitsubishiElectricAdvisory-paginate_Pagination.
type FumeResponseAdvisoryMitsubishiElectricAdvisoryPaginatePagination struct {
	Benchmark *float32                              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                   `json:"_meta,omitempty"`
	Data      *[]AdvisoryMitsubishiElectricAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryMongoDBPaginatePagination defines model for fume.Response-advisory_MongoDB-paginate_Pagination.
type FumeResponseAdvisoryMongoDBPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryMongoDB  `json:"data,omitempty"`
}

// FumeResponseAdvisoryMoxaAdvisoryPaginatePagination defines model for fume.Response-advisory_MoxaAdvisory-paginate_Pagination.
type FumeResponseAdvisoryMoxaAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryMoxaAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryMozillaAdvisoryPaginatePagination defines model for fume.Response-advisory_MozillaAdvisory-paginate_Pagination.
type FumeResponseAdvisoryMozillaAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryMozillaAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryNECPaginatePagination defines model for fume.Response-advisory_NEC-paginate_Pagination.
type FumeResponseAdvisoryNECPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNEC      `json:"data,omitempty"`
}

// FumeResponseAdvisoryNHSPaginatePagination defines model for fume.Response-advisory_NHS-paginate_Pagination.
type FumeResponseAdvisoryNHSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNHS      `json:"data,omitempty"`
}

// FumeResponseAdvisoryNIPaginatePagination defines model for fume.Response-advisory_NI-paginate_Pagination.
type FumeResponseAdvisoryNIPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNI       `json:"data,omitempty"`
}

// FumeResponseAdvisoryNZAdvisoryPaginatePagination defines model for fume.Response-advisory_NZAdvisory-paginate_Pagination.
type FumeResponseAdvisoryNZAdvisoryPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryNZAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryNaverPaginatePagination defines model for fume.Response-advisory_Naver-paginate_Pagination.
type FumeResponseAdvisoryNaverPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNaver    `json:"data,omitempty"`
}

// FumeResponseAdvisoryNetAppPaginatePagination defines model for fume.Response-advisory_NetApp-paginate_Pagination.
type FumeResponseAdvisoryNetAppPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetApp   `json:"data,omitempty"`
}

// FumeResponseAdvisoryNetgatePaginatePagination defines model for fume.Response-advisory_Netgate-paginate_Pagination.
type FumeResponseAdvisoryNetgatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetgate  `json:"data,omitempty"`
}

// FumeResponseAdvisoryNetgearPaginatePagination defines model for fume.Response-advisory_Netgear-paginate_Pagination.
type FumeResponseAdvisoryNetgearPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetgear  `json:"data,omitempty"`
}

// FumeResponseAdvisoryNetskopePaginatePagination defines model for fume.Response-advisory_Netskope-paginate_Pagination.
type FumeResponseAdvisoryNetskopePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNetskope `json:"data,omitempty"`
}

// FumeResponseAdvisoryNginxAdvisoryPaginatePagination defines model for fume.Response-advisory_NginxAdvisory-paginate_Pagination.
type FumeResponseAdvisoryNginxAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryNginxAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryNodeJSPaginatePagination defines model for fume.Response-advisory_NodeJS-paginate_Pagination.
type FumeResponseAdvisoryNodeJSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNodeJS   `json:"data,omitempty"`
}

// FumeResponseAdvisoryNodeSecurityPaginatePagination defines model for fume.Response-advisory_NodeSecurity-paginate_Pagination.
type FumeResponseAdvisoryNodeSecurityPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryNodeSecurity `json:"data,omitempty"`
}

// FumeResponseAdvisoryNokiaPaginatePagination defines model for fume.Response-advisory_Nokia-paginate_Pagination.
type FumeResponseAdvisoryNokiaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNokia    `json:"data,omitempty"`
}

// FumeResponseAdvisoryNozomiPaginatePagination defines model for fume.Response-advisory_Nozomi-paginate_Pagination.
type FumeResponseAdvisoryNozomiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryNozomi   `json:"data,omitempty"`
}

// FumeResponseAdvisoryOSVPaginatePagination defines model for fume.Response-advisory_OSV-paginate_Pagination.
type FumeResponseAdvisoryOSVPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOSV      `json:"data,omitempty"`
}

// FumeResponseAdvisoryOTRSPaginatePagination defines model for fume.Response-advisory_OTRS-paginate_Pagination.
type FumeResponseAdvisoryOTRSPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOTRS     `json:"data,omitempty"`
}

// FumeResponseAdvisoryOctopusDeployPaginatePagination defines model for fume.Response-advisory_OctopusDeploy-paginate_Pagination.
type FumeResponseAdvisoryOctopusDeployPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryOctopusDeploy `json:"data,omitempty"`
}

// FumeResponseAdvisoryOktaPaginatePagination defines model for fume.Response-advisory_Okta-paginate_Pagination.
type FumeResponseAdvisoryOktaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOkta     `json:"data,omitempty"`
}

// FumeResponseAdvisoryOmronPaginatePagination defines model for fume.Response-advisory_Omron-paginate_Pagination.
type FumeResponseAdvisoryOmronPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOmron    `json:"data,omitempty"`
}

// FumeResponseAdvisoryOneEPaginatePagination defines model for fume.Response-advisory_OneE-paginate_Pagination.
type FumeResponseAdvisoryOneEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOneE     `json:"data,omitempty"`
}

// FumeResponseAdvisoryOpenBSDPaginatePagination defines model for fume.Response-advisory_OpenBSD-paginate_Pagination.
type FumeResponseAdvisoryOpenBSDPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenBSD  `json:"data,omitempty"`
}

// FumeResponseAdvisoryOpenCVDBPaginatePagination defines model for fume.Response-advisory_OpenCVDB-paginate_Pagination.
type FumeResponseAdvisoryOpenCVDBPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenCVDB `json:"data,omitempty"`
}

// FumeResponseAdvisoryOpenSSHPaginatePagination defines model for fume.Response-advisory_OpenSSH-paginate_Pagination.
type FumeResponseAdvisoryOpenSSHPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenSSH  `json:"data,omitempty"`
}

// FumeResponseAdvisoryOpenSSLSecAdvPaginatePagination defines model for fume.Response-advisory_OpenSSLSecAdv-paginate_Pagination.
type FumeResponseAdvisoryOpenSSLSecAdvPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenSSLSecAdv `json:"data,omitempty"`
}

// FumeResponseAdvisoryOpenStackPaginatePagination defines model for fume.Response-advisory_OpenStack-paginate_Pagination.
type FumeResponseAdvisoryOpenStackPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryOpenStack `json:"data,omitempty"`
}

// FumeResponseAdvisoryOracleCPUPaginatePagination defines model for fume.Response-advisory_OracleCPU-paginate_Pagination.
type FumeResponseAdvisoryOracleCPUPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryOracleCPU `json:"data,omitempty"`
}

// FumeResponseAdvisoryOracleCPUCSAFPaginatePagination defines model for fume.Response-advisory_OracleCPUCSAF-paginate_Pagination.
type FumeResponseAdvisoryOracleCPUCSAFPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryOracleCPUCSAF `json:"data,omitempty"`
}

// FumeResponseAdvisoryOwnCloudPaginatePagination defines model for fume.Response-advisory_OwnCloud-paginate_Pagination.
type FumeResponseAdvisoryOwnCloudPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryOwnCloud `json:"data,omitempty"`
}

// FumeResponseAdvisoryPalantirPaginatePagination defines model for fume.Response-advisory_Palantir-paginate_Pagination.
type FumeResponseAdvisoryPalantirPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPalantir `json:"data,omitempty"`
}

// FumeResponseAdvisoryPaloAltoAdvisoryPaginatePagination defines model for fume.Response-advisory_PaloAltoAdvisory-paginate_Pagination.
type FumeResponseAdvisoryPaloAltoAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryPaloAltoAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryPanasonicPaginatePagination defines model for fume.Response-advisory_Panasonic-paginate_Pagination.
type FumeResponseAdvisoryPanasonicPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryPanasonic `json:"data,omitempty"`
}

// FumeResponseAdvisoryPaperCutPaginatePagination defines model for fume.Response-advisory_PaperCut-paginate_Pagination.
type FumeResponseAdvisoryPaperCutPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPaperCut `json:"data,omitempty"`
}

// FumeResponseAdvisoryPegaPaginatePagination defines model for fume.Response-advisory_Pega-paginate_Pagination.
type FumeResponseAdvisoryPegaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryPega     `json:"data,omitempty"`
}

// FumeResponseAdvisoryPhilipsAdvisoryPaginatePagination defines model for fume.Response-advisory_PhilipsAdvisory-paginate_Pagination.
type FumeResponseAdvisoryPhilipsAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryPhilipsAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryPhoenixContactAdvisoryPaginatePagination defines model for fume.Response-advisory_PhoenixContactAdvisory-paginate_Pagination.
type FumeResponseAdvisoryPhoenixContactAdvisoryPaginatePagination struct {
	Benchmark *float32                          `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination               `json:"_meta,omitempty"`
	Data      *[]AdvisoryPhoenixContactAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryPostgresSQLPaginatePagination defines model for fume.Response-advisory_PostgresSQL-paginate_Pagination.
type FumeResponseAdvisoryPostgresSQLPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryPostgresSQL `json:"data,omitempty"`
}

// FumeResponseAdvisoryProgressPaginatePagination defines model for fume.Response-advisory_Progress-paginate_Pagination.
type FumeResponseAdvisoryProgressPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryProgress `json:"data,omitempty"`
}

// FumeResponseAdvisoryProofpointPaginatePagination defines model for fume.Response-advisory_Proofpoint-paginate_Pagination.
type FumeResponseAdvisoryProofpointPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryProofpoint `json:"data,omitempty"`
}

// FumeResponseAdvisoryPureStoragePaginatePagination defines model for fume.Response-advisory_PureStorage-paginate_Pagination.
type FumeResponseAdvisoryPureStoragePaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryPureStorage `json:"data,omitempty"`
}

// FumeResponseAdvisoryPyPAAdvisoryPaginatePagination defines model for fume.Response-advisory_PyPAAdvisory-paginate_Pagination.
type FumeResponseAdvisoryPyPAAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryPyPAAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryQNAPAdvisoryPaginatePagination defines model for fume.Response-advisory_QNAPAdvisory-paginate_Pagination.
type FumeResponseAdvisoryQNAPAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryQNAPAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryQualcommPaginatePagination defines model for fume.Response-advisory_Qualcomm-paginate_Pagination.
type FumeResponseAdvisoryQualcommPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryQualcomm `json:"data,omitempty"`
}

// FumeResponseAdvisoryQualysPaginatePagination defines model for fume.Response-advisory_Qualys-paginate_Pagination.
type FumeResponseAdvisoryQualysPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryQualys   `json:"data,omitempty"`
}

// FumeResponseAdvisoryRansomwareExploitPaginatePagination defines model for fume.Response-advisory_RansomwareExploit-paginate_Pagination.
type FumeResponseAdvisoryRansomwareExploitPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryRansomwareExploit `json:"data,omitempty"`
}

// FumeResponseAdvisoryRedhatCVEPaginatePagination defines model for fume.Response-advisory_RedhatCVE-paginate_Pagination.
type FumeResponseAdvisoryRedhatCVEPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryRedhatCVE `json:"data,omitempty"`
}

// FumeResponseAdvisoryRenesasPaginatePagination defines model for fume.Response-advisory_Renesas-paginate_Pagination.
type FumeResponseAdvisoryRenesasPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRenesas  `json:"data,omitempty"`
}

// FumeResponseAdvisoryRevivePaginatePagination defines model for fume.Response-advisory_Revive-paginate_Pagination.
type FumeResponseAdvisoryRevivePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRevive   `json:"data,omitempty"`
}

// FumeResponseAdvisoryRockwellPaginatePagination defines model for fume.Response-advisory_Rockwell-paginate_Pagination.
type FumeResponseAdvisoryRockwellPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRockwell `json:"data,omitempty"`
}

// FumeResponseAdvisoryRuckusPaginatePagination defines model for fume.Response-advisory_Ruckus-paginate_Pagination.
type FumeResponseAdvisoryRuckusPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryRuckus   `json:"data,omitempty"`
}

// FumeResponseAdvisoryRustsecAdvisoryPaginatePagination defines model for fume.Response-advisory_RustsecAdvisory-paginate_Pagination.
type FumeResponseAdvisoryRustsecAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryRustsecAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySAAdvisoryPaginatePagination defines model for fume.Response-advisory_SAAdvisory-paginate_Pagination.
type FumeResponseAdvisorySAAdvisoryPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySAAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySAPPaginatePagination defines model for fume.Response-advisory_SAP-paginate_Pagination.
type FumeResponseAdvisorySAPPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySAP      `json:"data,omitempty"`
}

// FumeResponseAdvisorySECConsultPaginatePagination defines model for fume.Response-advisory_SECConsult-paginate_Pagination.
type FumeResponseAdvisorySECConsultPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySECConsult `json:"data,omitempty"`
}

// FumeResponseAdvisorySSDAdvisoryPaginatePagination defines model for fume.Response-advisory_SSDAdvisory-paginate_Pagination.
type FumeResponseAdvisorySSDAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisorySSDAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySaintExploitPaginatePagination defines model for fume.Response-advisory_SaintExploit-paginate_Pagination.
type FumeResponseAdvisorySaintExploitPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisorySaintExploit `json:"data,omitempty"`
}

// FumeResponseAdvisorySalesForcePaginatePagination defines model for fume.Response-advisory_SalesForce-paginate_Pagination.
type FumeResponseAdvisorySalesForcePaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySalesForce `json:"data,omitempty"`
}

// FumeResponseAdvisorySambaPaginatePagination defines model for fume.Response-advisory_Samba-paginate_Pagination.
type FumeResponseAdvisorySambaPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySamba    `json:"data,omitempty"`
}

// FumeResponseAdvisorySchneiderElectricAdvisoryPaginatePagination defines model for fume.Response-advisory_SchneiderElectricAdvisory-paginate_Pagination.
type FumeResponseAdvisorySchneiderElectricAdvisoryPaginatePagination struct {
	Benchmark *float32                             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                  `json:"_meta,omitempty"`
	Data      *[]AdvisorySchneiderElectricAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySecurityBulletinPaginatePagination defines model for fume.Response-advisory_SecurityBulletin-paginate_Pagination.
type FumeResponseAdvisorySecurityBulletinPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisorySecurityBulletin `json:"data,omitempty"`
}

// FumeResponseAdvisorySelPaginatePagination defines model for fume.Response-advisory_Sel-paginate_Pagination.
type FumeResponseAdvisorySelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySel      `json:"data,omitempty"`
}

// FumeResponseAdvisorySentinelOnePaginatePagination defines model for fume.Response-advisory_SentinelOne-paginate_Pagination.
type FumeResponseAdvisorySentinelOnePaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisorySentinelOne `json:"data,omitempty"`
}

// FumeResponseAdvisoryServiceNowPaginatePagination defines model for fume.Response-advisory_ServiceNow-paginate_Pagination.
type FumeResponseAdvisoryServiceNowPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryServiceNow `json:"data,omitempty"`
}

// FumeResponseAdvisoryShadowServerExploitedVulnerabilityPaginatePagination defines model for fume.Response-advisory_ShadowServerExploitedVulnerability-paginate_Pagination.
type FumeResponseAdvisoryShadowServerExploitedVulnerabilityPaginatePagination struct {
	Benchmark *float32                                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                           `json:"_meta,omitempty"`
	Data      *[]AdvisoryShadowServerExploitedVulnerability `json:"data,omitempty"`
}

// FumeResponseAdvisorySickPaginatePagination defines model for fume.Response-advisory_Sick-paginate_Pagination.
type FumeResponseAdvisorySickPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySick     `json:"data,omitempty"`
}

// FumeResponseAdvisorySiemensAdvisoryPaginatePagination defines model for fume.Response-advisory_SiemensAdvisory-paginate_Pagination.
type FumeResponseAdvisorySiemensAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisorySiemensAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySierraWirelessPaginatePagination defines model for fume.Response-advisory_SierraWireless-paginate_Pagination.
type FumeResponseAdvisorySierraWirelessPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisorySierraWireless `json:"data,omitempty"`
}

// FumeResponseAdvisorySingCertPaginatePagination defines model for fume.Response-advisory_SingCert-paginate_Pagination.
type FumeResponseAdvisorySingCertPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySingCert `json:"data,omitempty"`
}

// FumeResponseAdvisorySlackwarePaginatePagination defines model for fume.Response-advisory_Slackware-paginate_Pagination.
type FumeResponseAdvisorySlackwarePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisorySlackware `json:"data,omitempty"`
}

// FumeResponseAdvisorySolarWindsAdvisoryPaginatePagination defines model for fume.Response-advisory_SolarWindsAdvisory-paginate_Pagination.
type FumeResponseAdvisorySolarWindsAdvisoryPaginatePagination struct {
	Benchmark *float32                      `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination           `json:"_meta,omitempty"`
	Data      *[]AdvisorySolarWindsAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySolrPaginatePagination defines model for fume.Response-advisory_Solr-paginate_Pagination.
type FumeResponseAdvisorySolrPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySolr     `json:"data,omitempty"`
}

// FumeResponseAdvisorySonicWallAdvisoryPaginatePagination defines model for fume.Response-advisory_SonicWallAdvisory-paginate_Pagination.
type FumeResponseAdvisorySonicWallAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisorySonicWallAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySpacelabsHealthcareAdvisoryPaginatePagination defines model for fume.Response-advisory_SpacelabsHealthcareAdvisory-paginate_Pagination.
type FumeResponseAdvisorySpacelabsHealthcareAdvisoryPaginatePagination struct {
	Benchmark *float32                               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                    `json:"_meta,omitempty"`
	Data      *[]AdvisorySpacelabsHealthcareAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySpringPaginatePagination defines model for fume.Response-advisory_Spring-paginate_Pagination.
type FumeResponseAdvisorySpringPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySpring   `json:"data,omitempty"`
}

// FumeResponseAdvisoryStormshieldPaginatePagination defines model for fume.Response-advisory_Stormshield-paginate_Pagination.
type FumeResponseAdvisoryStormshieldPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryStormshield `json:"data,omitempty"`
}

// FumeResponseAdvisoryStrykerAdvisoryPaginatePagination defines model for fume.Response-advisory_StrykerAdvisory-paginate_Pagination.
type FumeResponseAdvisoryStrykerAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryStrykerAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySudoPaginatePagination defines model for fume.Response-advisory_Sudo-paginate_Pagination.
type FumeResponseAdvisorySudoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySudo     `json:"data,omitempty"`
}

// FumeResponseAdvisorySwisslogHealthcareAdvisoryPaginatePagination defines model for fume.Response-advisory_SwisslogHealthcareAdvisory-paginate_Pagination.
type FumeResponseAdvisorySwisslogHealthcareAdvisoryPaginatePagination struct {
	Benchmark *float32                              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                   `json:"_meta,omitempty"`
	Data      *[]AdvisorySwisslogHealthcareAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisorySymfonyPaginatePagination defines model for fume.Response-advisory_Symfony-paginate_Pagination.
type FumeResponseAdvisorySymfonyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySymfony  `json:"data,omitempty"`
}

// FumeResponseAdvisorySyncroSoftPaginatePagination defines model for fume.Response-advisory_SyncroSoft-paginate_Pagination.
type FumeResponseAdvisorySyncroSoftPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisorySyncroSoft `json:"data,omitempty"`
}

// FumeResponseAdvisorySynologyPaginatePagination defines model for fume.Response-advisory_Synology-paginate_Pagination.
type FumeResponseAdvisorySynologyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisorySynology `json:"data,omitempty"`
}

// FumeResponseAdvisoryTIPaginatePagination defines model for fume.Response-advisory_TI-paginate_Pagination.
type FumeResponseAdvisoryTIPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTI       `json:"data,omitempty"`
}

// FumeResponseAdvisoryTPLinkPaginatePagination defines model for fume.Response-advisory_TPLink-paginate_Pagination.
type FumeResponseAdvisoryTPLinkPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTPLink   `json:"data,omitempty"`
}

// FumeResponseAdvisoryTWCertAdvisoryPaginatePagination defines model for fume.Response-advisory_TWCertAdvisory-paginate_Pagination.
type FumeResponseAdvisoryTWCertAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryTWCertAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryTalosAdvisoryPaginatePagination defines model for fume.Response-advisory_TalosAdvisory-paginate_Pagination.
type FumeResponseAdvisoryTalosAdvisoryPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]AdvisoryTalosAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryTeamViewerPaginatePagination defines model for fume.Response-advisory_TeamViewer-paginate_Pagination.
type FumeResponseAdvisoryTeamViewerPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryTeamViewer `json:"data,omitempty"`
}

// FumeResponseAdvisoryTencentPaginatePagination defines model for fume.Response-advisory_Tencent-paginate_Pagination.
type FumeResponseAdvisoryTencentPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTencent  `json:"data,omitempty"`
}

// FumeResponseAdvisoryThalesPaginatePagination defines model for fume.Response-advisory_Thales-paginate_Pagination.
type FumeResponseAdvisoryThalesPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryThales   `json:"data,omitempty"`
}

// FumeResponseAdvisoryTheMissingLinkPaginatePagination defines model for fume.Response-advisory_TheMissingLink-paginate_Pagination.
type FumeResponseAdvisoryTheMissingLinkPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryTheMissingLink `json:"data,omitempty"`
}

// FumeResponseAdvisoryThreatActorWithExternalObjectsPaginatePagination defines model for fume.Response-advisory_ThreatActorWithExternalObjects-paginate_Pagination.
type FumeResponseAdvisoryThreatActorWithExternalObjectsPaginatePagination struct {
	Benchmark *float32                                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                       `json:"_meta,omitempty"`
	Data      *[]AdvisoryThreatActorWithExternalObjects `json:"data,omitempty"`
}

// FumeResponseAdvisoryTibcoPaginatePagination defines model for fume.Response-advisory_Tibco-paginate_Pagination.
type FumeResponseAdvisoryTibcoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryTibco    `json:"data,omitempty"`
}

// FumeResponseAdvisoryTraneTechnologyPaginatePagination defines model for fume.Response-advisory_TraneTechnology-paginate_Pagination.
type FumeResponseAdvisoryTraneTechnologyPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryTraneTechnology `json:"data,omitempty"`
}

// FumeResponseAdvisoryTrendMicroPaginatePagination defines model for fume.Response-advisory_TrendMicro-paginate_Pagination.
type FumeResponseAdvisoryTrendMicroPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryTrendMicro `json:"data,omitempty"`
}

// FumeResponseAdvisoryTrustwavePaginatePagination defines model for fume.Response-advisory_Trustwave-paginate_Pagination.
type FumeResponseAdvisoryTrustwavePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryTrustwave `json:"data,omitempty"`
}

// FumeResponseAdvisoryUSDPaginatePagination defines model for fume.Response-advisory_USD-paginate_Pagination.
type FumeResponseAdvisoryUSDPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUSD      `json:"data,omitempty"`
}

// FumeResponseAdvisoryUSOMAdvisoryPaginatePagination defines model for fume.Response-advisory_USOMAdvisory-paginate_Pagination.
type FumeResponseAdvisoryUSOMAdvisoryPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryUSOMAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryUbiquitiPaginatePagination defines model for fume.Response-advisory_Ubiquiti-paginate_Pagination.
type FumeResponseAdvisoryUbiquitiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUbiquiti `json:"data,omitempty"`
}

// FumeResponseAdvisoryUbuntuCVEPaginatePagination defines model for fume.Response-advisory_UbuntuCVE-paginate_Pagination.
type FumeResponseAdvisoryUbuntuCVEPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryUbuntuCVE `json:"data,omitempty"`
}

// FumeResponseAdvisoryUnifyPaginatePagination defines model for fume.Response-advisory_Unify-paginate_Pagination.
type FumeResponseAdvisoryUnifyPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUnify    `json:"data,omitempty"`
}

// FumeResponseAdvisoryUnisocPaginatePagination defines model for fume.Response-advisory_Unisoc-paginate_Pagination.
type FumeResponseAdvisoryUnisocPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUnisoc   `json:"data,omitempty"`
}

// FumeResponseAdvisoryUpdatePaginatePagination defines model for fume.Response-advisory_Update-paginate_Pagination.
type FumeResponseAdvisoryUpdatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryUpdate   `json:"data,omitempty"`
}

// FumeResponseAdvisoryVDEAdvisoryPaginatePagination defines model for fume.Response-advisory_VDEAdvisory-paginate_Pagination.
type FumeResponseAdvisoryVDEAdvisoryPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]AdvisoryVDEAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryVYAIREAdvisoryPaginatePagination defines model for fume.Response-advisory_VYAIREAdvisory-paginate_Pagination.
type FumeResponseAdvisoryVYAIREAdvisoryPaginatePagination struct {
	Benchmark *float32                  `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination       `json:"_meta,omitempty"`
	Data      *[]AdvisoryVYAIREAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryVanDykePaginatePagination defines model for fume.Response-advisory_VanDyke-paginate_Pagination.
type FumeResponseAdvisoryVanDykePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVanDyke  `json:"data,omitempty"`
}

// FumeResponseAdvisoryVapidLabsAdvisoryPaginatePagination defines model for fume.Response-advisory_VapidLabsAdvisory-paginate_Pagination.
type FumeResponseAdvisoryVapidLabsAdvisoryPaginatePagination struct {
	Benchmark *float32                     `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination          `json:"_meta,omitempty"`
	Data      *[]AdvisoryVapidLabsAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryVeeamPaginatePagination defines model for fume.Response-advisory_Veeam-paginate_Pagination.
type FumeResponseAdvisoryVeeamPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVeeam    `json:"data,omitempty"`
}

// FumeResponseAdvisoryVoidSecPaginatePagination defines model for fume.Response-advisory_VoidSec-paginate_Pagination.
type FumeResponseAdvisoryVoidSecPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryVoidSec  `json:"data,omitempty"`
}

// FumeResponseAdvisoryVulnCheckConfigPaginatePagination defines model for fume.Response-advisory_VulnCheckConfig-paginate_Pagination.
type FumeResponseAdvisoryVulnCheckConfigPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnCheckConfig `json:"data,omitempty"`
}

// FumeResponseAdvisoryVulnCheckKEVPaginatePagination defines model for fume.Response-advisory_VulnCheckKEV-paginate_Pagination.
type FumeResponseAdvisoryVulnCheckKEVPaginatePagination struct {
	Benchmark *float32                `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination     `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnCheckKEV `json:"data,omitempty"`
}

// FumeResponseAdvisoryVulnerableDebianPackagePaginatePagination defines model for fume.Response-advisory_VulnerableDebianPackage-paginate_Pagination.
type FumeResponseAdvisoryVulnerableDebianPackagePaginatePagination struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination                `json:"_meta,omitempty"`
	Data      *[]AdvisoryVulnerableDebianPackage `json:"data,omitempty"`
}

// FumeResponseAdvisoryWRTPaginatePagination defines model for fume.Response-advisory_WRT-paginate_Pagination.
type FumeResponseAdvisoryWRTPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWRT      `json:"data,omitempty"`
}

// FumeResponseAdvisoryWatchGuardPaginatePagination defines model for fume.Response-advisory_WatchGuard-paginate_Pagination.
type FumeResponseAdvisoryWatchGuardPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryWatchGuard `json:"data,omitempty"`
}

// FumeResponseAdvisoryWhatsAppPaginatePagination defines model for fume.Response-advisory_WhatsApp-paginate_Pagination.
type FumeResponseAdvisoryWhatsAppPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWhatsApp `json:"data,omitempty"`
}

// FumeResponseAdvisoryWibuPaginatePagination defines model for fume.Response-advisory_Wibu-paginate_Pagination.
type FumeResponseAdvisoryWibuPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWibu     `json:"data,omitempty"`
}

// FumeResponseAdvisoryWiresharkPaginatePagination defines model for fume.Response-advisory_Wireshark-paginate_Pagination.
type FumeResponseAdvisoryWiresharkPaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryWireshark `json:"data,omitempty"`
}

// FumeResponseAdvisoryWithSecurePaginatePagination defines model for fume.Response-advisory_WithSecure-paginate_Pagination.
type FumeResponseAdvisoryWithSecurePaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]AdvisoryWithSecure `json:"data,omitempty"`
}

// FumeResponseAdvisoryWolfSSLPaginatePagination defines model for fume.Response-advisory_WolfSSL-paginate_Pagination.
type FumeResponseAdvisoryWolfSSLPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWolfSSL  `json:"data,omitempty"`
}

// FumeResponseAdvisoryWolfiPaginatePagination defines model for fume.Response-advisory_Wolfi-paginate_Pagination.
type FumeResponseAdvisoryWolfiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryWolfi    `json:"data,omitempty"`
}

// FumeResponseAdvisoryWordfencePaginatePagination defines model for fume.Response-advisory_Wordfence-paginate_Pagination.
type FumeResponseAdvisoryWordfencePaginatePagination struct {
	Benchmark *float32             `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination  `json:"_meta,omitempty"`
	Data      *[]AdvisoryWordfence `json:"data,omitempty"`
}

// FumeResponseAdvisoryXenPaginatePagination defines model for fume.Response-advisory_Xen-paginate_Pagination.
type FumeResponseAdvisoryXenPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXen      `json:"data,omitempty"`
}

// FumeResponseAdvisoryXeroxPaginatePagination defines model for fume.Response-advisory_Xerox-paginate_Pagination.
type FumeResponseAdvisoryXeroxPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXerox    `json:"data,omitempty"`
}

// FumeResponseAdvisoryXiaomiPaginatePagination defines model for fume.Response-advisory_Xiaomi-paginate_Pagination.
type FumeResponseAdvisoryXiaomiPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXiaomi   `json:"data,omitempty"`
}

// FumeResponseAdvisoryXylemPaginatePagination defines model for fume.Response-advisory_Xylem-paginate_Pagination.
type FumeResponseAdvisoryXylemPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryXylem    `json:"data,omitempty"`
}

// FumeResponseAdvisoryYokogawaAdvisoryPaginatePagination defines model for fume.Response-advisory_YokogawaAdvisory-paginate_Pagination.
type FumeResponseAdvisoryYokogawaAdvisoryPaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[]AdvisoryYokogawaAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryYubicoPaginatePagination defines model for fume.Response-advisory_Yubico-paginate_Pagination.
type FumeResponseAdvisoryYubicoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryYubico   `json:"data,omitempty"`
}

// FumeResponseAdvisoryZeroDayAdvisoryPaginatePagination defines model for fume.Response-advisory_ZeroDayAdvisory-paginate_Pagination.
type FumeResponseAdvisoryZeroDayAdvisoryPaginatePagination struct {
	Benchmark *float32                   `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination        `json:"_meta,omitempty"`
	Data      *[]AdvisoryZeroDayAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryZeroScienceAdvisoryPaginatePagination defines model for fume.Response-advisory_ZeroScienceAdvisory-paginate_Pagination.
type FumeResponseAdvisoryZeroScienceAdvisoryPaginatePagination struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination            `json:"_meta,omitempty"`
	Data      *[]AdvisoryZeroScienceAdvisory `json:"data,omitempty"`
}

// FumeResponseAdvisoryZimbraPaginatePagination defines model for fume.Response-advisory_Zimbra-paginate_Pagination.
type FumeResponseAdvisoryZimbraPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZimbra   `json:"data,omitempty"`
}

// FumeResponseAdvisoryZoomPaginatePagination defines model for fume.Response-advisory_Zoom-paginate_Pagination.
type FumeResponseAdvisoryZoomPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZoom     `json:"data,omitempty"`
}

// FumeResponseAdvisoryZscalerPaginatePagination defines model for fume.Response-advisory_Zscaler-paginate_Pagination.
type FumeResponseAdvisoryZscalerPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZscaler  `json:"data,omitempty"`
}

// FumeResponseAdvisoryZusoPaginatePagination defines model for fume.Response-advisory_Zuso-paginate_Pagination.
type FumeResponseAdvisoryZusoPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZuso     `json:"data,omitempty"`
}

// FumeResponseAdvisoryZyxelPaginatePagination defines model for fume.Response-advisory_Zyxel-paginate_Pagination.
type FumeResponseAdvisoryZyxelPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]AdvisoryZyxel    `json:"data,omitempty"`
}

// FumeResponseApiCWEPaginatePagination defines model for fume.Response-api_CWE-paginate_Pagination.
type FumeResponseApiCWEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiCWE           `json:"data,omitempty"`
}

// FumeResponseApiCveItemsPaginatePagination defines model for fume.Response-api_CveItems-paginate_Pagination.
type FumeResponseApiCveItemsPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiCveItems      `json:"data,omitempty"`
}

// FumeResponseApiCveItemsExtendedPaginatePagination defines model for fume.Response-api_CveItemsExtended-paginate_Pagination.
type FumeResponseApiCveItemsExtendedPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]ApiCveItemsExtended `json:"data,omitempty"`
}

// FumeResponseApiEPSSDataPaginatePagination defines model for fume.Response-api_EPSSData-paginate_Pagination.
type FumeResponseApiEPSSDataPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiEPSSData      `json:"data,omitempty"`
}

// FumeResponseApiExploitChainPaginatePagination defines model for fume.Response-api_ExploitChain-paginate_Pagination.
type FumeResponseApiExploitChainPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiExploitChain  `json:"data,omitempty"`
}

// FumeResponseApiExploitV3ResultPaginatePagination defines model for fume.Response-api_ExploitV3Result-paginate_Pagination.
type FumeResponseApiExploitV3ResultPaginatePagination struct {
	Benchmark *float32              `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination   `json:"_meta,omitempty"`
	Data      *[]ApiExploitV3Result `json:"data,omitempty"`
}

// FumeResponseApiInitialAccessPaginatePagination defines model for fume.Response-api_InitialAccess-paginate_Pagination.
type FumeResponseApiInitialAccessPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiInitialAccess `json:"data,omitempty"`
}

// FumeResponseApiMitreAttackToCVEPaginatePagination defines model for fume.Response-api_MitreAttackToCVE-paginate_Pagination.
type FumeResponseApiMitreAttackToCVEPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]ApiMitreAttackToCVE `json:"data,omitempty"`
}

// FumeResponseApiNVD20CPEMatchPaginatePagination defines model for fume.Response-api_NVD20CPEMatch-paginate_Pagination.
type FumeResponseApiNVD20CPEMatchPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiNVD20CPEMatch `json:"data,omitempty"`
}

// FumeResponseApiNVD20CVEPaginatePagination defines model for fume.Response-api_NVD20CVE-paginate_Pagination.
type FumeResponseApiNVD20CVEPaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiNVD20CVE      `json:"data,omitempty"`
}

// FumeResponseApiNVD20CVEExtendedPaginatePagination defines model for fume.Response-api_NVD20CVEExtended-paginate_Pagination.
type FumeResponseApiNVD20CVEExtendedPaginatePagination struct {
	Benchmark *float32               `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination    `json:"_meta,omitempty"`
	Data      *[]ApiNVD20CVEExtended `json:"data,omitempty"`
}

// FumeResponseApiOSSPackagePaginatePagination defines model for fume.Response-api_OSSPackage-paginate_Pagination.
type FumeResponseApiOSSPackagePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiOSSPackage    `json:"data,omitempty"`
}

// FumeResponseApiUpdatePaginatePagination defines model for fume.Response-api_Update-paginate_Pagination.
type FumeResponseApiUpdatePaginatePagination struct {
	Benchmark *float32            `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination `json:"_meta,omitempty"`
	Data      *[]ApiUpdate        `json:"data,omitempty"`
}

// FumeResponseApiVulnerabilityAliasPaginatePagination defines model for fume.Response-api_VulnerabilityAlias-paginate_Pagination.
type FumeResponseApiVulnerabilityAliasPaginatePagination struct {
	Benchmark *float32                 `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination      `json:"_meta,omitempty"`
	Data      *[]ApiVulnerabilityAlias `json:"data,omitempty"`
}

// FumeResponseArrayStringV3controllersResponseMetadata defines model for fume.Response-array_string-v3controllers_ResponseMetadata.
type FumeResponseArrayStringV3controllersResponseMetadata struct {
	Benchmark *float32                       `json:"_benchmark,omitempty"`
	Meta      *V3controllersResponseMetadata `json:"_meta,omitempty"`
	Data      *[][]string                    `json:"data,omitempty"`
}

// FumeResponseV3controllersBackupResponseDataV3controllersBackupResponseMetadata defines model for fume.Response-v3controllers_BackupResponseData-v3controllers_BackupResponseMetadata.
type FumeResponseV3controllersBackupResponseDataV3controllersBackupResponseMetadata struct {
	Benchmark *float32                             `json:"_benchmark,omitempty"`
	Meta      *V3controllersBackupResponseMetadata `json:"_meta,omitempty"`
	Data      *[][]ParamsIndexBackup               `json:"data,omitempty"`
}

// FumeResponseV3controllersDefaultIndexResponsePaginatePagination defines model for fume.Response-v3controllers_DefaultIndexResponse-paginate_Pagination.
type FumeResponseV3controllersDefaultIndexResponsePaginatePagination struct {
	Benchmark *float32                    `json:"_benchmark,omitempty"`
	Meta      *PaginatePagination         `json:"_meta,omitempty"`
	Data      *[][]map[string]interface{} `json:"data,omitempty"`
}

// FumeResponseV3controllersPurlResponseDataV3controllersPurlResponseMetadata defines model for fume.Response-v3controllers_PurlResponseData-v3controllers_PurlResponseMetadata.
type FumeResponseV3controllersPurlResponseDataV3controllersPurlResponseMetadata struct {
	Benchmark *float32                           `json:"_benchmark,omitempty"`
	Meta      *V3controllersPurlResponseMetadata `json:"_meta,omitempty"`
	Data      *[]V3controllersPurlResponseData   `json:"data,omitempty"`
}

// PaginateMatch defines model for paginate.Match.
type PaginateMatch struct {
	Field *string `json:"field,omitempty"`
	Value *string `json:"value,omitempty"`
}

// PaginatePagination defines model for paginate.Pagination.
type PaginatePagination struct {
	// Cursor Cursor for the current page
	Cursor *string `json:"cursor,omitempty"`

	// FirstItem First and last Item
	FirstItem *int `json:"first_item,omitempty"`

	// Index The requested index
	Index    *string `json:"index,omitempty"`
	LastItem *int    `json:"last_item,omitempty"`

	// Limit Per-Page limit
	Limit    *int             `json:"limit,omitempty"`
	Matches  *[]PaginateMatch `json:"matches,omitempty"`
	MaxPages *int             `json:"max_pages,omitempty"`

	// NextCursor Cursor for the next page
	NextCursor *string `json:"next_cursor,omitempty"`

	// OpensearchQuery NOTE: swaggertype tag is needed so that swaggo/swag run from `make openapi` does not die in a fire
	OpensearchQuery *map[string]interface{} `json:"opensearch_query,omitempty"`
	Order           *string                 `json:"order,omitempty"`

	// Page The current Page number
	Page       *int             `json:"page,omitempty"`
	Pages      *[]string        `json:"pages,omitempty"`
	Parameters *[]PaginateParam `json:"parameters,omitempty"`
	ShowPages  *bool            `json:"show_pages,omitempty"`
	ShowQuery  *bool            `json:"show_query,omitempty"`
	Sort       *string          `json:"sort,omitempty"`
	Timestamp  *string          `json:"timestamp,omitempty"`

	// TotalDocuments The total number of items
	TotalDocuments *int `json:"total_documents,omitempty"`

	// TotalPages The total number of pages
	TotalPages *int      `json:"total_pages,omitempty"`
	Warnings   *[]string `json:"warnings,omitempty"`
}

// PaginateParam defines model for paginate.Param.
type PaginateParam struct {
	Filtering *string `json:"filtering,omitempty"`
	Format    *string `json:"format,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// ParamsIdxReqParams model representing the parameters to constrain the vulnerability search
type ParamsIdxReqParams struct {
	// Alias Specify an Alias to search with
	Alias *string `json:"alias,omitempty"`

	// Asn IpIntel Only: Specify an ASN to search with
	Asn *string `json:"asn,omitempty"`

	// BotnetName Specify a Botnet Name to search with
	BotnetName *string `json:"botnetName,omitempty"`

	// Cidr IpIntel Only: Specify a IPv4 or IPv6 cidr to search with
	Cidr *string `json:"cidr,omitempty"`

	// Country IpIntel Only: Specify a country name to search with
	Country *string `json:"country,omitempty"`

	// CountryCode IpIntel Only: Specify a country code to search with
	CountryCode *string `json:"countryCode,omitempty"`

	// Cve Specify one or more CVEs (comma delimited) to search with.
	Cve *string `json:"cve,omitempty"`

	// Iava Specify an IAVA to search with
	Iava *string `json:"iava,omitempty"`

	// Limit Limit the number of documents returned
	Limit *string `json:"limit,omitempty"`

	// MispId Specify a MISP ID to search with
	MispId *string `json:"mispId,omitempty"`

	// MitreId Specify a MITRE ID to search with
	MitreId *string `json:"mitreId,omitempty"`

	// Order Return results in ascending or descending order
	Order *ParamsIdxReqParamsOrder `json:"order,omitempty"`

	// Published Specify a published date to search with
	Published *string `json:"published,omitempty"`

	// PublishedEnd Specify an ending published date to filter with
	PublishedEnd *string `json:"publishedEnd,omitempty"`

	// PublishedStart Specify a starting published date to filter with
	PublishedStart *string `json:"publishedStart,omitempty"`

	// RansomwareFamilyName Specify a Ransomware Family Name to search with
	RansomwareFamilyName *string `json:"ransomwareFamilyName,omitempty"`

	// Sort Return results sorted by field
	Sort *ParamsIdxReqParamsSort `json:"sort,omitempty"`

	// ThreatActorName Specify a Threat Actor Name to search with
	ThreatActorName *string `json:"threatActorName,omitempty"`

	// TypeId IpIntel Only: Choices are c2 or initial-access
	TypeId *string `json:"typeId,omitempty"`

	// UpdatedEnd Specify an ending last modified date to filter with
	UpdatedEnd *string `json:"updatedEnd,omitempty"`

	// UpdatedStart Specify a starting last modified date to filter with
	UpdatedStart *string `json:"updatedStart,omitempty"`
}

// ParamsIdxReqParamsOrder Return results in ascending or descending order
type ParamsIdxReqParamsOrder string

// ParamsIdxReqParamsSort Return results sorted by field
type ParamsIdxReqParamsSort string

// ParamsIndexBackup defines model for params.IndexBackup.
type ParamsIndexBackup struct {
	DateAdded     *string `json:"date_added,omitempty"`
	Filename      *string `json:"filename,omitempty"`
	Sha256        *string `json:"sha256,omitempty"`
	Url           *string `json:"url,omitempty"`
	UrlExpires    *string `json:"url_expires,omitempty"`
	UrlTtlMinutes *int    `json:"url_ttl_minutes,omitempty"`
}

// ParamsIndexList defines model for params.IndexList.
type ParamsIndexList struct {
	Description *string `json:"description,omitempty"`

	// Href Href API endpoint URI to detailed index information
	Href *string `json:"href,omitempty"`
	Name *string `json:"name,omitempty"`
}

// PurlPackageURLJSON defines model for purl.PackageURLJSON.
type PurlPackageURLJSON struct {
	Name       *string              `json:"name,omitempty"`
	Namespace  *string              `json:"namespace,omitempty"`
	Qualifiers *[]PurlQualifierJSON `json:"qualifiers,omitempty"`
	Subpath    *string              `json:"subpath,omitempty"`
	Type       *string              `json:"type,omitempty"`
	Version    *string              `json:"version,omitempty"`
}

// PurlQualifierJSON defines model for purl.QualifierJSON.
type PurlQualifierJSON struct {
	Key   *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// V3controllersBackupResponseMetadata defines model for v3controllers.BackupResponseMetadata.
type V3controllersBackupResponseMetadata struct {
	Index     *string `json:"index,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// V3controllersListIndexesResponse defines model for v3controllers.ListIndexesResponse.
type V3controllersListIndexesResponse struct {
	// Count Count convenience field that reports the length of the Indexes property
	Count *int `json:"count,omitempty"`

	// Indexes Indexes available index names the user is authorized to use.
	Indexes *[]ParamsIndexList `json:"indexes,omitempty"`
}

// V3controllersPurlResponseData defines model for v3controllers.PurlResponseData.
type V3controllersPurlResponseData struct {
	// Cves list of associated CVE 's
	Cves *[]string `json:"cves,omitempty"`

	// Vulnerabilities list of associated vulnerabilities
	Vulnerabilities *[]ApiOSSPackageVulnerability `json:"vulnerabilities,omitempty"`
}

// V3controllersPurlResponseMetadata defines model for v3controllers.PurlResponseMetadata.
type V3controllersPurlResponseMetadata struct {
	// PurlStruct meta-data about the purl
	PurlStruct *PurlPackageURLJSON `json:"purl_struct,omitempty"`

	// Timestamp time of the transaction
	Timestamp *string `json:"timestamp,omitempty"`

	// TotalDocuments number of results found
	TotalDocuments *int `json:"total_documents,omitempty"`
}

// V3controllersResponseMetadata defines model for v3controllers.ResponseMetadata.
type V3controllersResponseMetadata struct {
	Cpe            *string `json:"cpe,omitempty"`
	CpeStruct      *ApiCPE `json:"cpe_struct,omitempty"`
	Timestamp      *string `json:"timestamp,omitempty"`
	TotalDocuments *int    `json:"total_documents,omitempty"`
}

// GetBackupIndexParamsIndex defines parameters for GetBackupIndex.
type GetBackupIndexParamsIndex string

// GetCpeParams defines parameters for GetCpe.
type GetCpeParams struct {
	// Cpe CPE designation to lookup
	Cpe string `form:"cpe" json:"cpe"`
}

// GetPurlParams defines parameters for GetPurl.
type GetPurlParams struct {
	// Purl URL string used to identify and locate a software package
	Purl string `form:"purl" json:"purl"`
}

// GetTagsVulncheckC2Params defines parameters for GetTagsVulncheckC2.
type GetTagsVulncheckC2Params struct {
	// Format Format of the IP Addresses in the response (Defaults To: text)
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// GetIndexA10JSONRequestBody defines body for GetIndexA10 for application/json ContentType.
type GetIndexA10JSONRequestBody = ParamsIdxReqParams

// GetIndexAbbJSONRequestBody defines body for GetIndexAbb for application/json ContentType.
type GetIndexAbbJSONRequestBody = ParamsIdxReqParams

// GetIndexAbbottJSONRequestBody defines body for GetIndexAbbott for application/json ContentType.
type GetIndexAbbottJSONRequestBody = ParamsIdxReqParams

// GetIndexAbsoluteJSONRequestBody defines body for GetIndexAbsolute for application/json ContentType.
type GetIndexAbsoluteJSONRequestBody = ParamsIdxReqParams

// GetIndexAcronisJSONRequestBody defines body for GetIndexAcronis for application/json ContentType.
type GetIndexAcronisJSONRequestBody = ParamsIdxReqParams

// GetIndexAdobeJSONRequestBody defines body for GetIndexAdobe for application/json ContentType.
type GetIndexAdobeJSONRequestBody = ParamsIdxReqParams

// GetIndexAdvisoriesJSONRequestBody defines body for GetIndexAdvisories for application/json ContentType.
type GetIndexAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexAlephResearchJSONRequestBody defines body for GetIndexAlephResearch for application/json ContentType.
type GetIndexAlephResearchJSONRequestBody = ParamsIdxReqParams

// GetIndexAlmaJSONRequestBody defines body for GetIndexAlma for application/json ContentType.
type GetIndexAlmaJSONRequestBody = ParamsIdxReqParams

// GetIndexAlpineJSONRequestBody defines body for GetIndexAlpine for application/json ContentType.
type GetIndexAlpineJSONRequestBody = ParamsIdxReqParams

// GetIndexAmazonJSONRequestBody defines body for GetIndexAmazon for application/json ContentType.
type GetIndexAmazonJSONRequestBody = ParamsIdxReqParams

// GetIndexAmdJSONRequestBody defines body for GetIndexAmd for application/json ContentType.
type GetIndexAmdJSONRequestBody = ParamsIdxReqParams

// GetIndexAmiJSONRequestBody defines body for GetIndexAmi for application/json ContentType.
type GetIndexAmiJSONRequestBody = ParamsIdxReqParams

// GetIndexAnchoreNvdOverrideJSONRequestBody defines body for GetIndexAnchoreNvdOverride for application/json ContentType.
type GetIndexAnchoreNvdOverrideJSONRequestBody = ParamsIdxReqParams

// GetIndexAndroidJSONRequestBody defines body for GetIndexAndroid for application/json ContentType.
type GetIndexAndroidJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheActivemqJSONRequestBody defines body for GetIndexApacheActivemq for application/json ContentType.
type GetIndexApacheActivemqJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheArchivaJSONRequestBody defines body for GetIndexApacheArchiva for application/json ContentType.
type GetIndexApacheArchivaJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheArrowJSONRequestBody defines body for GetIndexApacheArrow for application/json ContentType.
type GetIndexApacheArrowJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheCamelJSONRequestBody defines body for GetIndexApacheCamel for application/json ContentType.
type GetIndexApacheCamelJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheCommonsJSONRequestBody defines body for GetIndexApacheCommons for application/json ContentType.
type GetIndexApacheCommonsJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheCouchdbJSONRequestBody defines body for GetIndexApacheCouchdb for application/json ContentType.
type GetIndexApacheCouchdbJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheFlinkJSONRequestBody defines body for GetIndexApacheFlink for application/json ContentType.
type GetIndexApacheFlinkJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheGuacamoleJSONRequestBody defines body for GetIndexApacheGuacamole for application/json ContentType.
type GetIndexApacheGuacamoleJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheHadoopJSONRequestBody defines body for GetIndexApacheHadoop for application/json ContentType.
type GetIndexApacheHadoopJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheHttpJSONRequestBody defines body for GetIndexApacheHttp for application/json ContentType.
type GetIndexApacheHttpJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheJspwikiJSONRequestBody defines body for GetIndexApacheJspwiki for application/json ContentType.
type GetIndexApacheJspwikiJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheKafkaJSONRequestBody defines body for GetIndexApacheKafka for application/json ContentType.
type GetIndexApacheKafkaJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheLoggingservicesJSONRequestBody defines body for GetIndexApacheLoggingservices for application/json ContentType.
type GetIndexApacheLoggingservicesJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheNifiJSONRequestBody defines body for GetIndexApacheNifi for application/json ContentType.
type GetIndexApacheNifiJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheOfbizJSONRequestBody defines body for GetIndexApacheOfbiz for application/json ContentType.
type GetIndexApacheOfbizJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheOpenmeetingsJSONRequestBody defines body for GetIndexApacheOpenmeetings for application/json ContentType.
type GetIndexApacheOpenmeetingsJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheOpenofficeJSONRequestBody defines body for GetIndexApacheOpenoffice for application/json ContentType.
type GetIndexApacheOpenofficeJSONRequestBody = ParamsIdxReqParams

// GetIndexApachePulsarJSONRequestBody defines body for GetIndexApachePulsar for application/json ContentType.
type GetIndexApachePulsarJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheShiroJSONRequestBody defines body for GetIndexApacheShiro for application/json ContentType.
type GetIndexApacheShiroJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheSparkJSONRequestBody defines body for GetIndexApacheSpark for application/json ContentType.
type GetIndexApacheSparkJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheStrutsJSONRequestBody defines body for GetIndexApacheStruts for application/json ContentType.
type GetIndexApacheStrutsJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheSubversionJSONRequestBody defines body for GetIndexApacheSubversion for application/json ContentType.
type GetIndexApacheSubversionJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheSupersetJSONRequestBody defines body for GetIndexApacheSuperset for application/json ContentType.
type GetIndexApacheSupersetJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheTomcatJSONRequestBody defines body for GetIndexApacheTomcat for application/json ContentType.
type GetIndexApacheTomcatJSONRequestBody = ParamsIdxReqParams

// GetIndexApacheZookeeperJSONRequestBody defines body for GetIndexApacheZookeeper for application/json ContentType.
type GetIndexApacheZookeeperJSONRequestBody = ParamsIdxReqParams

// GetIndexAppcheckJSONRequestBody defines body for GetIndexAppcheck for application/json ContentType.
type GetIndexAppcheckJSONRequestBody = ParamsIdxReqParams

// GetIndexAppgateJSONRequestBody defines body for GetIndexAppgate for application/json ContentType.
type GetIndexAppgateJSONRequestBody = ParamsIdxReqParams

// GetIndexAppleJSONRequestBody defines body for GetIndexApple for application/json ContentType.
type GetIndexAppleJSONRequestBody = ParamsIdxReqParams

// GetIndexArchJSONRequestBody defines body for GetIndexArch for application/json ContentType.
type GetIndexArchJSONRequestBody = ParamsIdxReqParams

// GetIndexAristaJSONRequestBody defines body for GetIndexArista for application/json ContentType.
type GetIndexAristaJSONRequestBody = ParamsIdxReqParams

// GetIndexArubaJSONRequestBody defines body for GetIndexAruba for application/json ContentType.
type GetIndexArubaJSONRequestBody = ParamsIdxReqParams

// GetIndexAsrgJSONRequestBody defines body for GetIndexAsrg for application/json ContentType.
type GetIndexAsrgJSONRequestBody = ParamsIdxReqParams

// GetIndexAssetnoteJSONRequestBody defines body for GetIndexAssetnote for application/json ContentType.
type GetIndexAssetnoteJSONRequestBody = ParamsIdxReqParams

// GetIndexAsteriskJSONRequestBody defines body for GetIndexAsterisk for application/json ContentType.
type GetIndexAsteriskJSONRequestBody = ParamsIdxReqParams

// GetIndexAsusJSONRequestBody defines body for GetIndexAsus for application/json ContentType.
type GetIndexAsusJSONRequestBody = ParamsIdxReqParams

// GetIndexAtlassianJSONRequestBody defines body for GetIndexAtlassian for application/json ContentType.
type GetIndexAtlassianJSONRequestBody = ParamsIdxReqParams

// GetIndexAtlassianVulnsJSONRequestBody defines body for GetIndexAtlassianVulns for application/json ContentType.
type GetIndexAtlassianVulnsJSONRequestBody = ParamsIdxReqParams

// GetIndexAtredisJSONRequestBody defines body for GetIndexAtredis for application/json ContentType.
type GetIndexAtredisJSONRequestBody = ParamsIdxReqParams

// GetIndexAuscertJSONRequestBody defines body for GetIndexAuscert for application/json ContentType.
type GetIndexAuscertJSONRequestBody = ParamsIdxReqParams

// GetIndexAutodeskJSONRequestBody defines body for GetIndexAutodesk for application/json ContentType.
type GetIndexAutodeskJSONRequestBody = ParamsIdxReqParams

// GetIndexAvayaJSONRequestBody defines body for GetIndexAvaya for application/json ContentType.
type GetIndexAvayaJSONRequestBody = ParamsIdxReqParams

// GetIndexAvevaJSONRequestBody defines body for GetIndexAveva for application/json ContentType.
type GetIndexAvevaJSONRequestBody = ParamsIdxReqParams

// GetIndexAvigilonJSONRequestBody defines body for GetIndexAvigilon for application/json ContentType.
type GetIndexAvigilonJSONRequestBody = ParamsIdxReqParams

// GetIndexAwsJSONRequestBody defines body for GetIndexAws for application/json ContentType.
type GetIndexAwsJSONRequestBody = ParamsIdxReqParams

// GetIndexAxisJSONRequestBody defines body for GetIndexAxis for application/json ContentType.
type GetIndexAxisJSONRequestBody = ParamsIdxReqParams

// GetIndexBandrJSONRequestBody defines body for GetIndexBandr for application/json ContentType.
type GetIndexBandrJSONRequestBody = ParamsIdxReqParams

// GetIndexBaxterJSONRequestBody defines body for GetIndexBaxter for application/json ContentType.
type GetIndexBaxterJSONRequestBody = ParamsIdxReqParams

// GetIndexBbraunJSONRequestBody defines body for GetIndexBbraun for application/json ContentType.
type GetIndexBbraunJSONRequestBody = ParamsIdxReqParams

// GetIndexBdJSONRequestBody defines body for GetIndexBd for application/json ContentType.
type GetIndexBdJSONRequestBody = ParamsIdxReqParams

// GetIndexBduJSONRequestBody defines body for GetIndexBdu for application/json ContentType.
type GetIndexBduJSONRequestBody = ParamsIdxReqParams

// GetIndexBeckhoffJSONRequestBody defines body for GetIndexBeckhoff for application/json ContentType.
type GetIndexBeckhoffJSONRequestBody = ParamsIdxReqParams

// GetIndexBeldenJSONRequestBody defines body for GetIndexBelden for application/json ContentType.
type GetIndexBeldenJSONRequestBody = ParamsIdxReqParams

// GetIndexBeyondTrustJSONRequestBody defines body for GetIndexBeyondTrust for application/json ContentType.
type GetIndexBeyondTrustJSONRequestBody = ParamsIdxReqParams

// GetIndexBinarlyJSONRequestBody defines body for GetIndexBinarly for application/json ContentType.
type GetIndexBinarlyJSONRequestBody = ParamsIdxReqParams

// GetIndexBitdefenderJSONRequestBody defines body for GetIndexBitdefender for application/json ContentType.
type GetIndexBitdefenderJSONRequestBody = ParamsIdxReqParams

// GetIndexBlackberryJSONRequestBody defines body for GetIndexBlackberry for application/json ContentType.
type GetIndexBlackberryJSONRequestBody = ParamsIdxReqParams

// GetIndexBlsJSONRequestBody defines body for GetIndexBls for application/json ContentType.
type GetIndexBlsJSONRequestBody = ParamsIdxReqParams

// GetIndexBoschJSONRequestBody defines body for GetIndexBosch for application/json ContentType.
type GetIndexBoschJSONRequestBody = ParamsIdxReqParams

// GetIndexBostonScientificJSONRequestBody defines body for GetIndexBostonScientific for application/json ContentType.
type GetIndexBostonScientificJSONRequestBody = ParamsIdxReqParams

// GetIndexBotnetsJSONRequestBody defines body for GetIndexBotnets for application/json ContentType.
type GetIndexBotnetsJSONRequestBody = ParamsIdxReqParams

// GetIndexCaCyberCentreJSONRequestBody defines body for GetIndexCaCyberCentre for application/json ContentType.
type GetIndexCaCyberCentreJSONRequestBody = ParamsIdxReqParams

// GetIndexCanvasJSONRequestBody defines body for GetIndexCanvas for application/json ContentType.
type GetIndexCanvasJSONRequestBody = ParamsIdxReqParams

// GetIndexCarestreamJSONRequestBody defines body for GetIndexCarestream for application/json ContentType.
type GetIndexCarestreamJSONRequestBody = ParamsIdxReqParams

// GetIndexCargoJSONRequestBody defines body for GetIndexCargo for application/json ContentType.
type GetIndexCargoJSONRequestBody = ParamsIdxReqParams

// GetIndexCarrierJSONRequestBody defines body for GetIndexCarrier for application/json ContentType.
type GetIndexCarrierJSONRequestBody = ParamsIdxReqParams

// GetIndexCblMarinerJSONRequestBody defines body for GetIndexCblMariner for application/json ContentType.
type GetIndexCblMarinerJSONRequestBody = ParamsIdxReqParams

// GetIndexCentosJSONRequestBody defines body for GetIndexCentos for application/json ContentType.
type GetIndexCentosJSONRequestBody = ParamsIdxReqParams

// GetIndexCertBeJSONRequestBody defines body for GetIndexCertBe for application/json ContentType.
type GetIndexCertBeJSONRequestBody = ParamsIdxReqParams

// GetIndexCertUaJSONRequestBody defines body for GetIndexCertUa for application/json ContentType.
type GetIndexCertUaJSONRequestBody = ParamsIdxReqParams

// GetIndexCerteuJSONRequestBody defines body for GetIndexCerteu for application/json ContentType.
type GetIndexCerteuJSONRequestBody = ParamsIdxReqParams

// GetIndexCertfrJSONRequestBody defines body for GetIndexCertfr for application/json ContentType.
type GetIndexCertfrJSONRequestBody = ParamsIdxReqParams

// GetIndexChainguardJSONRequestBody defines body for GetIndexChainguard for application/json ContentType.
type GetIndexChainguardJSONRequestBody = ParamsIdxReqParams

// GetIndexCheckpointJSONRequestBody defines body for GetIndexCheckpoint for application/json ContentType.
type GetIndexCheckpointJSONRequestBody = ParamsIdxReqParams

// GetIndexChromeJSONRequestBody defines body for GetIndexChrome for application/json ContentType.
type GetIndexChromeJSONRequestBody = ParamsIdxReqParams

// GetIndexCisaAlertsJSONRequestBody defines body for GetIndexCisaAlerts for application/json ContentType.
type GetIndexCisaAlertsJSONRequestBody = ParamsIdxReqParams

// GetIndexCisaKevJSONRequestBody defines body for GetIndexCisaKev for application/json ContentType.
type GetIndexCisaKevJSONRequestBody = ParamsIdxReqParams

// GetIndexCiscoJSONRequestBody defines body for GetIndexCisco for application/json ContentType.
type GetIndexCiscoJSONRequestBody = ParamsIdxReqParams

// GetIndexCiscoTalosJSONRequestBody defines body for GetIndexCiscoTalos for application/json ContentType.
type GetIndexCiscoTalosJSONRequestBody = ParamsIdxReqParams

// GetIndexCitrixJSONRequestBody defines body for GetIndexCitrix for application/json ContentType.
type GetIndexCitrixJSONRequestBody = ParamsIdxReqParams

// GetIndexClarotyJSONRequestBody defines body for GetIndexClaroty for application/json ContentType.
type GetIndexClarotyJSONRequestBody = ParamsIdxReqParams

// GetIndexCloudbeesJSONRequestBody defines body for GetIndexCloudbees for application/json ContentType.
type GetIndexCloudbeesJSONRequestBody = ParamsIdxReqParams

// GetIndexCloudvulndbJSONRequestBody defines body for GetIndexCloudvulndb for application/json ContentType.
type GetIndexCloudvulndbJSONRequestBody = ParamsIdxReqParams

// GetIndexCnaCveCountJSONRequestBody defines body for GetIndexCnaCveCount for application/json ContentType.
type GetIndexCnaCveCountJSONRequestBody = ParamsIdxReqParams

// GetIndexCnnvdJSONRequestBody defines body for GetIndexCnnvd for application/json ContentType.
type GetIndexCnnvdJSONRequestBody = ParamsIdxReqParams

// GetIndexCnvdBulletinsJSONRequestBody defines body for GetIndexCnvdBulletins for application/json ContentType.
type GetIndexCnvdBulletinsJSONRequestBody = ParamsIdxReqParams

// GetIndexCnvdFlawsJSONRequestBody defines body for GetIndexCnvdFlaws for application/json ContentType.
type GetIndexCnvdFlawsJSONRequestBody = ParamsIdxReqParams

// GetIndexCocoapodsJSONRequestBody defines body for GetIndexCocoapods for application/json ContentType.
type GetIndexCocoapodsJSONRequestBody = ParamsIdxReqParams

// GetIndexCodesysJSONRequestBody defines body for GetIndexCodesys for application/json ContentType.
type GetIndexCodesysJSONRequestBody = ParamsIdxReqParams

// GetIndexCompassSecurityJSONRequestBody defines body for GetIndexCompassSecurity for application/json ContentType.
type GetIndexCompassSecurityJSONRequestBody = ParamsIdxReqParams

// GetIndexComposerJSONRequestBody defines body for GetIndexComposer for application/json ContentType.
type GetIndexComposerJSONRequestBody = ParamsIdxReqParams

// GetIndexConanJSONRequestBody defines body for GetIndexConan for application/json ContentType.
type GetIndexConanJSONRequestBody = ParamsIdxReqParams

// GetIndexCrestronJSONRequestBody defines body for GetIndexCrestron for application/json ContentType.
type GetIndexCrestronJSONRequestBody = ParamsIdxReqParams

// GetIndexCurlJSONRequestBody defines body for GetIndexCurl for application/json ContentType.
type GetIndexCurlJSONRequestBody = ParamsIdxReqParams

// GetIndexCweJSONRequestBody defines body for GetIndexCwe for application/json ContentType.
type GetIndexCweJSONRequestBody = ParamsIdxReqParams

// GetIndexDahuaJSONRequestBody defines body for GetIndexDahua for application/json ContentType.
type GetIndexDahuaJSONRequestBody = ParamsIdxReqParams

// GetIndexDassaultJSONRequestBody defines body for GetIndexDassault for application/json ContentType.
type GetIndexDassaultJSONRequestBody = ParamsIdxReqParams

// GetIndexDebianJSONRequestBody defines body for GetIndexDebian for application/json ContentType.
type GetIndexDebianJSONRequestBody = ParamsIdxReqParams

// GetIndexDebianDsaJSONRequestBody defines body for GetIndexDebianDsa for application/json ContentType.
type GetIndexDebianDsaJSONRequestBody = ParamsIdxReqParams

// GetIndexDellJSONRequestBody defines body for GetIndexDell for application/json ContentType.
type GetIndexDellJSONRequestBody = ParamsIdxReqParams

// GetIndexDeltaJSONRequestBody defines body for GetIndexDelta for application/json ContentType.
type GetIndexDeltaJSONRequestBody = ParamsIdxReqParams

// GetIndexDotcmsJSONRequestBody defines body for GetIndexDotcms for application/json ContentType.
type GetIndexDotcmsJSONRequestBody = ParamsIdxReqParams

// GetIndexDragosJSONRequestBody defines body for GetIndexDragos for application/json ContentType.
type GetIndexDragosJSONRequestBody = ParamsIdxReqParams

// GetIndexDraytekJSONRequestBody defines body for GetIndexDraytek for application/json ContentType.
type GetIndexDraytekJSONRequestBody = ParamsIdxReqParams

// GetIndexEatonJSONRequestBody defines body for GetIndexEaton for application/json ContentType.
type GetIndexEatonJSONRequestBody = ParamsIdxReqParams

// GetIndexElasticJSONRequestBody defines body for GetIndexElastic for application/json ContentType.
type GetIndexElasticJSONRequestBody = ParamsIdxReqParams

// GetIndexElspecJSONRequestBody defines body for GetIndexElspec for application/json ContentType.
type GetIndexElspecJSONRequestBody = ParamsIdxReqParams

// GetIndexEmersonJSONRequestBody defines body for GetIndexEmerson for application/json ContentType.
type GetIndexEmersonJSONRequestBody = ParamsIdxReqParams

// GetIndexEolJSONRequestBody defines body for GetIndexEol for application/json ContentType.
type GetIndexEolJSONRequestBody = ParamsIdxReqParams

// GetIndexEpssJSONRequestBody defines body for GetIndexEpss for application/json ContentType.
type GetIndexEpssJSONRequestBody = ParamsIdxReqParams

// GetIndexExodusIntelJSONRequestBody defines body for GetIndexExodusIntel for application/json ContentType.
type GetIndexExodusIntelJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitChainsJSONRequestBody defines body for GetIndexExploitChains for application/json ContentType.
type GetIndexExploitChainsJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitdbJSONRequestBody defines body for GetIndexExploitdb for application/json ContentType.
type GetIndexExploitdbJSONRequestBody = ParamsIdxReqParams

// GetIndexExploitsJSONRequestBody defines body for GetIndexExploits for application/json ContentType.
type GetIndexExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexFSecureJSONRequestBody defines body for GetIndexFSecure for application/json ContentType.
type GetIndexFSecureJSONRequestBody = ParamsIdxReqParams

// GetIndexFastlyJSONRequestBody defines body for GetIndexFastly for application/json ContentType.
type GetIndexFastlyJSONRequestBody = ParamsIdxReqParams

// GetIndexFedoraJSONRequestBody defines body for GetIndexFedora for application/json ContentType.
type GetIndexFedoraJSONRequestBody = ParamsIdxReqParams

// GetIndexFilecloudJSONRequestBody defines body for GetIndexFilecloud for application/json ContentType.
type GetIndexFilecloudJSONRequestBody = ParamsIdxReqParams

// GetIndexForgerockJSONRequestBody defines body for GetIndexForgerock for application/json ContentType.
type GetIndexForgerockJSONRequestBody = ParamsIdxReqParams

// GetIndexFortinetJSONRequestBody defines body for GetIndexFortinet for application/json ContentType.
type GetIndexFortinetJSONRequestBody = ParamsIdxReqParams

// GetIndexFreebsdJSONRequestBody defines body for GetIndexFreebsd for application/json ContentType.
type GetIndexFreebsdJSONRequestBody = ParamsIdxReqParams

// GetIndexGallagherJSONRequestBody defines body for GetIndexGallagher for application/json ContentType.
type GetIndexGallagherJSONRequestBody = ParamsIdxReqParams

// GetIndexGcpJSONRequestBody defines body for GetIndexGcp for application/json ContentType.
type GetIndexGcpJSONRequestBody = ParamsIdxReqParams

// GetIndexGeGasJSONRequestBody defines body for GetIndexGeGas for application/json ContentType.
type GetIndexGeGasJSONRequestBody = ParamsIdxReqParams

// GetIndexGeHealthcareJSONRequestBody defines body for GetIndexGeHealthcare for application/json ContentType.
type GetIndexGeHealthcareJSONRequestBody = ParamsIdxReqParams

// GetIndexGemJSONRequestBody defines body for GetIndexGem for application/json ContentType.
type GetIndexGemJSONRequestBody = ParamsIdxReqParams

// GetIndexGenetecJSONRequestBody defines body for GetIndexGenetec for application/json ContentType.
type GetIndexGenetecJSONRequestBody = ParamsIdxReqParams

// GetIndexGigabyteJSONRequestBody defines body for GetIndexGigabyte for application/json ContentType.
type GetIndexGigabyteJSONRequestBody = ParamsIdxReqParams

// GetIndexGiteeExploitsJSONRequestBody defines body for GetIndexGiteeExploits for application/json ContentType.
type GetIndexGiteeExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexGithubExploitsJSONRequestBody defines body for GetIndexGithubExploits for application/json ContentType.
type GetIndexGithubExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexGithubSecurityAdvisoriesJSONRequestBody defines body for GetIndexGithubSecurityAdvisories for application/json ContentType.
type GetIndexGithubSecurityAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexGitlabAdvisoriesCommunityJSONRequestBody defines body for GetIndexGitlabAdvisoriesCommunity for application/json ContentType.
type GetIndexGitlabAdvisoriesCommunityJSONRequestBody = ParamsIdxReqParams

// GetIndexGitlabExploitsJSONRequestBody defines body for GetIndexGitlabExploits for application/json ContentType.
type GetIndexGitlabExploitsJSONRequestBody = ParamsIdxReqParams

// GetIndexGnutlsJSONRequestBody defines body for GetIndexGnutls for application/json ContentType.
type GetIndexGnutlsJSONRequestBody = ParamsIdxReqParams

// GetIndexGolangJSONRequestBody defines body for GetIndexGolang for application/json ContentType.
type GetIndexGolangJSONRequestBody = ParamsIdxReqParams

// GetIndexGoogle0dayItwJSONRequestBody defines body for GetIndexGoogle0dayItw for application/json ContentType.
type GetIndexGoogle0dayItwJSONRequestBody = ParamsIdxReqParams

// GetIndexGoogleContainerOptimizedOsJSONRequestBody defines body for GetIndexGoogleContainerOptimizedOs for application/json ContentType.
type GetIndexGoogleContainerOptimizedOsJSONRequestBody = ParamsIdxReqParams

// GetIndexGrafanaJSONRequestBody defines body for GetIndexGrafana for application/json ContentType.
type GetIndexGrafanaJSONRequestBody = ParamsIdxReqParams

// GetIndexGreynoiseMetadataJSONRequestBody defines body for GetIndexGreynoiseMetadata for application/json ContentType.
type GetIndexGreynoiseMetadataJSONRequestBody = ParamsIdxReqParams

// GetIndexHackageJSONRequestBody defines body for GetIndexHackage for application/json ContentType.
type GetIndexHackageJSONRequestBody = ParamsIdxReqParams

// GetIndexHarmonyosJSONRequestBody defines body for GetIndexHarmonyos for application/json ContentType.
type GetIndexHarmonyosJSONRequestBody = ParamsIdxReqParams

// GetIndexHashicorpJSONRequestBody defines body for GetIndexHashicorp for application/json ContentType.
type GetIndexHashicorpJSONRequestBody = ParamsIdxReqParams

// GetIndexHaskellSadbJSONRequestBody defines body for GetIndexHaskellSadb for application/json ContentType.
type GetIndexHaskellSadbJSONRequestBody = ParamsIdxReqParams

// GetIndexHclJSONRequestBody defines body for GetIndexHcl for application/json ContentType.
type GetIndexHclJSONRequestBody = ParamsIdxReqParams

// GetIndexHexJSONRequestBody defines body for GetIndexHex for application/json ContentType.
type GetIndexHexJSONRequestBody = ParamsIdxReqParams

// GetIndexHikvisionJSONRequestBody defines body for GetIndexHikvision for application/json ContentType.
type GetIndexHikvisionJSONRequestBody = ParamsIdxReqParams

// GetIndexHillromJSONRequestBody defines body for GetIndexHillrom for application/json ContentType.
type GetIndexHillromJSONRequestBody = ParamsIdxReqParams

// GetIndexHitachiJSONRequestBody defines body for GetIndexHitachi for application/json ContentType.
type GetIndexHitachiJSONRequestBody = ParamsIdxReqParams

// GetIndexHitachiEnergyJSONRequestBody defines body for GetIndexHitachiEnergy for application/json ContentType.
type GetIndexHitachiEnergyJSONRequestBody = ParamsIdxReqParams

// GetIndexHkcertJSONRequestBody defines body for GetIndexHkcert for application/json ContentType.
type GetIndexHkcertJSONRequestBody = ParamsIdxReqParams

// GetIndexHoneywellJSONRequestBody defines body for GetIndexHoneywell for application/json ContentType.
type GetIndexHoneywellJSONRequestBody = ParamsIdxReqParams

// GetIndexHpJSONRequestBody defines body for GetIndexHp for application/json ContentType.
type GetIndexHpJSONRequestBody = ParamsIdxReqParams

// GetIndexHuaweiEulerosJSONRequestBody defines body for GetIndexHuaweiEuleros for application/json ContentType.
type GetIndexHuaweiEulerosJSONRequestBody = ParamsIdxReqParams

// GetIndexHuaweiIpsJSONRequestBody defines body for GetIndexHuaweiIps for application/json ContentType.
type GetIndexHuaweiIpsJSONRequestBody = ParamsIdxReqParams

// GetIndexHuaweiPsirtJSONRequestBody defines body for GetIndexHuaweiPsirt for application/json ContentType.
type GetIndexHuaweiPsirtJSONRequestBody = ParamsIdxReqParams

// GetIndexIavaJSONRequestBody defines body for GetIndexIava for application/json ContentType.
type GetIndexIavaJSONRequestBody = ParamsIdxReqParams

// GetIndexIbmJSONRequestBody defines body for GetIndexIbm for application/json ContentType.
type GetIndexIbmJSONRequestBody = ParamsIdxReqParams

// GetIndexIdemiaJSONRequestBody defines body for GetIndexIdemia for application/json ContentType.
type GetIndexIdemiaJSONRequestBody = ParamsIdxReqParams

// GetIndexIlAlertsJSONRequestBody defines body for GetIndexIlAlerts for application/json ContentType.
type GetIndexIlAlertsJSONRequestBody = ParamsIdxReqParams

// GetIndexIlVulnerabilitiesJSONRequestBody defines body for GetIndexIlVulnerabilities for application/json ContentType.
type GetIndexIlVulnerabilitiesJSONRequestBody = ParamsIdxReqParams

// GetIndexIncibeJSONRequestBody defines body for GetIndexIncibe for application/json ContentType.
type GetIndexIncibeJSONRequestBody = ParamsIdxReqParams

// GetIndexInitialAccessJSONRequestBody defines body for GetIndexInitialAccess for application/json ContentType.
type GetIndexInitialAccessJSONRequestBody = ParamsIdxReqParams

// GetIndexInitialAccessGitJSONRequestBody defines body for GetIndexInitialAccessGit for application/json ContentType.
type GetIndexInitialAccessGitJSONRequestBody = ParamsIdxReqParams

// GetIndexIntelJSONRequestBody defines body for GetIndexIntel for application/json ContentType.
type GetIndexIntelJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel10dJSONRequestBody defines body for GetIndexIpintel10d for application/json ContentType.
type GetIndexIpintel10dJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel30dJSONRequestBody defines body for GetIndexIpintel30d for application/json ContentType.
type GetIndexIpintel30dJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel3dJSONRequestBody defines body for GetIndexIpintel3d for application/json ContentType.
type GetIndexIpintel3dJSONRequestBody = ParamsIdxReqParams

// GetIndexIpintel90dJSONRequestBody defines body for GetIndexIpintel90d for application/json ContentType.
type GetIndexIpintel90dJSONRequestBody = ParamsIdxReqParams

// GetIndexIstioJSONRequestBody defines body for GetIndexIstio for application/json ContentType.
type GetIndexIstioJSONRequestBody = ParamsIdxReqParams

// GetIndexIvantiJSONRequestBody defines body for GetIndexIvanti for application/json ContentType.
type GetIndexIvantiJSONRequestBody = ParamsIdxReqParams

// GetIndexIvantiRssJSONRequestBody defines body for GetIndexIvantiRss for application/json ContentType.
type GetIndexIvantiRssJSONRequestBody = ParamsIdxReqParams

// GetIndexJenkinsJSONRequestBody defines body for GetIndexJenkins for application/json ContentType.
type GetIndexJenkinsJSONRequestBody = ParamsIdxReqParams

// GetIndexJetbrainsJSONRequestBody defines body for GetIndexJetbrains for application/json ContentType.
type GetIndexJetbrainsJSONRequestBody = ParamsIdxReqParams

// GetIndexJfrogJSONRequestBody defines body for GetIndexJfrog for application/json ContentType.
type GetIndexJfrogJSONRequestBody = ParamsIdxReqParams

// GetIndexJnjJSONRequestBody defines body for GetIndexJnj for application/json ContentType.
type GetIndexJnjJSONRequestBody = ParamsIdxReqParams

// GetIndexJvndbJSONRequestBody defines body for GetIndexJvndb for application/json ContentType.
type GetIndexJvndbJSONRequestBody = ParamsIdxReqParams

// GetIndexKasperskyIcsCertJSONRequestBody defines body for GetIndexKasperskyIcsCert for application/json ContentType.
type GetIndexKasperskyIcsCertJSONRequestBody = ParamsIdxReqParams

// GetIndexKrcertSecurityNoticesJSONRequestBody defines body for GetIndexKrcertSecurityNotices for application/json ContentType.
type GetIndexKrcertSecurityNoticesJSONRequestBody = ParamsIdxReqParams

// GetIndexKrcertVulnerabilitiesJSONRequestBody defines body for GetIndexKrcertVulnerabilities for application/json ContentType.
type GetIndexKrcertVulnerabilitiesJSONRequestBody = ParamsIdxReqParams

// GetIndexKubernetesJSONRequestBody defines body for GetIndexKubernetes for application/json ContentType.
type GetIndexKubernetesJSONRequestBody = ParamsIdxReqParams

// GetIndexLenovoJSONRequestBody defines body for GetIndexLenovo for application/json ContentType.
type GetIndexLenovoJSONRequestBody = ParamsIdxReqParams

// GetIndexLexmarkJSONRequestBody defines body for GetIndexLexmark for application/json ContentType.
type GetIndexLexmarkJSONRequestBody = ParamsIdxReqParams

// GetIndexLgJSONRequestBody defines body for GetIndexLg for application/json ContentType.
type GetIndexLgJSONRequestBody = ParamsIdxReqParams

// GetIndexLibreOfficeJSONRequestBody defines body for GetIndexLibreOffice for application/json ContentType.
type GetIndexLibreOfficeJSONRequestBody = ParamsIdxReqParams

// GetIndexLinuxJSONRequestBody defines body for GetIndexLinux for application/json ContentType.
type GetIndexLinuxJSONRequestBody = ParamsIdxReqParams

// GetIndexMFilesJSONRequestBody defines body for GetIndexMFiles for application/json ContentType.
type GetIndexMFilesJSONRequestBody = ParamsIdxReqParams

// GetIndexMacertJSONRequestBody defines body for GetIndexMacert for application/json ContentType.
type GetIndexMacertJSONRequestBody = ParamsIdxReqParams

// GetIndexManageengineJSONRequestBody defines body for GetIndexManageengine for application/json ContentType.
type GetIndexManageengineJSONRequestBody = ParamsIdxReqParams

// GetIndexMavenJSONRequestBody defines body for GetIndexMaven for application/json ContentType.
type GetIndexMavenJSONRequestBody = ParamsIdxReqParams

// GetIndexMbedTlsJSONRequestBody defines body for GetIndexMbedTls for application/json ContentType.
type GetIndexMbedTlsJSONRequestBody = ParamsIdxReqParams

// GetIndexMediatekJSONRequestBody defines body for GetIndexMediatek for application/json ContentType.
type GetIndexMediatekJSONRequestBody = ParamsIdxReqParams

// GetIndexMedtronicJSONRequestBody defines body for GetIndexMedtronic for application/json ContentType.
type GetIndexMedtronicJSONRequestBody = ParamsIdxReqParams

// GetIndexMendixJSONRequestBody defines body for GetIndexMendix for application/json ContentType.
type GetIndexMendixJSONRequestBody = ParamsIdxReqParams

// GetIndexMetasploitJSONRequestBody defines body for GetIndexMetasploit for application/json ContentType.
type GetIndexMetasploitJSONRequestBody = ParamsIdxReqParams

// GetIndexMicrosoftCvrfJSONRequestBody defines body for GetIndexMicrosoftCvrf for application/json ContentType.
type GetIndexMicrosoftCvrfJSONRequestBody = ParamsIdxReqParams

// GetIndexMicrosoftKbJSONRequestBody defines body for GetIndexMicrosoftKb for application/json ContentType.
type GetIndexMicrosoftKbJSONRequestBody = ParamsIdxReqParams

// GetIndexMikrotikJSONRequestBody defines body for GetIndexMikrotik for application/json ContentType.
type GetIndexMikrotikJSONRequestBody = ParamsIdxReqParams

// GetIndexMindrayJSONRequestBody defines body for GetIndexMindray for application/json ContentType.
type GetIndexMindrayJSONRequestBody = ParamsIdxReqParams

// GetIndexMispThreatActorsJSONRequestBody defines body for GetIndexMispThreatActors for application/json ContentType.
type GetIndexMispThreatActorsJSONRequestBody = ParamsIdxReqParams

// GetIndexMitelJSONRequestBody defines body for GetIndexMitel for application/json ContentType.
type GetIndexMitelJSONRequestBody = ParamsIdxReqParams

// GetIndexMitreAttackCveJSONRequestBody defines body for GetIndexMitreAttackCve for application/json ContentType.
type GetIndexMitreAttackCveJSONRequestBody = ParamsIdxReqParams

// GetIndexMitreCveJSONRequestBody defines body for GetIndexMitreCve for application/json ContentType.
type GetIndexMitreCveJSONRequestBody = ParamsIdxReqParams

// GetIndexMitsubishiElectricJSONRequestBody defines body for GetIndexMitsubishiElectric for application/json ContentType.
type GetIndexMitsubishiElectricJSONRequestBody = ParamsIdxReqParams

// GetIndexMongodbJSONRequestBody defines body for GetIndexMongodb for application/json ContentType.
type GetIndexMongodbJSONRequestBody = ParamsIdxReqParams

// GetIndexMoxaJSONRequestBody defines body for GetIndexMoxa for application/json ContentType.
type GetIndexMoxaJSONRequestBody = ParamsIdxReqParams

// GetIndexMozillaJSONRequestBody defines body for GetIndexMozilla for application/json ContentType.
type GetIndexMozillaJSONRequestBody = ParamsIdxReqParams

// GetIndexNaverJSONRequestBody defines body for GetIndexNaver for application/json ContentType.
type GetIndexNaverJSONRequestBody = ParamsIdxReqParams

// GetIndexNecJSONRequestBody defines body for GetIndexNec for application/json ContentType.
type GetIndexNecJSONRequestBody = ParamsIdxReqParams

// GetIndexNetappJSONRequestBody defines body for GetIndexNetapp for application/json ContentType.
type GetIndexNetappJSONRequestBody = ParamsIdxReqParams

// GetIndexNetgateJSONRequestBody defines body for GetIndexNetgate for application/json ContentType.
type GetIndexNetgateJSONRequestBody = ParamsIdxReqParams

// GetIndexNetgearJSONRequestBody defines body for GetIndexNetgear for application/json ContentType.
type GetIndexNetgearJSONRequestBody = ParamsIdxReqParams

// GetIndexNetskopeJSONRequestBody defines body for GetIndexNetskope for application/json ContentType.
type GetIndexNetskopeJSONRequestBody = ParamsIdxReqParams

// GetIndexNginxJSONRequestBody defines body for GetIndexNginx for application/json ContentType.
type GetIndexNginxJSONRequestBody = ParamsIdxReqParams

// GetIndexNhsJSONRequestBody defines body for GetIndexNhs for application/json ContentType.
type GetIndexNhsJSONRequestBody = ParamsIdxReqParams

// GetIndexNiJSONRequestBody defines body for GetIndexNi for application/json ContentType.
type GetIndexNiJSONRequestBody = ParamsIdxReqParams

// GetIndexNistNvdJSONRequestBody defines body for GetIndexNistNvd for application/json ContentType.
type GetIndexNistNvdJSONRequestBody = ParamsIdxReqParams

// GetIndexNistNvd2JSONRequestBody defines body for GetIndexNistNvd2 for application/json ContentType.
type GetIndexNistNvd2JSONRequestBody = ParamsIdxReqParams

// GetIndexNistNvd2CpematchJSONRequestBody defines body for GetIndexNistNvd2Cpematch for application/json ContentType.
type GetIndexNistNvd2CpematchJSONRequestBody = ParamsIdxReqParams

// GetIndexNodeSecurityJSONRequestBody defines body for GetIndexNodeSecurity for application/json ContentType.
type GetIndexNodeSecurityJSONRequestBody = ParamsIdxReqParams

// GetIndexNodejsJSONRequestBody defines body for GetIndexNodejs for application/json ContentType.
type GetIndexNodejsJSONRequestBody = ParamsIdxReqParams

// GetIndexNokiaJSONRequestBody defines body for GetIndexNokia for application/json ContentType.
type GetIndexNokiaJSONRequestBody = ParamsIdxReqParams

// GetIndexNozomiJSONRequestBody defines body for GetIndexNozomi for application/json ContentType.
type GetIndexNozomiJSONRequestBody = ParamsIdxReqParams

// GetIndexNpmJSONRequestBody defines body for GetIndexNpm for application/json ContentType.
type GetIndexNpmJSONRequestBody = ParamsIdxReqParams

// GetIndexNugetJSONRequestBody defines body for GetIndexNuget for application/json ContentType.
type GetIndexNugetJSONRequestBody = ParamsIdxReqParams

// GetIndexNvidiaJSONRequestBody defines body for GetIndexNvidia for application/json ContentType.
type GetIndexNvidiaJSONRequestBody = ParamsIdxReqParams

// GetIndexNzAdvisoriesJSONRequestBody defines body for GetIndexNzAdvisories for application/json ContentType.
type GetIndexNzAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexOctopusDeployJSONRequestBody defines body for GetIndexOctopusDeploy for application/json ContentType.
type GetIndexOctopusDeployJSONRequestBody = ParamsIdxReqParams

// GetIndexOktaJSONRequestBody defines body for GetIndexOkta for application/json ContentType.
type GetIndexOktaJSONRequestBody = ParamsIdxReqParams

// GetIndexOmronJSONRequestBody defines body for GetIndexOmron for application/json ContentType.
type GetIndexOmronJSONRequestBody = ParamsIdxReqParams

// GetIndexOneEJSONRequestBody defines body for GetIndexOneE for application/json ContentType.
type GetIndexOneEJSONRequestBody = ParamsIdxReqParams

// GetIndexOpamJSONRequestBody defines body for GetIndexOpam for application/json ContentType.
type GetIndexOpamJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenCvdbJSONRequestBody defines body for GetIndexOpenCvdb for application/json ContentType.
type GetIndexOpenCvdbJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenbsdJSONRequestBody defines body for GetIndexOpenbsd for application/json ContentType.
type GetIndexOpenbsdJSONRequestBody = ParamsIdxReqParams

// GetIndexOpensshJSONRequestBody defines body for GetIndexOpenssh for application/json ContentType.
type GetIndexOpensshJSONRequestBody = ParamsIdxReqParams

// GetIndexOpensslSecadvJSONRequestBody defines body for GetIndexOpensslSecadv for application/json ContentType.
type GetIndexOpensslSecadvJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenstackJSONRequestBody defines body for GetIndexOpenstack for application/json ContentType.
type GetIndexOpenstackJSONRequestBody = ParamsIdxReqParams

// GetIndexOpenwrtJSONRequestBody defines body for GetIndexOpenwrt for application/json ContentType.
type GetIndexOpenwrtJSONRequestBody = ParamsIdxReqParams

// GetIndexOracleJSONRequestBody defines body for GetIndexOracle for application/json ContentType.
type GetIndexOracleJSONRequestBody = ParamsIdxReqParams

// GetIndexOracleCpuJSONRequestBody defines body for GetIndexOracleCpu for application/json ContentType.
type GetIndexOracleCpuJSONRequestBody = ParamsIdxReqParams

// GetIndexOracleCpuCsafJSONRequestBody defines body for GetIndexOracleCpuCsaf for application/json ContentType.
type GetIndexOracleCpuCsafJSONRequestBody = ParamsIdxReqParams

// GetIndexOsvJSONRequestBody defines body for GetIndexOsv for application/json ContentType.
type GetIndexOsvJSONRequestBody = ParamsIdxReqParams

// GetIndexOtrsJSONRequestBody defines body for GetIndexOtrs for application/json ContentType.
type GetIndexOtrsJSONRequestBody = ParamsIdxReqParams

// GetIndexOwncloudJSONRequestBody defines body for GetIndexOwncloud for application/json ContentType.
type GetIndexOwncloudJSONRequestBody = ParamsIdxReqParams

// GetIndexPalantirJSONRequestBody defines body for GetIndexPalantir for application/json ContentType.
type GetIndexPalantirJSONRequestBody = ParamsIdxReqParams

// GetIndexPaloAltoJSONRequestBody defines body for GetIndexPaloAlto for application/json ContentType.
type GetIndexPaloAltoJSONRequestBody = ParamsIdxReqParams

// GetIndexPanasonicJSONRequestBody defines body for GetIndexPanasonic for application/json ContentType.
type GetIndexPanasonicJSONRequestBody = ParamsIdxReqParams

// GetIndexPapercutJSONRequestBody defines body for GetIndexPapercut for application/json ContentType.
type GetIndexPapercutJSONRequestBody = ParamsIdxReqParams

// GetIndexPegaJSONRequestBody defines body for GetIndexPega for application/json ContentType.
type GetIndexPegaJSONRequestBody = ParamsIdxReqParams

// GetIndexPhilipsJSONRequestBody defines body for GetIndexPhilips for application/json ContentType.
type GetIndexPhilipsJSONRequestBody = ParamsIdxReqParams

// GetIndexPhoenixContactJSONRequestBody defines body for GetIndexPhoenixContact for application/json ContentType.
type GetIndexPhoenixContactJSONRequestBody = ParamsIdxReqParams

// GetIndexPostgressqlJSONRequestBody defines body for GetIndexPostgressql for application/json ContentType.
type GetIndexPostgressqlJSONRequestBody = ParamsIdxReqParams

// GetIndexProgressJSONRequestBody defines body for GetIndexProgress for application/json ContentType.
type GetIndexProgressJSONRequestBody = ParamsIdxReqParams

// GetIndexProofpointJSONRequestBody defines body for GetIndexProofpoint for application/json ContentType.
type GetIndexProofpointJSONRequestBody = ParamsIdxReqParams

// GetIndexPubJSONRequestBody defines body for GetIndexPub for application/json ContentType.
type GetIndexPubJSONRequestBody = ParamsIdxReqParams

// GetIndexPureStorageJSONRequestBody defines body for GetIndexPureStorage for application/json ContentType.
type GetIndexPureStorageJSONRequestBody = ParamsIdxReqParams

// GetIndexPypaAdvisoriesJSONRequestBody defines body for GetIndexPypaAdvisories for application/json ContentType.
type GetIndexPypaAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexPypiJSONRequestBody defines body for GetIndexPypi for application/json ContentType.
type GetIndexPypiJSONRequestBody = ParamsIdxReqParams

// GetIndexQnapJSONRequestBody defines body for GetIndexQnap for application/json ContentType.
type GetIndexQnapJSONRequestBody = ParamsIdxReqParams

// GetIndexQualcommJSONRequestBody defines body for GetIndexQualcomm for application/json ContentType.
type GetIndexQualcommJSONRequestBody = ParamsIdxReqParams

// GetIndexQualysJSONRequestBody defines body for GetIndexQualys for application/json ContentType.
type GetIndexQualysJSONRequestBody = ParamsIdxReqParams

// GetIndexRansomwareJSONRequestBody defines body for GetIndexRansomware for application/json ContentType.
type GetIndexRansomwareJSONRequestBody = ParamsIdxReqParams

// GetIndexRedhatJSONRequestBody defines body for GetIndexRedhat for application/json ContentType.
type GetIndexRedhatJSONRequestBody = ParamsIdxReqParams

// GetIndexRenesasJSONRequestBody defines body for GetIndexRenesas for application/json ContentType.
type GetIndexRenesasJSONRequestBody = ParamsIdxReqParams

// GetIndexReviveJSONRequestBody defines body for GetIndexRevive for application/json ContentType.
type GetIndexReviveJSONRequestBody = ParamsIdxReqParams

// GetIndexRockwellJSONRequestBody defines body for GetIndexRockwell for application/json ContentType.
type GetIndexRockwellJSONRequestBody = ParamsIdxReqParams

// GetIndexRockyJSONRequestBody defines body for GetIndexRocky for application/json ContentType.
type GetIndexRockyJSONRequestBody = ParamsIdxReqParams

// GetIndexRuckusJSONRequestBody defines body for GetIndexRuckus for application/json ContentType.
type GetIndexRuckusJSONRequestBody = ParamsIdxReqParams

// GetIndexRustsecAdvisoriesJSONRequestBody defines body for GetIndexRustsecAdvisories for application/json ContentType.
type GetIndexRustsecAdvisoriesJSONRequestBody = ParamsIdxReqParams

// GetIndexSacertJSONRequestBody defines body for GetIndexSacert for application/json ContentType.
type GetIndexSacertJSONRequestBody = ParamsIdxReqParams

// GetIndexSaintJSONRequestBody defines body for GetIndexSaint for application/json ContentType.
type GetIndexSaintJSONRequestBody = ParamsIdxReqParams

// GetIndexSalesforceJSONRequestBody defines body for GetIndexSalesforce for application/json ContentType.
type GetIndexSalesforceJSONRequestBody = ParamsIdxReqParams

// GetIndexSambaJSONRequestBody defines body for GetIndexSamba for application/json ContentType.
type GetIndexSambaJSONRequestBody = ParamsIdxReqParams

// GetIndexSapJSONRequestBody defines body for GetIndexSap for application/json ContentType.
type GetIndexSapJSONRequestBody = ParamsIdxReqParams

// GetIndexSchneiderElectricJSONRequestBody defines body for GetIndexSchneiderElectric for application/json ContentType.
type GetIndexSchneiderElectricJSONRequestBody = ParamsIdxReqParams

// GetIndexSecConsultJSONRequestBody defines body for GetIndexSecConsult for application/json ContentType.
type GetIndexSecConsultJSONRequestBody = ParamsIdxReqParams

// GetIndexSelJSONRequestBody defines body for GetIndexSel for application/json ContentType.
type GetIndexSelJSONRequestBody = ParamsIdxReqParams

// GetIndexSentineloneJSONRequestBody defines body for GetIndexSentinelone for application/json ContentType.
type GetIndexSentineloneJSONRequestBody = ParamsIdxReqParams

// GetIndexServicenowJSONRequestBody defines body for GetIndexServicenow for application/json ContentType.
type GetIndexServicenowJSONRequestBody = ParamsIdxReqParams

// GetIndexShadowserverExploitedJSONRequestBody defines body for GetIndexShadowserverExploited for application/json ContentType.
type GetIndexShadowserverExploitedJSONRequestBody = ParamsIdxReqParams

// GetIndexSickJSONRequestBody defines body for GetIndexSick for application/json ContentType.
type GetIndexSickJSONRequestBody = ParamsIdxReqParams

// GetIndexSiemensJSONRequestBody defines body for GetIndexSiemens for application/json ContentType.
type GetIndexSiemensJSONRequestBody = ParamsIdxReqParams

// GetIndexSierraWirelessJSONRequestBody defines body for GetIndexSierraWireless for application/json ContentType.
type GetIndexSierraWirelessJSONRequestBody = ParamsIdxReqParams

// GetIndexSingcertJSONRequestBody defines body for GetIndexSingcert for application/json ContentType.
type GetIndexSingcertJSONRequestBody = ParamsIdxReqParams

// GetIndexSlackwareJSONRequestBody defines body for GetIndexSlackware for application/json ContentType.
type GetIndexSlackwareJSONRequestBody = ParamsIdxReqParams

// GetIndexSolarwindsJSONRequestBody defines body for GetIndexSolarwinds for application/json ContentType.
type GetIndexSolarwindsJSONRequestBody = ParamsIdxReqParams

// GetIndexSolrJSONRequestBody defines body for GetIndexSolr for application/json ContentType.
type GetIndexSolrJSONRequestBody = ParamsIdxReqParams

// GetIndexSonicwallJSONRequestBody defines body for GetIndexSonicwall for application/json ContentType.
type GetIndexSonicwallJSONRequestBody = ParamsIdxReqParams

// GetIndexSpacelabsHealthcareJSONRequestBody defines body for GetIndexSpacelabsHealthcare for application/json ContentType.
type GetIndexSpacelabsHealthcareJSONRequestBody = ParamsIdxReqParams

// GetIndexSpringJSONRequestBody defines body for GetIndexSpring for application/json ContentType.
type GetIndexSpringJSONRequestBody = ParamsIdxReqParams

// GetIndexSsdJSONRequestBody defines body for GetIndexSsd for application/json ContentType.
type GetIndexSsdJSONRequestBody = ParamsIdxReqParams

// GetIndexStormshieldJSONRequestBody defines body for GetIndexStormshield for application/json ContentType.
type GetIndexStormshieldJSONRequestBody = ParamsIdxReqParams

// GetIndexStrykerJSONRequestBody defines body for GetIndexStryker for application/json ContentType.
type GetIndexStrykerJSONRequestBody = ParamsIdxReqParams

// GetIndexSudoJSONRequestBody defines body for GetIndexSudo for application/json ContentType.
type GetIndexSudoJSONRequestBody = ParamsIdxReqParams

// GetIndexSuseJSONRequestBody defines body for GetIndexSuse for application/json ContentType.
type GetIndexSuseJSONRequestBody = ParamsIdxReqParams

// GetIndexSwiftJSONRequestBody defines body for GetIndexSwift for application/json ContentType.
type GetIndexSwiftJSONRequestBody = ParamsIdxReqParams

// GetIndexSwisslogHealthcareJSONRequestBody defines body for GetIndexSwisslogHealthcare for application/json ContentType.
type GetIndexSwisslogHealthcareJSONRequestBody = ParamsIdxReqParams

// GetIndexSymfonyJSONRequestBody defines body for GetIndexSymfony for application/json ContentType.
type GetIndexSymfonyJSONRequestBody = ParamsIdxReqParams

// GetIndexSyncrosoftJSONRequestBody defines body for GetIndexSyncrosoft for application/json ContentType.
type GetIndexSyncrosoftJSONRequestBody = ParamsIdxReqParams

// GetIndexSynologyJSONRequestBody defines body for GetIndexSynology for application/json ContentType.
type GetIndexSynologyJSONRequestBody = ParamsIdxReqParams

// GetIndexTeamviewerJSONRequestBody defines body for GetIndexTeamviewer for application/json ContentType.
type GetIndexTeamviewerJSONRequestBody = ParamsIdxReqParams

// GetIndexTencentJSONRequestBody defines body for GetIndexTencent for application/json ContentType.
type GetIndexTencentJSONRequestBody = ParamsIdxReqParams

// GetIndexThalesJSONRequestBody defines body for GetIndexThales for application/json ContentType.
type GetIndexThalesJSONRequestBody = ParamsIdxReqParams

// GetIndexThemissinglinkJSONRequestBody defines body for GetIndexThemissinglink for application/json ContentType.
type GetIndexThemissinglinkJSONRequestBody = ParamsIdxReqParams

// GetIndexThreatActorsJSONRequestBody defines body for GetIndexThreatActors for application/json ContentType.
type GetIndexThreatActorsJSONRequestBody = ParamsIdxReqParams

// GetIndexTiJSONRequestBody defines body for GetIndexTi for application/json ContentType.
type GetIndexTiJSONRequestBody = ParamsIdxReqParams

// GetIndexTibcoJSONRequestBody defines body for GetIndexTibco for application/json ContentType.
type GetIndexTibcoJSONRequestBody = ParamsIdxReqParams

// GetIndexTpLinkJSONRequestBody defines body for GetIndexTpLink for application/json ContentType.
type GetIndexTpLinkJSONRequestBody = ParamsIdxReqParams

// GetIndexTraneTechnologyJSONRequestBody defines body for GetIndexTraneTechnology for application/json ContentType.
type GetIndexTraneTechnologyJSONRequestBody = ParamsIdxReqParams

// GetIndexTrendmicroJSONRequestBody defines body for GetIndexTrendmicro for application/json ContentType.
type GetIndexTrendmicroJSONRequestBody = ParamsIdxReqParams

// GetIndexTrustwaveJSONRequestBody defines body for GetIndexTrustwave for application/json ContentType.
type GetIndexTrustwaveJSONRequestBody = ParamsIdxReqParams

// GetIndexTwcertJSONRequestBody defines body for GetIndexTwcert for application/json ContentType.
type GetIndexTwcertJSONRequestBody = ParamsIdxReqParams

// GetIndexUbiquitiJSONRequestBody defines body for GetIndexUbiquiti for application/json ContentType.
type GetIndexUbiquitiJSONRequestBody = ParamsIdxReqParams

// GetIndexUbuntuJSONRequestBody defines body for GetIndexUbuntu for application/json ContentType.
type GetIndexUbuntuJSONRequestBody = ParamsIdxReqParams

// GetIndexUnifyJSONRequestBody defines body for GetIndexUnify for application/json ContentType.
type GetIndexUnifyJSONRequestBody = ParamsIdxReqParams

// GetIndexUnisocJSONRequestBody defines body for GetIndexUnisoc for application/json ContentType.
type GetIndexUnisocJSONRequestBody = ParamsIdxReqParams

// GetIndexUsdJSONRequestBody defines body for GetIndexUsd for application/json ContentType.
type GetIndexUsdJSONRequestBody = ParamsIdxReqParams

// GetIndexUsomJSONRequestBody defines body for GetIndexUsom for application/json ContentType.
type GetIndexUsomJSONRequestBody = ParamsIdxReqParams

// GetIndexVandykeJSONRequestBody defines body for GetIndexVandyke for application/json ContentType.
type GetIndexVandykeJSONRequestBody = ParamsIdxReqParams

// GetIndexVapidlabsJSONRequestBody defines body for GetIndexVapidlabs for application/json ContentType.
type GetIndexVapidlabsJSONRequestBody = ParamsIdxReqParams

// GetIndexVdeJSONRequestBody defines body for GetIndexVde for application/json ContentType.
type GetIndexVdeJSONRequestBody = ParamsIdxReqParams

// GetIndexVeeamJSONRequestBody defines body for GetIndexVeeam for application/json ContentType.
type GetIndexVeeamJSONRequestBody = ParamsIdxReqParams

// GetIndexVoidsecJSONRequestBody defines body for GetIndexVoidsec for application/json ContentType.
type GetIndexVoidsecJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckConfigJSONRequestBody defines body for GetIndexVulncheckConfig for application/json ContentType.
type GetIndexVulncheckConfigJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckKevJSONRequestBody defines body for GetIndexVulncheckKev for application/json ContentType.
type GetIndexVulncheckKevJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckNvdJSONRequestBody defines body for GetIndexVulncheckNvd for application/json ContentType.
type GetIndexVulncheckNvdJSONRequestBody = ParamsIdxReqParams

// GetIndexVulncheckNvd2JSONRequestBody defines body for GetIndexVulncheckNvd2 for application/json ContentType.
type GetIndexVulncheckNvd2JSONRequestBody = ParamsIdxReqParams

// GetIndexVulnerabilityAliasesJSONRequestBody defines body for GetIndexVulnerabilityAliases for application/json ContentType.
type GetIndexVulnerabilityAliasesJSONRequestBody = ParamsIdxReqParams

// GetIndexVyaireJSONRequestBody defines body for GetIndexVyaire for application/json ContentType.
type GetIndexVyaireJSONRequestBody = ParamsIdxReqParams

// GetIndexWatchguardJSONRequestBody defines body for GetIndexWatchguard for application/json ContentType.
type GetIndexWatchguardJSONRequestBody = ParamsIdxReqParams

// GetIndexWhatsappJSONRequestBody defines body for GetIndexWhatsapp for application/json ContentType.
type GetIndexWhatsappJSONRequestBody = ParamsIdxReqParams

// GetIndexWibuJSONRequestBody defines body for GetIndexWibu for application/json ContentType.
type GetIndexWibuJSONRequestBody = ParamsIdxReqParams

// GetIndexWiresharkJSONRequestBody defines body for GetIndexWireshark for application/json ContentType.
type GetIndexWiresharkJSONRequestBody = ParamsIdxReqParams

// GetIndexWithSecureJSONRequestBody defines body for GetIndexWithSecure for application/json ContentType.
type GetIndexWithSecureJSONRequestBody = ParamsIdxReqParams

// GetIndexWolfiJSONRequestBody defines body for GetIndexWolfi for application/json ContentType.
type GetIndexWolfiJSONRequestBody = ParamsIdxReqParams

// GetIndexWolfsslJSONRequestBody defines body for GetIndexWolfssl for application/json ContentType.
type GetIndexWolfsslJSONRequestBody = ParamsIdxReqParams

// GetIndexWordfenceJSONRequestBody defines body for GetIndexWordfence for application/json ContentType.
type GetIndexWordfenceJSONRequestBody = ParamsIdxReqParams

// GetIndexXenJSONRequestBody defines body for GetIndexXen for application/json ContentType.
type GetIndexXenJSONRequestBody = ParamsIdxReqParams

// GetIndexXeroxJSONRequestBody defines body for GetIndexXerox for application/json ContentType.
type GetIndexXeroxJSONRequestBody = ParamsIdxReqParams

// GetIndexXiaomiJSONRequestBody defines body for GetIndexXiaomi for application/json ContentType.
type GetIndexXiaomiJSONRequestBody = ParamsIdxReqParams

// GetIndexXylemJSONRequestBody defines body for GetIndexXylem for application/json ContentType.
type GetIndexXylemJSONRequestBody = ParamsIdxReqParams

// GetIndexYokogawaJSONRequestBody defines body for GetIndexYokogawa for application/json ContentType.
type GetIndexYokogawaJSONRequestBody = ParamsIdxReqParams

// GetIndexYubicoJSONRequestBody defines body for GetIndexYubico for application/json ContentType.
type GetIndexYubicoJSONRequestBody = ParamsIdxReqParams

// GetIndexZdiJSONRequestBody defines body for GetIndexZdi for application/json ContentType.
type GetIndexZdiJSONRequestBody = ParamsIdxReqParams

// GetIndexZeroscienceJSONRequestBody defines body for GetIndexZeroscience for application/json ContentType.
type GetIndexZeroscienceJSONRequestBody = ParamsIdxReqParams

// GetIndexZimbraJSONRequestBody defines body for GetIndexZimbra for application/json ContentType.
type GetIndexZimbraJSONRequestBody = ParamsIdxReqParams

// GetIndexZoomJSONRequestBody defines body for GetIndexZoom for application/json ContentType.
type GetIndexZoomJSONRequestBody = ParamsIdxReqParams

// GetIndexZscalerJSONRequestBody defines body for GetIndexZscaler for application/json ContentType.
type GetIndexZscalerJSONRequestBody = ParamsIdxReqParams

// GetIndexZusoJSONRequestBody defines body for GetIndexZuso for application/json ContentType.
type GetIndexZusoJSONRequestBody = ParamsIdxReqParams

// GetIndexZyxelJSONRequestBody defines body for GetIndexZyxel for application/json ContentType.
type GetIndexZyxelJSONRequestBody = ParamsIdxReqParams

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBackupIndex request
	GetBackupIndex(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCpe request
	GetCpe(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndex request
	GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexA10WithBody request with any body
	GetIndexA10WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexA10(ctx context.Context, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAbbWithBody request with any body
	GetIndexAbbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAbb(ctx context.Context, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAbbottWithBody request with any body
	GetIndexAbbottWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAbbott(ctx context.Context, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAbsoluteWithBody request with any body
	GetIndexAbsoluteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAbsolute(ctx context.Context, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAcronisWithBody request with any body
	GetIndexAcronisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAcronis(ctx context.Context, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAdobeWithBody request with any body
	GetIndexAdobeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAdobe(ctx context.Context, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAdvisoriesWithBody request with any body
	GetIndexAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAdvisories(ctx context.Context, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAlephResearchWithBody request with any body
	GetIndexAlephResearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAlephResearch(ctx context.Context, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAlmaWithBody request with any body
	GetIndexAlmaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAlma(ctx context.Context, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAlpineWithBody request with any body
	GetIndexAlpineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAlpine(ctx context.Context, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAmazonWithBody request with any body
	GetIndexAmazonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAmazon(ctx context.Context, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAmdWithBody request with any body
	GetIndexAmdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAmd(ctx context.Context, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAmiWithBody request with any body
	GetIndexAmiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAmi(ctx context.Context, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAnchoreNvdOverrideWithBody request with any body
	GetIndexAnchoreNvdOverrideWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAnchoreNvdOverride(ctx context.Context, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAndroidWithBody request with any body
	GetIndexAndroidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAndroid(ctx context.Context, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheActivemqWithBody request with any body
	GetIndexApacheActivemqWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheActivemq(ctx context.Context, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheArchivaWithBody request with any body
	GetIndexApacheArchivaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheArchiva(ctx context.Context, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheArrowWithBody request with any body
	GetIndexApacheArrowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheArrow(ctx context.Context, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheCamelWithBody request with any body
	GetIndexApacheCamelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheCamel(ctx context.Context, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheCommonsWithBody request with any body
	GetIndexApacheCommonsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheCommons(ctx context.Context, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheCouchdbWithBody request with any body
	GetIndexApacheCouchdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheCouchdb(ctx context.Context, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheFlinkWithBody request with any body
	GetIndexApacheFlinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheFlink(ctx context.Context, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheGuacamoleWithBody request with any body
	GetIndexApacheGuacamoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheGuacamole(ctx context.Context, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheHadoopWithBody request with any body
	GetIndexApacheHadoopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheHadoop(ctx context.Context, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheHttpWithBody request with any body
	GetIndexApacheHttpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheHttp(ctx context.Context, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheJspwikiWithBody request with any body
	GetIndexApacheJspwikiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheJspwiki(ctx context.Context, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheKafkaWithBody request with any body
	GetIndexApacheKafkaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheKafka(ctx context.Context, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheLoggingservicesWithBody request with any body
	GetIndexApacheLoggingservicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheLoggingservices(ctx context.Context, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheNifiWithBody request with any body
	GetIndexApacheNifiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheNifi(ctx context.Context, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheOfbizWithBody request with any body
	GetIndexApacheOfbizWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheOfbiz(ctx context.Context, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheOpenmeetingsWithBody request with any body
	GetIndexApacheOpenmeetingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheOpenmeetings(ctx context.Context, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheOpenofficeWithBody request with any body
	GetIndexApacheOpenofficeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheOpenoffice(ctx context.Context, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApachePulsarWithBody request with any body
	GetIndexApachePulsarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApachePulsar(ctx context.Context, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheShiroWithBody request with any body
	GetIndexApacheShiroWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheShiro(ctx context.Context, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheSparkWithBody request with any body
	GetIndexApacheSparkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheSpark(ctx context.Context, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheStrutsWithBody request with any body
	GetIndexApacheStrutsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheStruts(ctx context.Context, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheSubversionWithBody request with any body
	GetIndexApacheSubversionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheSubversion(ctx context.Context, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheSupersetWithBody request with any body
	GetIndexApacheSupersetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheSuperset(ctx context.Context, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheTomcatWithBody request with any body
	GetIndexApacheTomcatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheTomcat(ctx context.Context, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexApacheZookeeperWithBody request with any body
	GetIndexApacheZookeeperWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApacheZookeeper(ctx context.Context, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAppcheckWithBody request with any body
	GetIndexAppcheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAppcheck(ctx context.Context, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAppgateWithBody request with any body
	GetIndexAppgateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAppgate(ctx context.Context, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAppleWithBody request with any body
	GetIndexAppleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexApple(ctx context.Context, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexArchWithBody request with any body
	GetIndexArchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexArch(ctx context.Context, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAristaWithBody request with any body
	GetIndexAristaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexArista(ctx context.Context, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexArubaWithBody request with any body
	GetIndexArubaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAruba(ctx context.Context, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAsrgWithBody request with any body
	GetIndexAsrgWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAsrg(ctx context.Context, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAssetnoteWithBody request with any body
	GetIndexAssetnoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAssetnote(ctx context.Context, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAsteriskWithBody request with any body
	GetIndexAsteriskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAsterisk(ctx context.Context, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAsusWithBody request with any body
	GetIndexAsusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAsus(ctx context.Context, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAtlassianWithBody request with any body
	GetIndexAtlassianWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAtlassian(ctx context.Context, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAtlassianVulnsWithBody request with any body
	GetIndexAtlassianVulnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAtlassianVulns(ctx context.Context, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAtredisWithBody request with any body
	GetIndexAtredisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAtredis(ctx context.Context, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAuscertWithBody request with any body
	GetIndexAuscertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAuscert(ctx context.Context, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAutodeskWithBody request with any body
	GetIndexAutodeskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAutodesk(ctx context.Context, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAvayaWithBody request with any body
	GetIndexAvayaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAvaya(ctx context.Context, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAvevaWithBody request with any body
	GetIndexAvevaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAveva(ctx context.Context, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAvigilonWithBody request with any body
	GetIndexAvigilonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAvigilon(ctx context.Context, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAwsWithBody request with any body
	GetIndexAwsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAws(ctx context.Context, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexAxisWithBody request with any body
	GetIndexAxisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexAxis(ctx context.Context, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBandrWithBody request with any body
	GetIndexBandrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBandr(ctx context.Context, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBaxterWithBody request with any body
	GetIndexBaxterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBaxter(ctx context.Context, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBbraunWithBody request with any body
	GetIndexBbraunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBbraun(ctx context.Context, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBdWithBody request with any body
	GetIndexBdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBd(ctx context.Context, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBduWithBody request with any body
	GetIndexBduWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBdu(ctx context.Context, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBeckhoffWithBody request with any body
	GetIndexBeckhoffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBeckhoff(ctx context.Context, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBeldenWithBody request with any body
	GetIndexBeldenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBelden(ctx context.Context, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBeyondTrustWithBody request with any body
	GetIndexBeyondTrustWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBeyondTrust(ctx context.Context, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBinarlyWithBody request with any body
	GetIndexBinarlyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBinarly(ctx context.Context, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBitdefenderWithBody request with any body
	GetIndexBitdefenderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBitdefender(ctx context.Context, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBlackberryWithBody request with any body
	GetIndexBlackberryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBlackberry(ctx context.Context, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBlsWithBody request with any body
	GetIndexBlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBls(ctx context.Context, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBoschWithBody request with any body
	GetIndexBoschWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBosch(ctx context.Context, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBostonScientificWithBody request with any body
	GetIndexBostonScientificWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBostonScientific(ctx context.Context, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexBotnetsWithBody request with any body
	GetIndexBotnetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexBotnets(ctx context.Context, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCaCyberCentreWithBody request with any body
	GetIndexCaCyberCentreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCaCyberCentre(ctx context.Context, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCanvasWithBody request with any body
	GetIndexCanvasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCanvas(ctx context.Context, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCarestreamWithBody request with any body
	GetIndexCarestreamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCarestream(ctx context.Context, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCargoWithBody request with any body
	GetIndexCargoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCargo(ctx context.Context, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCarrierWithBody request with any body
	GetIndexCarrierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCarrier(ctx context.Context, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCblMarinerWithBody request with any body
	GetIndexCblMarinerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCblMariner(ctx context.Context, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCentosWithBody request with any body
	GetIndexCentosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCentos(ctx context.Context, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertBeWithBody request with any body
	GetIndexCertBeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertBe(ctx context.Context, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertUaWithBody request with any body
	GetIndexCertUaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertUa(ctx context.Context, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCerteuWithBody request with any body
	GetIndexCerteuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCerteu(ctx context.Context, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCertfrWithBody request with any body
	GetIndexCertfrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCertfr(ctx context.Context, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexChainguardWithBody request with any body
	GetIndexChainguardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexChainguard(ctx context.Context, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCheckpointWithBody request with any body
	GetIndexCheckpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCheckpoint(ctx context.Context, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexChromeWithBody request with any body
	GetIndexChromeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexChrome(ctx context.Context, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCisaAlertsWithBody request with any body
	GetIndexCisaAlertsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCisaAlerts(ctx context.Context, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCisaKevWithBody request with any body
	GetIndexCisaKevWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCisaKev(ctx context.Context, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCiscoWithBody request with any body
	GetIndexCiscoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCisco(ctx context.Context, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCiscoTalosWithBody request with any body
	GetIndexCiscoTalosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCiscoTalos(ctx context.Context, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCitrixWithBody request with any body
	GetIndexCitrixWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCitrix(ctx context.Context, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexClarotyWithBody request with any body
	GetIndexClarotyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexClaroty(ctx context.Context, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCloudbeesWithBody request with any body
	GetIndexCloudbeesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCloudbees(ctx context.Context, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCloudvulndbWithBody request with any body
	GetIndexCloudvulndbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCloudvulndb(ctx context.Context, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnaCveCountWithBody request with any body
	GetIndexCnaCveCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnaCveCount(ctx context.Context, body GetIndexCnaCveCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnnvdWithBody request with any body
	GetIndexCnnvdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnnvd(ctx context.Context, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnvdBulletinsWithBody request with any body
	GetIndexCnvdBulletinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnvdBulletins(ctx context.Context, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCnvdFlawsWithBody request with any body
	GetIndexCnvdFlawsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCnvdFlaws(ctx context.Context, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCocoapodsWithBody request with any body
	GetIndexCocoapodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCocoapods(ctx context.Context, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCodesysWithBody request with any body
	GetIndexCodesysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCodesys(ctx context.Context, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCompassSecurityWithBody request with any body
	GetIndexCompassSecurityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCompassSecurity(ctx context.Context, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexComposerWithBody request with any body
	GetIndexComposerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexComposer(ctx context.Context, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexConanWithBody request with any body
	GetIndexConanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexConan(ctx context.Context, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCrestronWithBody request with any body
	GetIndexCrestronWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCrestron(ctx context.Context, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCurlWithBody request with any body
	GetIndexCurlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCurl(ctx context.Context, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexCweWithBody request with any body
	GetIndexCweWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexCwe(ctx context.Context, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDahuaWithBody request with any body
	GetIndexDahuaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDahua(ctx context.Context, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDassaultWithBody request with any body
	GetIndexDassaultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDassault(ctx context.Context, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDebianWithBody request with any body
	GetIndexDebianWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDebian(ctx context.Context, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDebianDsaWithBody request with any body
	GetIndexDebianDsaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDebianDsa(ctx context.Context, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDellWithBody request with any body
	GetIndexDellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDell(ctx context.Context, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDeltaWithBody request with any body
	GetIndexDeltaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDelta(ctx context.Context, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDotcmsWithBody request with any body
	GetIndexDotcmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDotcms(ctx context.Context, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDragosWithBody request with any body
	GetIndexDragosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDragos(ctx context.Context, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexDraytekWithBody request with any body
	GetIndexDraytekWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexDraytek(ctx context.Context, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEatonWithBody request with any body
	GetIndexEatonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEaton(ctx context.Context, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexElasticWithBody request with any body
	GetIndexElasticWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexElastic(ctx context.Context, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexElspecWithBody request with any body
	GetIndexElspecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexElspec(ctx context.Context, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEmersonWithBody request with any body
	GetIndexEmersonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEmerson(ctx context.Context, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEolWithBody request with any body
	GetIndexEolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEol(ctx context.Context, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexEpssWithBody request with any body
	GetIndexEpssWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexEpss(ctx context.Context, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExodusIntelWithBody request with any body
	GetIndexExodusIntelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExodusIntel(ctx context.Context, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitChainsWithBody request with any body
	GetIndexExploitChainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploitChains(ctx context.Context, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitdbWithBody request with any body
	GetIndexExploitdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploitdb(ctx context.Context, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexExploitsWithBody request with any body
	GetIndexExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexExploits(ctx context.Context, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFSecureWithBody request with any body
	GetIndexFSecureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFSecure(ctx context.Context, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFastlyWithBody request with any body
	GetIndexFastlyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFastly(ctx context.Context, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFedoraWithBody request with any body
	GetIndexFedoraWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFedora(ctx context.Context, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFilecloudWithBody request with any body
	GetIndexFilecloudWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFilecloud(ctx context.Context, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexForgerockWithBody request with any body
	GetIndexForgerockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexForgerock(ctx context.Context, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFortinetWithBody request with any body
	GetIndexFortinetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFortinet(ctx context.Context, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexFreebsdWithBody request with any body
	GetIndexFreebsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexFreebsd(ctx context.Context, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGallagherWithBody request with any body
	GetIndexGallagherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGallagher(ctx context.Context, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGcpWithBody request with any body
	GetIndexGcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGcp(ctx context.Context, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGeGasWithBody request with any body
	GetIndexGeGasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGeGas(ctx context.Context, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGeHealthcareWithBody request with any body
	GetIndexGeHealthcareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGeHealthcare(ctx context.Context, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGemWithBody request with any body
	GetIndexGemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGem(ctx context.Context, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGenetecWithBody request with any body
	GetIndexGenetecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGenetec(ctx context.Context, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGigabyteWithBody request with any body
	GetIndexGigabyteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGigabyte(ctx context.Context, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGiteeExploitsWithBody request with any body
	GetIndexGiteeExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGiteeExploits(ctx context.Context, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGithubExploitsWithBody request with any body
	GetIndexGithubExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGithubExploits(ctx context.Context, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGithubSecurityAdvisoriesWithBody request with any body
	GetIndexGithubSecurityAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGithubSecurityAdvisories(ctx context.Context, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGitlabAdvisoriesCommunityWithBody request with any body
	GetIndexGitlabAdvisoriesCommunityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGitlabAdvisoriesCommunity(ctx context.Context, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGitlabExploitsWithBody request with any body
	GetIndexGitlabExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGitlabExploits(ctx context.Context, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGnutlsWithBody request with any body
	GetIndexGnutlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGnutls(ctx context.Context, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGolangWithBody request with any body
	GetIndexGolangWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGolang(ctx context.Context, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGoogle0dayItwWithBody request with any body
	GetIndexGoogle0dayItwWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGoogle0dayItw(ctx context.Context, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGoogleContainerOptimizedOsWithBody request with any body
	GetIndexGoogleContainerOptimizedOsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGoogleContainerOptimizedOs(ctx context.Context, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGrafanaWithBody request with any body
	GetIndexGrafanaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGrafana(ctx context.Context, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexGreynoiseMetadataWithBody request with any body
	GetIndexGreynoiseMetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexGreynoiseMetadata(ctx context.Context, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHackageWithBody request with any body
	GetIndexHackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHackage(ctx context.Context, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHarmonyosWithBody request with any body
	GetIndexHarmonyosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHarmonyos(ctx context.Context, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHashicorpWithBody request with any body
	GetIndexHashicorpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHashicorp(ctx context.Context, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHaskellSadbWithBody request with any body
	GetIndexHaskellSadbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHaskellSadb(ctx context.Context, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHclWithBody request with any body
	GetIndexHclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHcl(ctx context.Context, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHexWithBody request with any body
	GetIndexHexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHex(ctx context.Context, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHikvisionWithBody request with any body
	GetIndexHikvisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHikvision(ctx context.Context, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHillromWithBody request with any body
	GetIndexHillromWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHillrom(ctx context.Context, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHitachiWithBody request with any body
	GetIndexHitachiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHitachi(ctx context.Context, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHitachiEnergyWithBody request with any body
	GetIndexHitachiEnergyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHitachiEnergy(ctx context.Context, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHkcertWithBody request with any body
	GetIndexHkcertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHkcert(ctx context.Context, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHoneywellWithBody request with any body
	GetIndexHoneywellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHoneywell(ctx context.Context, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHpWithBody request with any body
	GetIndexHpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHp(ctx context.Context, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHuaweiEulerosWithBody request with any body
	GetIndexHuaweiEulerosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHuaweiEuleros(ctx context.Context, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHuaweiIpsWithBody request with any body
	GetIndexHuaweiIpsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHuaweiIps(ctx context.Context, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexHuaweiPsirtWithBody request with any body
	GetIndexHuaweiPsirtWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexHuaweiPsirt(ctx context.Context, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIavaWithBody request with any body
	GetIndexIavaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIava(ctx context.Context, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIbmWithBody request with any body
	GetIndexIbmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIbm(ctx context.Context, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIdemiaWithBody request with any body
	GetIndexIdemiaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIdemia(ctx context.Context, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIlAlertsWithBody request with any body
	GetIndexIlAlertsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIlAlerts(ctx context.Context, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIlVulnerabilitiesWithBody request with any body
	GetIndexIlVulnerabilitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIlVulnerabilities(ctx context.Context, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIncibeWithBody request with any body
	GetIndexIncibeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIncibe(ctx context.Context, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexInitialAccessWithBody request with any body
	GetIndexInitialAccessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexInitialAccess(ctx context.Context, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexInitialAccessGitWithBody request with any body
	GetIndexInitialAccessGitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexInitialAccessGit(ctx context.Context, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIntelWithBody request with any body
	GetIndexIntelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIntel(ctx context.Context, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel10dWithBody request with any body
	GetIndexIpintel10dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel10d(ctx context.Context, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel30dWithBody request with any body
	GetIndexIpintel30dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel30d(ctx context.Context, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel3dWithBody request with any body
	GetIndexIpintel3dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel3d(ctx context.Context, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIpintel90dWithBody request with any body
	GetIndexIpintel90dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIpintel90d(ctx context.Context, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIstioWithBody request with any body
	GetIndexIstioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIstio(ctx context.Context, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIvantiWithBody request with any body
	GetIndexIvantiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIvanti(ctx context.Context, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexIvantiRssWithBody request with any body
	GetIndexIvantiRssWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexIvantiRss(ctx context.Context, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJenkinsWithBody request with any body
	GetIndexJenkinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJenkins(ctx context.Context, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJetbrainsWithBody request with any body
	GetIndexJetbrainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJetbrains(ctx context.Context, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJfrogWithBody request with any body
	GetIndexJfrogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJfrog(ctx context.Context, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJnjWithBody request with any body
	GetIndexJnjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJnj(ctx context.Context, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexJvndbWithBody request with any body
	GetIndexJvndbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexJvndb(ctx context.Context, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKasperskyIcsCertWithBody request with any body
	GetIndexKasperskyIcsCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKasperskyIcsCert(ctx context.Context, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKrcertSecurityNoticesWithBody request with any body
	GetIndexKrcertSecurityNoticesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKrcertSecurityNotices(ctx context.Context, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKrcertVulnerabilitiesWithBody request with any body
	GetIndexKrcertVulnerabilitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKrcertVulnerabilities(ctx context.Context, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexKubernetesWithBody request with any body
	GetIndexKubernetesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexKubernetes(ctx context.Context, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLenovoWithBody request with any body
	GetIndexLenovoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLenovo(ctx context.Context, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLexmarkWithBody request with any body
	GetIndexLexmarkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLexmark(ctx context.Context, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLgWithBody request with any body
	GetIndexLgWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLg(ctx context.Context, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLibreOfficeWithBody request with any body
	GetIndexLibreOfficeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLibreOffice(ctx context.Context, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexLinuxWithBody request with any body
	GetIndexLinuxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexLinux(ctx context.Context, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMFilesWithBody request with any body
	GetIndexMFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMFiles(ctx context.Context, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMacertWithBody request with any body
	GetIndexMacertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMacert(ctx context.Context, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexManageengineWithBody request with any body
	GetIndexManageengineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexManageengine(ctx context.Context, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMavenWithBody request with any body
	GetIndexMavenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMaven(ctx context.Context, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMbedTlsWithBody request with any body
	GetIndexMbedTlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMbedTls(ctx context.Context, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMediatekWithBody request with any body
	GetIndexMediatekWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMediatek(ctx context.Context, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMedtronicWithBody request with any body
	GetIndexMedtronicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMedtronic(ctx context.Context, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMendixWithBody request with any body
	GetIndexMendixWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMendix(ctx context.Context, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMetasploitWithBody request with any body
	GetIndexMetasploitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMetasploit(ctx context.Context, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMicrosoftCvrfWithBody request with any body
	GetIndexMicrosoftCvrfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMicrosoftCvrf(ctx context.Context, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMicrosoftKbWithBody request with any body
	GetIndexMicrosoftKbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMicrosoftKb(ctx context.Context, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMikrotikWithBody request with any body
	GetIndexMikrotikWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMikrotik(ctx context.Context, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMindrayWithBody request with any body
	GetIndexMindrayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMindray(ctx context.Context, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMispThreatActorsWithBody request with any body
	GetIndexMispThreatActorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMispThreatActors(ctx context.Context, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitelWithBody request with any body
	GetIndexMitelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitel(ctx context.Context, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitreAttackCveWithBody request with any body
	GetIndexMitreAttackCveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitreAttackCve(ctx context.Context, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitreCveWithBody request with any body
	GetIndexMitreCveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitreCve(ctx context.Context, body GetIndexMitreCveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMitsubishiElectricWithBody request with any body
	GetIndexMitsubishiElectricWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMitsubishiElectric(ctx context.Context, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMongodbWithBody request with any body
	GetIndexMongodbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMongodb(ctx context.Context, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMoxaWithBody request with any body
	GetIndexMoxaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMoxa(ctx context.Context, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexMozillaWithBody request with any body
	GetIndexMozillaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexMozilla(ctx context.Context, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNaverWithBody request with any body
	GetIndexNaverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNaver(ctx context.Context, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNecWithBody request with any body
	GetIndexNecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNec(ctx context.Context, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetappWithBody request with any body
	GetIndexNetappWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetapp(ctx context.Context, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetgateWithBody request with any body
	GetIndexNetgateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetgate(ctx context.Context, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetgearWithBody request with any body
	GetIndexNetgearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetgear(ctx context.Context, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNetskopeWithBody request with any body
	GetIndexNetskopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNetskope(ctx context.Context, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNginxWithBody request with any body
	GetIndexNginxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNginx(ctx context.Context, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNhsWithBody request with any body
	GetIndexNhsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNhs(ctx context.Context, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNiWithBody request with any body
	GetIndexNiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNi(ctx context.Context, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNistNvdWithBody request with any body
	GetIndexNistNvdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNistNvd(ctx context.Context, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNistNvd2WithBody request with any body
	GetIndexNistNvd2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNistNvd2(ctx context.Context, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNistNvd2CpematchWithBody request with any body
	GetIndexNistNvd2CpematchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNistNvd2Cpematch(ctx context.Context, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNodeSecurityWithBody request with any body
	GetIndexNodeSecurityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNodeSecurity(ctx context.Context, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNodejsWithBody request with any body
	GetIndexNodejsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNodejs(ctx context.Context, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNokiaWithBody request with any body
	GetIndexNokiaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNokia(ctx context.Context, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNozomiWithBody request with any body
	GetIndexNozomiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNozomi(ctx context.Context, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNpmWithBody request with any body
	GetIndexNpmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNpm(ctx context.Context, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNugetWithBody request with any body
	GetIndexNugetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNuget(ctx context.Context, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNvidiaWithBody request with any body
	GetIndexNvidiaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNvidia(ctx context.Context, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexNzAdvisoriesWithBody request with any body
	GetIndexNzAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexNzAdvisories(ctx context.Context, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOctopusDeployWithBody request with any body
	GetIndexOctopusDeployWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOctopusDeploy(ctx context.Context, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOktaWithBody request with any body
	GetIndexOktaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOkta(ctx context.Context, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOmronWithBody request with any body
	GetIndexOmronWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOmron(ctx context.Context, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOneEWithBody request with any body
	GetIndexOneEWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOneE(ctx context.Context, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpamWithBody request with any body
	GetIndexOpamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpam(ctx context.Context, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenCvdbWithBody request with any body
	GetIndexOpenCvdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenCvdb(ctx context.Context, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenbsdWithBody request with any body
	GetIndexOpenbsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenbsd(ctx context.Context, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpensshWithBody request with any body
	GetIndexOpensshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenssh(ctx context.Context, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpensslSecadvWithBody request with any body
	GetIndexOpensslSecadvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpensslSecadv(ctx context.Context, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenstackWithBody request with any body
	GetIndexOpenstackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenstack(ctx context.Context, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOpenwrtWithBody request with any body
	GetIndexOpenwrtWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOpenwrt(ctx context.Context, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOracleWithBody request with any body
	GetIndexOracleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOracle(ctx context.Context, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOracleCpuWithBody request with any body
	GetIndexOracleCpuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOracleCpu(ctx context.Context, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOracleCpuCsafWithBody request with any body
	GetIndexOracleCpuCsafWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOracleCpuCsaf(ctx context.Context, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOsvWithBody request with any body
	GetIndexOsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOsv(ctx context.Context, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOtrsWithBody request with any body
	GetIndexOtrsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOtrs(ctx context.Context, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexOwncloudWithBody request with any body
	GetIndexOwncloudWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexOwncloud(ctx context.Context, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPalantirWithBody request with any body
	GetIndexPalantirWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPalantir(ctx context.Context, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPaloAltoWithBody request with any body
	GetIndexPaloAltoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPaloAlto(ctx context.Context, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPanasonicWithBody request with any body
	GetIndexPanasonicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPanasonic(ctx context.Context, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPapercutWithBody request with any body
	GetIndexPapercutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPapercut(ctx context.Context, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPegaWithBody request with any body
	GetIndexPegaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPega(ctx context.Context, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPhilipsWithBody request with any body
	GetIndexPhilipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPhilips(ctx context.Context, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPhoenixContactWithBody request with any body
	GetIndexPhoenixContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPhoenixContact(ctx context.Context, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPostgressqlWithBody request with any body
	GetIndexPostgressqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPostgressql(ctx context.Context, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexProgressWithBody request with any body
	GetIndexProgressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexProgress(ctx context.Context, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexProofpointWithBody request with any body
	GetIndexProofpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexProofpoint(ctx context.Context, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPubWithBody request with any body
	GetIndexPubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPub(ctx context.Context, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPureStorageWithBody request with any body
	GetIndexPureStorageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPureStorage(ctx context.Context, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPypaAdvisoriesWithBody request with any body
	GetIndexPypaAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPypaAdvisories(ctx context.Context, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexPypiWithBody request with any body
	GetIndexPypiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexPypi(ctx context.Context, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQnapWithBody request with any body
	GetIndexQnapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQnap(ctx context.Context, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQualcommWithBody request with any body
	GetIndexQualcommWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQualcomm(ctx context.Context, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexQualysWithBody request with any body
	GetIndexQualysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexQualys(ctx context.Context, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRansomwareWithBody request with any body
	GetIndexRansomwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRansomware(ctx context.Context, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRedhatWithBody request with any body
	GetIndexRedhatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRedhat(ctx context.Context, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRenesasWithBody request with any body
	GetIndexRenesasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRenesas(ctx context.Context, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexReviveWithBody request with any body
	GetIndexReviveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRevive(ctx context.Context, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRockwellWithBody request with any body
	GetIndexRockwellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRockwell(ctx context.Context, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRockyWithBody request with any body
	GetIndexRockyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRocky(ctx context.Context, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRuckusWithBody request with any body
	GetIndexRuckusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRuckus(ctx context.Context, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexRustsecAdvisoriesWithBody request with any body
	GetIndexRustsecAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexRustsecAdvisories(ctx context.Context, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSacertWithBody request with any body
	GetIndexSacertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSacert(ctx context.Context, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSaintWithBody request with any body
	GetIndexSaintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSaint(ctx context.Context, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSalesforceWithBody request with any body
	GetIndexSalesforceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSalesforce(ctx context.Context, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSambaWithBody request with any body
	GetIndexSambaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSamba(ctx context.Context, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSapWithBody request with any body
	GetIndexSapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSap(ctx context.Context, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSchneiderElectricWithBody request with any body
	GetIndexSchneiderElectricWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSchneiderElectric(ctx context.Context, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSecConsultWithBody request with any body
	GetIndexSecConsultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSecConsult(ctx context.Context, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSelWithBody request with any body
	GetIndexSelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSel(ctx context.Context, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSentineloneWithBody request with any body
	GetIndexSentineloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSentinelone(ctx context.Context, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexServicenowWithBody request with any body
	GetIndexServicenowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexServicenow(ctx context.Context, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexShadowserverExploitedWithBody request with any body
	GetIndexShadowserverExploitedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexShadowserverExploited(ctx context.Context, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSickWithBody request with any body
	GetIndexSickWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSick(ctx context.Context, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSiemensWithBody request with any body
	GetIndexSiemensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSiemens(ctx context.Context, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSierraWirelessWithBody request with any body
	GetIndexSierraWirelessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSierraWireless(ctx context.Context, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSingcertWithBody request with any body
	GetIndexSingcertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSingcert(ctx context.Context, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSlackwareWithBody request with any body
	GetIndexSlackwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSlackware(ctx context.Context, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSolarwindsWithBody request with any body
	GetIndexSolarwindsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSolarwinds(ctx context.Context, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSolrWithBody request with any body
	GetIndexSolrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSolr(ctx context.Context, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSonicwallWithBody request with any body
	GetIndexSonicwallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSonicwall(ctx context.Context, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSpacelabsHealthcareWithBody request with any body
	GetIndexSpacelabsHealthcareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSpacelabsHealthcare(ctx context.Context, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSpringWithBody request with any body
	GetIndexSpringWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSpring(ctx context.Context, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSsdWithBody request with any body
	GetIndexSsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSsd(ctx context.Context, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexStormshieldWithBody request with any body
	GetIndexStormshieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexStormshield(ctx context.Context, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexStrykerWithBody request with any body
	GetIndexStrykerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexStryker(ctx context.Context, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSudoWithBody request with any body
	GetIndexSudoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSudo(ctx context.Context, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSuseWithBody request with any body
	GetIndexSuseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSuse(ctx context.Context, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSwiftWithBody request with any body
	GetIndexSwiftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSwift(ctx context.Context, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSwisslogHealthcareWithBody request with any body
	GetIndexSwisslogHealthcareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSwisslogHealthcare(ctx context.Context, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSymfonyWithBody request with any body
	GetIndexSymfonyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSymfony(ctx context.Context, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSyncrosoftWithBody request with any body
	GetIndexSyncrosoftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSyncrosoft(ctx context.Context, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexSynologyWithBody request with any body
	GetIndexSynologyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexSynology(ctx context.Context, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTeamviewerWithBody request with any body
	GetIndexTeamviewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTeamviewer(ctx context.Context, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTencentWithBody request with any body
	GetIndexTencentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTencent(ctx context.Context, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexThalesWithBody request with any body
	GetIndexThalesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexThales(ctx context.Context, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexThemissinglinkWithBody request with any body
	GetIndexThemissinglinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexThemissinglink(ctx context.Context, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexThreatActorsWithBody request with any body
	GetIndexThreatActorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexThreatActors(ctx context.Context, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTiWithBody request with any body
	GetIndexTiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTi(ctx context.Context, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTibcoWithBody request with any body
	GetIndexTibcoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTibco(ctx context.Context, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTpLinkWithBody request with any body
	GetIndexTpLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTpLink(ctx context.Context, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTraneTechnologyWithBody request with any body
	GetIndexTraneTechnologyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTraneTechnology(ctx context.Context, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTrendmicroWithBody request with any body
	GetIndexTrendmicroWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTrendmicro(ctx context.Context, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTrustwaveWithBody request with any body
	GetIndexTrustwaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTrustwave(ctx context.Context, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexTwcertWithBody request with any body
	GetIndexTwcertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexTwcert(ctx context.Context, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUbiquitiWithBody request with any body
	GetIndexUbiquitiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUbiquiti(ctx context.Context, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUbuntuWithBody request with any body
	GetIndexUbuntuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUbuntu(ctx context.Context, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUnifyWithBody request with any body
	GetIndexUnifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUnify(ctx context.Context, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUnisocWithBody request with any body
	GetIndexUnisocWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUnisoc(ctx context.Context, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUsdWithBody request with any body
	GetIndexUsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUsd(ctx context.Context, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexUsomWithBody request with any body
	GetIndexUsomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexUsom(ctx context.Context, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVandykeWithBody request with any body
	GetIndexVandykeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVandyke(ctx context.Context, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVapidlabsWithBody request with any body
	GetIndexVapidlabsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVapidlabs(ctx context.Context, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVdeWithBody request with any body
	GetIndexVdeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVde(ctx context.Context, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVeeamWithBody request with any body
	GetIndexVeeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVeeam(ctx context.Context, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVoidsecWithBody request with any body
	GetIndexVoidsecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVoidsec(ctx context.Context, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckConfigWithBody request with any body
	GetIndexVulncheckConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckConfig(ctx context.Context, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckKevWithBody request with any body
	GetIndexVulncheckKevWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckKev(ctx context.Context, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckNvdWithBody request with any body
	GetIndexVulncheckNvdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckNvd(ctx context.Context, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulncheckNvd2WithBody request with any body
	GetIndexVulncheckNvd2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulncheckNvd2(ctx context.Context, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVulnerabilityAliasesWithBody request with any body
	GetIndexVulnerabilityAliasesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVulnerabilityAliases(ctx context.Context, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexVyaireWithBody request with any body
	GetIndexVyaireWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexVyaire(ctx context.Context, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWatchguardWithBody request with any body
	GetIndexWatchguardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWatchguard(ctx context.Context, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWhatsappWithBody request with any body
	GetIndexWhatsappWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWhatsapp(ctx context.Context, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWibuWithBody request with any body
	GetIndexWibuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWibu(ctx context.Context, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWiresharkWithBody request with any body
	GetIndexWiresharkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWireshark(ctx context.Context, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWithSecureWithBody request with any body
	GetIndexWithSecureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWithSecure(ctx context.Context, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWolfiWithBody request with any body
	GetIndexWolfiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWolfi(ctx context.Context, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWolfsslWithBody request with any body
	GetIndexWolfsslWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWolfssl(ctx context.Context, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexWordfenceWithBody request with any body
	GetIndexWordfenceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexWordfence(ctx context.Context, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXenWithBody request with any body
	GetIndexXenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXen(ctx context.Context, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXeroxWithBody request with any body
	GetIndexXeroxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXerox(ctx context.Context, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXiaomiWithBody request with any body
	GetIndexXiaomiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXiaomi(ctx context.Context, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexXylemWithBody request with any body
	GetIndexXylemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexXylem(ctx context.Context, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexYokogawaWithBody request with any body
	GetIndexYokogawaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexYokogawa(ctx context.Context, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexYubicoWithBody request with any body
	GetIndexYubicoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexYubico(ctx context.Context, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZdiWithBody request with any body
	GetIndexZdiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZdi(ctx context.Context, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZeroscienceWithBody request with any body
	GetIndexZeroscienceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZeroscience(ctx context.Context, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZimbraWithBody request with any body
	GetIndexZimbraWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZimbra(ctx context.Context, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZoomWithBody request with any body
	GetIndexZoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZoom(ctx context.Context, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZscalerWithBody request with any body
	GetIndexZscalerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZscaler(ctx context.Context, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZusoWithBody request with any body
	GetIndexZusoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZuso(ctx context.Context, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndexZyxelWithBody request with any body
	GetIndexZyxelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIndexZyxel(ctx context.Context, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenapi request
	GetOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPurl request
	GetPurl(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsVulncheckC2 request
	GetTagsVulncheckC2(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBackupIndex(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupIndexRequest(c.Server, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCpe(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCpeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexA10WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexA10RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexA10(ctx context.Context, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexA10Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbb(ctx context.Context, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbbottWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbottRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbbott(ctx context.Context, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbbottRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbsoluteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbsoluteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAbsolute(ctx context.Context, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAbsoluteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAcronisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAcronisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAcronis(ctx context.Context, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAcronisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdobeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdobeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdobe(ctx context.Context, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdobeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdvisoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAdvisories(ctx context.Context, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAdvisoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlephResearchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlephResearchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlephResearch(ctx context.Context, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlephResearchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlmaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlmaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlma(ctx context.Context, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlmaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlpineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlpineRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAlpine(ctx context.Context, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAlpineRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmazonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmazonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmazon(ctx context.Context, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmazonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmd(ctx context.Context, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAmi(ctx context.Context, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAmiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAnchoreNvdOverrideWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAnchoreNvdOverrideRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAnchoreNvdOverride(ctx context.Context, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAnchoreNvdOverrideRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAndroidWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAndroidRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAndroid(ctx context.Context, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAndroidRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheActivemqWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheActivemqRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheActivemq(ctx context.Context, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheActivemqRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArchivaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArchivaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArchiva(ctx context.Context, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArchivaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArrowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArrowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheArrow(ctx context.Context, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheArrowRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCamelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCamelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCamel(ctx context.Context, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCamelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCommonsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCommonsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCommons(ctx context.Context, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCommonsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCouchdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCouchdbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheCouchdb(ctx context.Context, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheCouchdbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheFlinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheFlinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheFlink(ctx context.Context, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheFlinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheGuacamoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheGuacamoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheGuacamole(ctx context.Context, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheGuacamoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHadoopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHadoopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHadoop(ctx context.Context, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHadoopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHttpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHttpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheHttp(ctx context.Context, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheHttpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheJspwikiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheJspwikiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheJspwiki(ctx context.Context, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheJspwikiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheKafkaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheKafkaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheKafka(ctx context.Context, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheKafkaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheLoggingservicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheLoggingservicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheLoggingservices(ctx context.Context, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheLoggingservicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheNifiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheNifiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheNifi(ctx context.Context, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheNifiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOfbizWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOfbizRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOfbiz(ctx context.Context, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOfbizRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenmeetingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenmeetingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenmeetings(ctx context.Context, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenmeetingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenofficeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenofficeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheOpenoffice(ctx context.Context, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheOpenofficeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApachePulsarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApachePulsarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApachePulsar(ctx context.Context, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApachePulsarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheShiroWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheShiroRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheShiro(ctx context.Context, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheShiroRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSparkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSparkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSpark(ctx context.Context, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSparkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheStrutsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheStrutsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheStruts(ctx context.Context, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheStrutsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSubversionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSubversionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSubversion(ctx context.Context, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSubversionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSupersetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSupersetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheSuperset(ctx context.Context, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheSupersetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheTomcatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheTomcatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheTomcat(ctx context.Context, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheTomcatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheZookeeperWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheZookeeperRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApacheZookeeper(ctx context.Context, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexApacheZookeeperRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppcheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppcheckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppcheck(ctx context.Context, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppcheckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppgateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppgateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppgate(ctx context.Context, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppgateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAppleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexApple(ctx context.Context, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAppleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArch(ctx context.Context, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAristaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAristaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArista(ctx context.Context, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAristaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexArubaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArubaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAruba(ctx context.Context, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexArubaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsrgWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsrgRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsrg(ctx context.Context, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsrgRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAssetnoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAssetnoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAssetnote(ctx context.Context, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAssetnoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsteriskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsteriskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsterisk(ctx context.Context, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsteriskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAsus(ctx context.Context, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAsusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassianWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassian(ctx context.Context, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassianVulnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianVulnsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtlassianVulns(ctx context.Context, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtlassianVulnsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtredisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtredisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAtredis(ctx context.Context, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAtredisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAuscertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAuscertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAuscert(ctx context.Context, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAuscertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAutodeskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAutodeskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAutodesk(ctx context.Context, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAutodeskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvayaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvayaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvaya(ctx context.Context, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvayaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvevaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvevaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAveva(ctx context.Context, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvevaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvigilonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvigilonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAvigilon(ctx context.Context, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAvigilonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAwsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAwsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAws(ctx context.Context, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAwsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAxisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAxisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexAxis(ctx context.Context, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexAxisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBandrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBandrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBandr(ctx context.Context, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBandrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBaxterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBaxterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBaxter(ctx context.Context, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBaxterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBbraunWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBbraunRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBbraun(ctx context.Context, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBbraunRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBd(ctx context.Context, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBduWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBduRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBdu(ctx context.Context, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBduRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeckhoffWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeckhoffRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeckhoff(ctx context.Context, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeckhoffRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeldenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeldenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBelden(ctx context.Context, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeldenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeyondTrustWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeyondTrustRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBeyondTrust(ctx context.Context, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBeyondTrustRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBinarlyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBinarlyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBinarly(ctx context.Context, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBinarlyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBitdefenderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBitdefenderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBitdefender(ctx context.Context, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBitdefenderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBlackberryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlackberryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBlackberry(ctx context.Context, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlackberryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBls(ctx context.Context, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBlsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBoschWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBoschRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBosch(ctx context.Context, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBoschRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBostonScientificWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBostonScientificRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBostonScientific(ctx context.Context, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBostonScientificRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBotnetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBotnetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexBotnets(ctx context.Context, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexBotnetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCaCyberCentreWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCaCyberCentreRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCaCyberCentre(ctx context.Context, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCaCyberCentreRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCanvasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCanvasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCanvas(ctx context.Context, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCanvasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarestreamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarestreamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarestream(ctx context.Context, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarestreamRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCargoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCargoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCargo(ctx context.Context, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCargoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarrierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarrierRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCarrier(ctx context.Context, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCarrierRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCblMarinerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCblMarinerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCblMariner(ctx context.Context, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCblMarinerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCentosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCentosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCentos(ctx context.Context, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCentosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertBeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertBeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertBe(ctx context.Context, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertBeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertUaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertUaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertUa(ctx context.Context, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertUaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCerteuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCerteuRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCerteu(ctx context.Context, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCerteuRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertfrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertfrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCertfr(ctx context.Context, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCertfrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChainguardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChainguardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChainguard(ctx context.Context, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChainguardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCheckpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCheckpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCheckpoint(ctx context.Context, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCheckpointRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChromeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChromeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexChrome(ctx context.Context, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexChromeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaAlertsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaAlertsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaAlerts(ctx context.Context, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaAlertsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaKevWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaKevRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisaKev(ctx context.Context, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCisaKevRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCiscoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCisco(ctx context.Context, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCiscoTalosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoTalosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCiscoTalos(ctx context.Context, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCiscoTalosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCitrixWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCitrixRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCitrix(ctx context.Context, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCitrixRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexClarotyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexClarotyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexClaroty(ctx context.Context, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexClarotyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudbeesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudbeesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudbees(ctx context.Context, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudbeesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudvulndbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudvulndbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCloudvulndb(ctx context.Context, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCloudvulndbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnaCveCountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnaCveCountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnaCveCount(ctx context.Context, body GetIndexCnaCveCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnaCveCountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnnvdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnnvdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnnvd(ctx context.Context, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnnvdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdBulletinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdBulletinsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdBulletins(ctx context.Context, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdBulletinsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdFlawsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdFlawsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCnvdFlaws(ctx context.Context, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCnvdFlawsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCocoapodsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCocoapodsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCocoapods(ctx context.Context, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCocoapodsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCodesysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCodesysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCodesys(ctx context.Context, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCodesysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCompassSecurityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCompassSecurityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCompassSecurity(ctx context.Context, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCompassSecurityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexComposerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexComposerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexComposer(ctx context.Context, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexComposerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexConanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexConanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexConan(ctx context.Context, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexConanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCrestronWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCrestronRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCrestron(ctx context.Context, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCrestronRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCurlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCurlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCurl(ctx context.Context, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCurlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCweWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCweRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexCwe(ctx context.Context, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexCweRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDahuaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDahuaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDahua(ctx context.Context, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDahuaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDassaultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDassaultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDassault(ctx context.Context, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDassaultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebianWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebian(ctx context.Context, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebianDsaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianDsaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDebianDsa(ctx context.Context, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDebianDsaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDellRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDell(ctx context.Context, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDellRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDeltaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDeltaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDelta(ctx context.Context, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDeltaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDotcmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDotcmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDotcms(ctx context.Context, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDotcmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDragosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDragosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDragos(ctx context.Context, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDragosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDraytekWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDraytekRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexDraytek(ctx context.Context, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexDraytekRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEatonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEatonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEaton(ctx context.Context, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEatonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElasticWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElasticRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElastic(ctx context.Context, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElasticRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElspecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElspecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexElspec(ctx context.Context, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexElspecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEmersonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEmersonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEmerson(ctx context.Context, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEmersonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEolWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEolRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEol(ctx context.Context, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEolRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEpssWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEpssRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexEpss(ctx context.Context, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexEpssRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExodusIntelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExodusIntelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExodusIntel(ctx context.Context, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExodusIntelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitChainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitChainsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitChains(ctx context.Context, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitChainsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitdbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitdb(ctx context.Context, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitdbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexExploits(ctx context.Context, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexExploitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFSecureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFSecureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFSecure(ctx context.Context, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFSecureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFastlyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFastlyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFastly(ctx context.Context, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFastlyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFedoraWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFedoraRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFedora(ctx context.Context, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFedoraRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFilecloudWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFilecloudRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFilecloud(ctx context.Context, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFilecloudRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexForgerockWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexForgerockRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexForgerock(ctx context.Context, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexForgerockRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFortinetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFortinetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFortinet(ctx context.Context, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFortinetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFreebsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFreebsdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexFreebsd(ctx context.Context, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexFreebsdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGallagherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGallagherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGallagher(ctx context.Context, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGallagherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGcpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGcp(ctx context.Context, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGcpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeGasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeGasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeGas(ctx context.Context, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeGasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeHealthcareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeHealthcareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGeHealthcare(ctx context.Context, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGeHealthcareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGem(ctx context.Context, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGenetecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGenetecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGenetec(ctx context.Context, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGenetecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGigabyteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGigabyteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGigabyte(ctx context.Context, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGigabyteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGiteeExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGiteeExploitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGiteeExploits(ctx context.Context, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGiteeExploitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubExploitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubExploits(ctx context.Context, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubExploitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubSecurityAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubSecurityAdvisoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGithubSecurityAdvisories(ctx context.Context, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGithubSecurityAdvisoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabAdvisoriesCommunityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabAdvisoriesCommunityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabAdvisoriesCommunity(ctx context.Context, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabAdvisoriesCommunityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabExploitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabExploitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGitlabExploits(ctx context.Context, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGitlabExploitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGnutlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGnutlsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGnutls(ctx context.Context, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGnutlsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGolangWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGolangRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGolang(ctx context.Context, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGolangRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogle0dayItwWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogle0dayItwRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogle0dayItw(ctx context.Context, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogle0dayItwRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogleContainerOptimizedOsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogleContainerOptimizedOsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGoogleContainerOptimizedOs(ctx context.Context, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGoogleContainerOptimizedOsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGrafanaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGrafanaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGrafana(ctx context.Context, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGrafanaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGreynoiseMetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGreynoiseMetadataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexGreynoiseMetadata(ctx context.Context, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexGreynoiseMetadataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHackageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHackageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHackage(ctx context.Context, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHackageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHarmonyosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHarmonyosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHarmonyos(ctx context.Context, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHarmonyosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHashicorpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHashicorpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHashicorp(ctx context.Context, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHashicorpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHaskellSadbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHaskellSadbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHaskellSadb(ctx context.Context, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHaskellSadbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHclWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHclRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHcl(ctx context.Context, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHclRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHexRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHex(ctx context.Context, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHexRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHikvisionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHikvisionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHikvision(ctx context.Context, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHikvisionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHillromWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHillromRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHillrom(ctx context.Context, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHillromRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachi(ctx context.Context, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachiEnergyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiEnergyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHitachiEnergy(ctx context.Context, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHitachiEnergyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHkcertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHkcertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHkcert(ctx context.Context, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHkcertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHoneywellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHoneywellRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHoneywell(ctx context.Context, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHoneywellRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHp(ctx context.Context, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiEulerosWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiEulerosRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiEuleros(ctx context.Context, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiEulerosRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiIpsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiIpsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiIps(ctx context.Context, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiIpsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiPsirtWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiPsirtRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexHuaweiPsirt(ctx context.Context, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexHuaweiPsirtRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIavaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIavaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIava(ctx context.Context, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIavaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIbmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIbmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIbm(ctx context.Context, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIbmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIdemiaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIdemiaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIdemia(ctx context.Context, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIdemiaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlAlertsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlAlertsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlAlerts(ctx context.Context, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlAlertsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlVulnerabilitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlVulnerabilitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIlVulnerabilities(ctx context.Context, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIlVulnerabilitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIncibeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIncibeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIncibe(ctx context.Context, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIncibeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccess(ctx context.Context, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccessGitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessGitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexInitialAccessGit(ctx context.Context, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexInitialAccessGitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIntelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIntelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIntel(ctx context.Context, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIntelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel10dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel10dRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel10d(ctx context.Context, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel10dRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel30dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel30dRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel30d(ctx context.Context, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel30dRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel3dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel3dRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel3d(ctx context.Context, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel3dRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel90dWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel90dRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIpintel90d(ctx context.Context, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIpintel90dRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIstioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIstioRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIstio(ctx context.Context, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIstioRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvantiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvanti(ctx context.Context, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvantiRssWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRssRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexIvantiRss(ctx context.Context, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexIvantiRssRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJenkinsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJenkinsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJenkins(ctx context.Context, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJenkinsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJetbrainsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJetbrainsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJetbrains(ctx context.Context, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJetbrainsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJfrogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJfrogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJfrog(ctx context.Context, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJfrogRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJnjWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJnjRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJnj(ctx context.Context, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJnjRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJvndbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJvndbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexJvndb(ctx context.Context, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexJvndbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKasperskyIcsCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKasperskyIcsCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKasperskyIcsCert(ctx context.Context, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKasperskyIcsCertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertSecurityNoticesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertSecurityNoticesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertSecurityNotices(ctx context.Context, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertSecurityNoticesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertVulnerabilitiesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertVulnerabilitiesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKrcertVulnerabilities(ctx context.Context, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKrcertVulnerabilitiesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKubernetesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKubernetesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexKubernetes(ctx context.Context, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexKubernetesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLenovoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLenovoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLenovo(ctx context.Context, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLenovoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLexmarkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLexmarkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLexmark(ctx context.Context, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLexmarkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLgWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLgRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLg(ctx context.Context, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLgRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLibreOfficeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLibreOfficeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLibreOffice(ctx context.Context, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLibreOfficeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLinuxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLinuxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexLinux(ctx context.Context, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexLinuxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMFilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMFilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMFiles(ctx context.Context, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMFilesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMacertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMacertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMacert(ctx context.Context, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMacertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexManageengineWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexManageengineRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexManageengine(ctx context.Context, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexManageengineRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMavenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMavenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMaven(ctx context.Context, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMavenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMbedTlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMbedTlsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMbedTls(ctx context.Context, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMbedTlsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMediatekWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMediatekRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMediatek(ctx context.Context, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMediatekRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMedtronicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMedtronicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMedtronic(ctx context.Context, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMedtronicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMendixWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMendixRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMendix(ctx context.Context, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMendixRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMetasploitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMetasploitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMetasploit(ctx context.Context, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMetasploitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftCvrfWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftCvrfRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftCvrf(ctx context.Context, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftCvrfRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftKbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftKbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMicrosoftKb(ctx context.Context, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMicrosoftKbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMikrotikWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMikrotikRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMikrotik(ctx context.Context, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMikrotikRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMindrayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMindrayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMindray(ctx context.Context, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMindrayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMispThreatActorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMispThreatActorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMispThreatActors(ctx context.Context, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMispThreatActorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitel(ctx context.Context, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreAttackCveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreAttackCveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreAttackCve(ctx context.Context, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreAttackCveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreCveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreCveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitreCve(ctx context.Context, body GetIndexMitreCveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitreCveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitsubishiElectricWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitsubishiElectricRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMitsubishiElectric(ctx context.Context, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMitsubishiElectricRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMongodbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMongodbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMongodb(ctx context.Context, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMongodbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMoxaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMoxaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMoxa(ctx context.Context, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMoxaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMozillaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMozillaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexMozilla(ctx context.Context, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexMozillaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNaverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNaverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNaver(ctx context.Context, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNaverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNec(ctx context.Context, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetappWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetappRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetapp(ctx context.Context, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetappRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgate(ctx context.Context, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgearRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetgear(ctx context.Context, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetgearRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetskopeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetskopeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNetskope(ctx context.Context, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNetskopeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNginxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNginxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNginx(ctx context.Context, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNginxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNhsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNhsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNhs(ctx context.Context, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNhsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNi(ctx context.Context, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd(ctx context.Context, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2(ctx context.Context, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2CpematchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2CpematchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNistNvd2Cpematch(ctx context.Context, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNistNvd2CpematchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodeSecurityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodeSecurityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodeSecurity(ctx context.Context, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodeSecurityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodejsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodejsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNodejs(ctx context.Context, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNodejsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNokiaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNokiaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNokia(ctx context.Context, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNokiaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNozomiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNozomiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNozomi(ctx context.Context, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNozomiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNpmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNpmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNpm(ctx context.Context, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNpmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNugetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNugetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNuget(ctx context.Context, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNugetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNvidiaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNvidiaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNvidia(ctx context.Context, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNvidiaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNzAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNzAdvisoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexNzAdvisories(ctx context.Context, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexNzAdvisoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOctopusDeployWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOctopusDeployRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOctopusDeploy(ctx context.Context, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOctopusDeployRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOktaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOktaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOkta(ctx context.Context, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOktaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOmronWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOmronRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOmron(ctx context.Context, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOmronRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOneEWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOneERequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOneE(ctx context.Context, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOneERequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpam(ctx context.Context, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpamRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenCvdbWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenCvdbRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenCvdb(ctx context.Context, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenCvdbRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenbsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenbsdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenbsd(ctx context.Context, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenbsdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpensshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenssh(ctx context.Context, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpensslSecadvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensslSecadvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpensslSecadv(ctx context.Context, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpensslSecadvRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenstackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenstackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenstack(ctx context.Context, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenstackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenwrtWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenwrtRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOpenwrt(ctx context.Context, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOpenwrtRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracle(ctx context.Context, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpu(ctx context.Context, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpuCsafWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuCsafRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOracleCpuCsaf(ctx context.Context, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOracleCpuCsafRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOsvWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOsvRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOsv(ctx context.Context, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOsvRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOtrsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOtrsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOtrs(ctx context.Context, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOtrsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOwncloudWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOwncloudRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexOwncloud(ctx context.Context, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexOwncloudRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPalantirWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPalantirRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPalantir(ctx context.Context, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPalantirRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPaloAltoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPaloAltoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPaloAlto(ctx context.Context, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPaloAltoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPanasonicWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPanasonicRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPanasonic(ctx context.Context, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPanasonicRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPapercutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPapercutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPapercut(ctx context.Context, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPapercutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPegaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPegaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPega(ctx context.Context, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPegaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhilipsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhilipsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhilips(ctx context.Context, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhilipsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhoenixContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhoenixContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPhoenixContact(ctx context.Context, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPhoenixContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPostgressqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPostgressqlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPostgressql(ctx context.Context, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPostgressqlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProgressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProgressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProgress(ctx context.Context, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProgressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProofpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProofpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexProofpoint(ctx context.Context, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexProofpointRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPubRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPub(ctx context.Context, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPubRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPureStorageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPureStorageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPureStorage(ctx context.Context, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPureStorageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypaAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypaAdvisoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypaAdvisories(ctx context.Context, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypaAdvisoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexPypi(ctx context.Context, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexPypiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQnapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQnapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQnap(ctx context.Context, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQnapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualcommWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualcommRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualcomm(ctx context.Context, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualcommRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexQualys(ctx context.Context, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexQualysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRansomwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRansomwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRansomware(ctx context.Context, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRansomwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRedhatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRedhatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRedhat(ctx context.Context, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRedhatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRenesasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRenesasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRenesas(ctx context.Context, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRenesasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexReviveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexReviveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRevive(ctx context.Context, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexReviveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockwellWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockwellRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockwell(ctx context.Context, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockwellRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRockyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRocky(ctx context.Context, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRockyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRuckusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRuckusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRuckus(ctx context.Context, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRuckusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRustsecAdvisoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRustsecAdvisoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexRustsecAdvisories(ctx context.Context, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRustsecAdvisoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSacertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSacertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSacert(ctx context.Context, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSacertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSaintWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSaintRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSaint(ctx context.Context, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSaintRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSalesforceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSalesforceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSalesforce(ctx context.Context, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSalesforceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSambaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSambaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSamba(ctx context.Context, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSambaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSap(ctx context.Context, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSchneiderElectricWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSchneiderElectricRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSchneiderElectric(ctx context.Context, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSchneiderElectricRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSecConsultWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSecConsultRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSecConsult(ctx context.Context, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSecConsultRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSel(ctx context.Context, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSentineloneWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSentineloneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSentinelone(ctx context.Context, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSentineloneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexServicenowWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexServicenowRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexServicenow(ctx context.Context, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexServicenowRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexShadowserverExploitedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexShadowserverExploitedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexShadowserverExploited(ctx context.Context, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexShadowserverExploitedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSickWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSickRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSick(ctx context.Context, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSickRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSiemensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSiemensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSiemens(ctx context.Context, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSiemensRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSierraWirelessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSierraWirelessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSierraWireless(ctx context.Context, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSierraWirelessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSingcertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSingcertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSingcert(ctx context.Context, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSingcertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSlackwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSlackwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSlackware(ctx context.Context, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSlackwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolarwindsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolarwindsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolarwinds(ctx context.Context, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolarwindsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolrRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSolr(ctx context.Context, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSolrRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSonicwallWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSonicwallRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSonicwall(ctx context.Context, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSonicwallRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpacelabsHealthcareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpacelabsHealthcareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpacelabsHealthcare(ctx context.Context, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpacelabsHealthcareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpringWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpringRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSpring(ctx context.Context, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSpringRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSsdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSsd(ctx context.Context, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSsdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStormshieldWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStormshieldRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStormshield(ctx context.Context, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStormshieldRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStrykerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStrykerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexStryker(ctx context.Context, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexStrykerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSudoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSudoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSudo(ctx context.Context, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSudoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSuseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSuseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSuse(ctx context.Context, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSuseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwiftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwiftRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwift(ctx context.Context, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwiftRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwisslogHealthcareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwisslogHealthcareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSwisslogHealthcare(ctx context.Context, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSwisslogHealthcareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSymfonyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSymfonyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSymfony(ctx context.Context, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSymfonyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSyncrosoftWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSyncrosoftRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSyncrosoft(ctx context.Context, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSyncrosoftRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSynologyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSynologyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexSynology(ctx context.Context, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexSynologyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTeamviewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTeamviewerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTeamviewer(ctx context.Context, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTeamviewerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTencentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTencentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTencent(ctx context.Context, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTencentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThalesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThalesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThales(ctx context.Context, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThalesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThemissinglinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThemissinglinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThemissinglink(ctx context.Context, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThemissinglinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThreatActorsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThreatActorsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexThreatActors(ctx context.Context, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexThreatActorsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTi(ctx context.Context, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTibcoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTibcoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTibco(ctx context.Context, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTibcoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTpLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTpLinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTpLink(ctx context.Context, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTpLinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTraneTechnologyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTraneTechnologyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTraneTechnology(ctx context.Context, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTraneTechnologyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrendmicroWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrendmicroRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrendmicro(ctx context.Context, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrendmicroRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrustwaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrustwaveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTrustwave(ctx context.Context, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTrustwaveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTwcertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTwcertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexTwcert(ctx context.Context, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexTwcertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbiquitiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbiquitiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbiquiti(ctx context.Context, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbiquitiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbuntuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbuntuRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUbuntu(ctx context.Context, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUbuntuRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnify(ctx context.Context, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnisocWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnisocRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUnisoc(ctx context.Context, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUnisocRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsd(ctx context.Context, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexUsom(ctx context.Context, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexUsomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVandykeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVandykeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVandyke(ctx context.Context, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVandykeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVapidlabsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVapidlabsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVapidlabs(ctx context.Context, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVapidlabsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVdeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVdeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVde(ctx context.Context, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVdeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVeeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVeeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVeeam(ctx context.Context, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVeeamRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVoidsecWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVoidsecRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVoidsec(ctx context.Context, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVoidsecRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckConfig(ctx context.Context, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckKevWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckKevRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckKev(ctx context.Context, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckKevRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvd(ctx context.Context, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvd2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvd2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulncheckNvd2(ctx context.Context, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulncheckNvd2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulnerabilityAliasesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulnerabilityAliasesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVulnerabilityAliases(ctx context.Context, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVulnerabilityAliasesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVyaireWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVyaireRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexVyaire(ctx context.Context, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexVyaireRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWatchguardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWatchguardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWatchguard(ctx context.Context, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWatchguardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWhatsappWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWhatsappRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWhatsapp(ctx context.Context, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWhatsappRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWibuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWibuRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWibu(ctx context.Context, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWibuRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWiresharkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWiresharkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWireshark(ctx context.Context, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWiresharkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWithSecureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWithSecureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWithSecure(ctx context.Context, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWithSecureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfi(ctx context.Context, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfsslWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfsslRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWolfssl(ctx context.Context, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWolfsslRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWordfenceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWordfenceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexWordfence(ctx context.Context, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexWordfenceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXen(ctx context.Context, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXeroxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXeroxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXerox(ctx context.Context, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXeroxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXiaomiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXiaomiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXiaomi(ctx context.Context, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXiaomiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXylemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXylemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexXylem(ctx context.Context, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexXylemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYokogawaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYokogawaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYokogawa(ctx context.Context, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYokogawaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYubicoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYubicoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexYubico(ctx context.Context, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexYubicoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZdiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZdiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZdi(ctx context.Context, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZdiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZeroscienceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZeroscienceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZeroscience(ctx context.Context, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZeroscienceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZimbraWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZimbraRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZimbra(ctx context.Context, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZimbraRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZoomWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZoomRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZoom(ctx context.Context, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZoomRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZscalerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZscalerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZscaler(ctx context.Context, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZscalerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZusoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZusoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZuso(ctx context.Context, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZusoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZyxelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZyxelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndexZyxel(ctx context.Context, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexZyxelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenapi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPurl(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPurlRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsVulncheckC2(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsVulncheckC2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBackupIndexRequest generates requests for GetBackupIndex
func NewGetBackupIndexRequest(server string, index GetBackupIndexParamsIndex) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCpeRequest generates requests for GetCpe
func NewGetCpeRequest(server string, params *GetCpeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cpe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cpe", runtime.ParamLocationQuery, params.Cpe); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndexRequest generates requests for GetIndex
func NewGetIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndexA10Request calls the generic GetIndexA10 builder with application/json body
func NewGetIndexA10Request(server string, body GetIndexA10JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexA10RequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexA10RequestWithBody generates requests for GetIndexA10 with any type of body
func NewGetIndexA10RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/a10")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAbbRequest calls the generic GetIndexAbb builder with application/json body
func NewGetIndexAbbRequest(server string, body GetIndexAbbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAbbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAbbRequestWithBody generates requests for GetIndexAbb with any type of body
func NewGetIndexAbbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/abb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAbbottRequest calls the generic GetIndexAbbott builder with application/json body
func NewGetIndexAbbottRequest(server string, body GetIndexAbbottJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAbbottRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAbbottRequestWithBody generates requests for GetIndexAbbott with any type of body
func NewGetIndexAbbottRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/abbott")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAbsoluteRequest calls the generic GetIndexAbsolute builder with application/json body
func NewGetIndexAbsoluteRequest(server string, body GetIndexAbsoluteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAbsoluteRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAbsoluteRequestWithBody generates requests for GetIndexAbsolute with any type of body
func NewGetIndexAbsoluteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/absolute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAcronisRequest calls the generic GetIndexAcronis builder with application/json body
func NewGetIndexAcronisRequest(server string, body GetIndexAcronisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAcronisRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAcronisRequestWithBody generates requests for GetIndexAcronis with any type of body
func NewGetIndexAcronisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/acronis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAdobeRequest calls the generic GetIndexAdobe builder with application/json body
func NewGetIndexAdobeRequest(server string, body GetIndexAdobeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAdobeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAdobeRequestWithBody generates requests for GetIndexAdobe with any type of body
func NewGetIndexAdobeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/adobe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAdvisoriesRequest calls the generic GetIndexAdvisories builder with application/json body
func NewGetIndexAdvisoriesRequest(server string, body GetIndexAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAdvisoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAdvisoriesRequestWithBody generates requests for GetIndexAdvisories with any type of body
func NewGetIndexAdvisoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAlephResearchRequest calls the generic GetIndexAlephResearch builder with application/json body
func NewGetIndexAlephResearchRequest(server string, body GetIndexAlephResearchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAlephResearchRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAlephResearchRequestWithBody generates requests for GetIndexAlephResearch with any type of body
func NewGetIndexAlephResearchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aleph-research")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAlmaRequest calls the generic GetIndexAlma builder with application/json body
func NewGetIndexAlmaRequest(server string, body GetIndexAlmaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAlmaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAlmaRequestWithBody generates requests for GetIndexAlma with any type of body
func NewGetIndexAlmaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/alma")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAlpineRequest calls the generic GetIndexAlpine builder with application/json body
func NewGetIndexAlpineRequest(server string, body GetIndexAlpineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAlpineRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAlpineRequestWithBody generates requests for GetIndexAlpine with any type of body
func NewGetIndexAlpineRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/alpine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAmazonRequest calls the generic GetIndexAmazon builder with application/json body
func NewGetIndexAmazonRequest(server string, body GetIndexAmazonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAmazonRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAmazonRequestWithBody generates requests for GetIndexAmazon with any type of body
func NewGetIndexAmazonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/amazon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAmdRequest calls the generic GetIndexAmd builder with application/json body
func NewGetIndexAmdRequest(server string, body GetIndexAmdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAmdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAmdRequestWithBody generates requests for GetIndexAmd with any type of body
func NewGetIndexAmdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/amd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAmiRequest calls the generic GetIndexAmi builder with application/json body
func NewGetIndexAmiRequest(server string, body GetIndexAmiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAmiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAmiRequestWithBody generates requests for GetIndexAmi with any type of body
func NewGetIndexAmiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAnchoreNvdOverrideRequest calls the generic GetIndexAnchoreNvdOverride builder with application/json body
func NewGetIndexAnchoreNvdOverrideRequest(server string, body GetIndexAnchoreNvdOverrideJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAnchoreNvdOverrideRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAnchoreNvdOverrideRequestWithBody generates requests for GetIndexAnchoreNvdOverride with any type of body
func NewGetIndexAnchoreNvdOverrideRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/anchore-nvd-override")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAndroidRequest calls the generic GetIndexAndroid builder with application/json body
func NewGetIndexAndroidRequest(server string, body GetIndexAndroidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAndroidRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAndroidRequestWithBody generates requests for GetIndexAndroid with any type of body
func NewGetIndexAndroidRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/android")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheActivemqRequest calls the generic GetIndexApacheActivemq builder with application/json body
func NewGetIndexApacheActivemqRequest(server string, body GetIndexApacheActivemqJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheActivemqRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheActivemqRequestWithBody generates requests for GetIndexApacheActivemq with any type of body
func NewGetIndexApacheActivemqRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-activemq")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheArchivaRequest calls the generic GetIndexApacheArchiva builder with application/json body
func NewGetIndexApacheArchivaRequest(server string, body GetIndexApacheArchivaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheArchivaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheArchivaRequestWithBody generates requests for GetIndexApacheArchiva with any type of body
func NewGetIndexApacheArchivaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-archiva")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheArrowRequest calls the generic GetIndexApacheArrow builder with application/json body
func NewGetIndexApacheArrowRequest(server string, body GetIndexApacheArrowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheArrowRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheArrowRequestWithBody generates requests for GetIndexApacheArrow with any type of body
func NewGetIndexApacheArrowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-arrow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheCamelRequest calls the generic GetIndexApacheCamel builder with application/json body
func NewGetIndexApacheCamelRequest(server string, body GetIndexApacheCamelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheCamelRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheCamelRequestWithBody generates requests for GetIndexApacheCamel with any type of body
func NewGetIndexApacheCamelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-camel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheCommonsRequest calls the generic GetIndexApacheCommons builder with application/json body
func NewGetIndexApacheCommonsRequest(server string, body GetIndexApacheCommonsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheCommonsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheCommonsRequestWithBody generates requests for GetIndexApacheCommons with any type of body
func NewGetIndexApacheCommonsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-commons")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheCouchdbRequest calls the generic GetIndexApacheCouchdb builder with application/json body
func NewGetIndexApacheCouchdbRequest(server string, body GetIndexApacheCouchdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheCouchdbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheCouchdbRequestWithBody generates requests for GetIndexApacheCouchdb with any type of body
func NewGetIndexApacheCouchdbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-couchdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheFlinkRequest calls the generic GetIndexApacheFlink builder with application/json body
func NewGetIndexApacheFlinkRequest(server string, body GetIndexApacheFlinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheFlinkRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheFlinkRequestWithBody generates requests for GetIndexApacheFlink with any type of body
func NewGetIndexApacheFlinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-flink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheGuacamoleRequest calls the generic GetIndexApacheGuacamole builder with application/json body
func NewGetIndexApacheGuacamoleRequest(server string, body GetIndexApacheGuacamoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheGuacamoleRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheGuacamoleRequestWithBody generates requests for GetIndexApacheGuacamole with any type of body
func NewGetIndexApacheGuacamoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-guacamole")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheHadoopRequest calls the generic GetIndexApacheHadoop builder with application/json body
func NewGetIndexApacheHadoopRequest(server string, body GetIndexApacheHadoopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheHadoopRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheHadoopRequestWithBody generates requests for GetIndexApacheHadoop with any type of body
func NewGetIndexApacheHadoopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-hadoop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheHttpRequest calls the generic GetIndexApacheHttp builder with application/json body
func NewGetIndexApacheHttpRequest(server string, body GetIndexApacheHttpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheHttpRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheHttpRequestWithBody generates requests for GetIndexApacheHttp with any type of body
func NewGetIndexApacheHttpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-http")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheJspwikiRequest calls the generic GetIndexApacheJspwiki builder with application/json body
func NewGetIndexApacheJspwikiRequest(server string, body GetIndexApacheJspwikiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheJspwikiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheJspwikiRequestWithBody generates requests for GetIndexApacheJspwiki with any type of body
func NewGetIndexApacheJspwikiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-jspwiki")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheKafkaRequest calls the generic GetIndexApacheKafka builder with application/json body
func NewGetIndexApacheKafkaRequest(server string, body GetIndexApacheKafkaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheKafkaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheKafkaRequestWithBody generates requests for GetIndexApacheKafka with any type of body
func NewGetIndexApacheKafkaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-kafka")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheLoggingservicesRequest calls the generic GetIndexApacheLoggingservices builder with application/json body
func NewGetIndexApacheLoggingservicesRequest(server string, body GetIndexApacheLoggingservicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheLoggingservicesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheLoggingservicesRequestWithBody generates requests for GetIndexApacheLoggingservices with any type of body
func NewGetIndexApacheLoggingservicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-loggingservices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheNifiRequest calls the generic GetIndexApacheNifi builder with application/json body
func NewGetIndexApacheNifiRequest(server string, body GetIndexApacheNifiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheNifiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheNifiRequestWithBody generates requests for GetIndexApacheNifi with any type of body
func NewGetIndexApacheNifiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-nifi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheOfbizRequest calls the generic GetIndexApacheOfbiz builder with application/json body
func NewGetIndexApacheOfbizRequest(server string, body GetIndexApacheOfbizJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheOfbizRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheOfbizRequestWithBody generates requests for GetIndexApacheOfbiz with any type of body
func NewGetIndexApacheOfbizRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-ofbiz")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheOpenmeetingsRequest calls the generic GetIndexApacheOpenmeetings builder with application/json body
func NewGetIndexApacheOpenmeetingsRequest(server string, body GetIndexApacheOpenmeetingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheOpenmeetingsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheOpenmeetingsRequestWithBody generates requests for GetIndexApacheOpenmeetings with any type of body
func NewGetIndexApacheOpenmeetingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-openmeetings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheOpenofficeRequest calls the generic GetIndexApacheOpenoffice builder with application/json body
func NewGetIndexApacheOpenofficeRequest(server string, body GetIndexApacheOpenofficeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheOpenofficeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheOpenofficeRequestWithBody generates requests for GetIndexApacheOpenoffice with any type of body
func NewGetIndexApacheOpenofficeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-openoffice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApachePulsarRequest calls the generic GetIndexApachePulsar builder with application/json body
func NewGetIndexApachePulsarRequest(server string, body GetIndexApachePulsarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApachePulsarRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApachePulsarRequestWithBody generates requests for GetIndexApachePulsar with any type of body
func NewGetIndexApachePulsarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-pulsar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheShiroRequest calls the generic GetIndexApacheShiro builder with application/json body
func NewGetIndexApacheShiroRequest(server string, body GetIndexApacheShiroJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheShiroRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheShiroRequestWithBody generates requests for GetIndexApacheShiro with any type of body
func NewGetIndexApacheShiroRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-shiro")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheSparkRequest calls the generic GetIndexApacheSpark builder with application/json body
func NewGetIndexApacheSparkRequest(server string, body GetIndexApacheSparkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheSparkRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheSparkRequestWithBody generates requests for GetIndexApacheSpark with any type of body
func NewGetIndexApacheSparkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-spark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheStrutsRequest calls the generic GetIndexApacheStruts builder with application/json body
func NewGetIndexApacheStrutsRequest(server string, body GetIndexApacheStrutsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheStrutsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheStrutsRequestWithBody generates requests for GetIndexApacheStruts with any type of body
func NewGetIndexApacheStrutsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-struts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheSubversionRequest calls the generic GetIndexApacheSubversion builder with application/json body
func NewGetIndexApacheSubversionRequest(server string, body GetIndexApacheSubversionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheSubversionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheSubversionRequestWithBody generates requests for GetIndexApacheSubversion with any type of body
func NewGetIndexApacheSubversionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-subversion")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheSupersetRequest calls the generic GetIndexApacheSuperset builder with application/json body
func NewGetIndexApacheSupersetRequest(server string, body GetIndexApacheSupersetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheSupersetRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheSupersetRequestWithBody generates requests for GetIndexApacheSuperset with any type of body
func NewGetIndexApacheSupersetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-superset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheTomcatRequest calls the generic GetIndexApacheTomcat builder with application/json body
func NewGetIndexApacheTomcatRequest(server string, body GetIndexApacheTomcatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheTomcatRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheTomcatRequestWithBody generates requests for GetIndexApacheTomcat with any type of body
func NewGetIndexApacheTomcatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-tomcat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexApacheZookeeperRequest calls the generic GetIndexApacheZookeeper builder with application/json body
func NewGetIndexApacheZookeeperRequest(server string, body GetIndexApacheZookeeperJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexApacheZookeeperRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexApacheZookeeperRequestWithBody generates requests for GetIndexApacheZookeeper with any type of body
func NewGetIndexApacheZookeeperRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apache-zookeeper")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAppcheckRequest calls the generic GetIndexAppcheck builder with application/json body
func NewGetIndexAppcheckRequest(server string, body GetIndexAppcheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAppcheckRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAppcheckRequestWithBody generates requests for GetIndexAppcheck with any type of body
func NewGetIndexAppcheckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/appcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAppgateRequest calls the generic GetIndexAppgate builder with application/json body
func NewGetIndexAppgateRequest(server string, body GetIndexAppgateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAppgateRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAppgateRequestWithBody generates requests for GetIndexAppgate with any type of body
func NewGetIndexAppgateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/appgate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAppleRequest calls the generic GetIndexApple builder with application/json body
func NewGetIndexAppleRequest(server string, body GetIndexAppleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAppleRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAppleRequestWithBody generates requests for GetIndexApple with any type of body
func NewGetIndexAppleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/apple")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexArchRequest calls the generic GetIndexArch builder with application/json body
func NewGetIndexArchRequest(server string, body GetIndexArchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexArchRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexArchRequestWithBody generates requests for GetIndexArch with any type of body
func NewGetIndexArchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/arch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAristaRequest calls the generic GetIndexArista builder with application/json body
func NewGetIndexAristaRequest(server string, body GetIndexAristaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAristaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAristaRequestWithBody generates requests for GetIndexArista with any type of body
func NewGetIndexAristaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/arista")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexArubaRequest calls the generic GetIndexAruba builder with application/json body
func NewGetIndexArubaRequest(server string, body GetIndexArubaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexArubaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexArubaRequestWithBody generates requests for GetIndexAruba with any type of body
func NewGetIndexArubaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aruba")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAsrgRequest calls the generic GetIndexAsrg builder with application/json body
func NewGetIndexAsrgRequest(server string, body GetIndexAsrgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAsrgRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAsrgRequestWithBody generates requests for GetIndexAsrg with any type of body
func NewGetIndexAsrgRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/asrg")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAssetnoteRequest calls the generic GetIndexAssetnote builder with application/json body
func NewGetIndexAssetnoteRequest(server string, body GetIndexAssetnoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAssetnoteRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAssetnoteRequestWithBody generates requests for GetIndexAssetnote with any type of body
func NewGetIndexAssetnoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/assetnote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAsteriskRequest calls the generic GetIndexAsterisk builder with application/json body
func NewGetIndexAsteriskRequest(server string, body GetIndexAsteriskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAsteriskRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAsteriskRequestWithBody generates requests for GetIndexAsterisk with any type of body
func NewGetIndexAsteriskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/asterisk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAsusRequest calls the generic GetIndexAsus builder with application/json body
func NewGetIndexAsusRequest(server string, body GetIndexAsusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAsusRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAsusRequestWithBody generates requests for GetIndexAsus with any type of body
func NewGetIndexAsusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/asus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAtlassianRequest calls the generic GetIndexAtlassian builder with application/json body
func NewGetIndexAtlassianRequest(server string, body GetIndexAtlassianJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAtlassianRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAtlassianRequestWithBody generates requests for GetIndexAtlassian with any type of body
func NewGetIndexAtlassianRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/atlassian")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAtlassianVulnsRequest calls the generic GetIndexAtlassianVulns builder with application/json body
func NewGetIndexAtlassianVulnsRequest(server string, body GetIndexAtlassianVulnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAtlassianVulnsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAtlassianVulnsRequestWithBody generates requests for GetIndexAtlassianVulns with any type of body
func NewGetIndexAtlassianVulnsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/atlassian-vulns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAtredisRequest calls the generic GetIndexAtredis builder with application/json body
func NewGetIndexAtredisRequest(server string, body GetIndexAtredisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAtredisRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAtredisRequestWithBody generates requests for GetIndexAtredis with any type of body
func NewGetIndexAtredisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/atredis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAuscertRequest calls the generic GetIndexAuscert builder with application/json body
func NewGetIndexAuscertRequest(server string, body GetIndexAuscertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAuscertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAuscertRequestWithBody generates requests for GetIndexAuscert with any type of body
func NewGetIndexAuscertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/auscert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAutodeskRequest calls the generic GetIndexAutodesk builder with application/json body
func NewGetIndexAutodeskRequest(server string, body GetIndexAutodeskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAutodeskRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAutodeskRequestWithBody generates requests for GetIndexAutodesk with any type of body
func NewGetIndexAutodeskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/autodesk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAvayaRequest calls the generic GetIndexAvaya builder with application/json body
func NewGetIndexAvayaRequest(server string, body GetIndexAvayaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAvayaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAvayaRequestWithBody generates requests for GetIndexAvaya with any type of body
func NewGetIndexAvayaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/avaya")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAvevaRequest calls the generic GetIndexAveva builder with application/json body
func NewGetIndexAvevaRequest(server string, body GetIndexAvevaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAvevaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAvevaRequestWithBody generates requests for GetIndexAveva with any type of body
func NewGetIndexAvevaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aveva")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAvigilonRequest calls the generic GetIndexAvigilon builder with application/json body
func NewGetIndexAvigilonRequest(server string, body GetIndexAvigilonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAvigilonRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAvigilonRequestWithBody generates requests for GetIndexAvigilon with any type of body
func NewGetIndexAvigilonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/avigilon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAwsRequest calls the generic GetIndexAws builder with application/json body
func NewGetIndexAwsRequest(server string, body GetIndexAwsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAwsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAwsRequestWithBody generates requests for GetIndexAws with any type of body
func NewGetIndexAwsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/aws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexAxisRequest calls the generic GetIndexAxis builder with application/json body
func NewGetIndexAxisRequest(server string, body GetIndexAxisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexAxisRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexAxisRequestWithBody generates requests for GetIndexAxis with any type of body
func NewGetIndexAxisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/axis")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBandrRequest calls the generic GetIndexBandr builder with application/json body
func NewGetIndexBandrRequest(server string, body GetIndexBandrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBandrRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBandrRequestWithBody generates requests for GetIndexBandr with any type of body
func NewGetIndexBandrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bandr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBaxterRequest calls the generic GetIndexBaxter builder with application/json body
func NewGetIndexBaxterRequest(server string, body GetIndexBaxterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBaxterRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBaxterRequestWithBody generates requests for GetIndexBaxter with any type of body
func NewGetIndexBaxterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/baxter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBbraunRequest calls the generic GetIndexBbraun builder with application/json body
func NewGetIndexBbraunRequest(server string, body GetIndexBbraunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBbraunRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBbraunRequestWithBody generates requests for GetIndexBbraun with any type of body
func NewGetIndexBbraunRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bbraun")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBdRequest calls the generic GetIndexBd builder with application/json body
func NewGetIndexBdRequest(server string, body GetIndexBdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBdRequestWithBody generates requests for GetIndexBd with any type of body
func NewGetIndexBdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBduRequest calls the generic GetIndexBdu builder with application/json body
func NewGetIndexBduRequest(server string, body GetIndexBduJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBduRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBduRequestWithBody generates requests for GetIndexBdu with any type of body
func NewGetIndexBduRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bdu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBeckhoffRequest calls the generic GetIndexBeckhoff builder with application/json body
func NewGetIndexBeckhoffRequest(server string, body GetIndexBeckhoffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBeckhoffRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBeckhoffRequestWithBody generates requests for GetIndexBeckhoff with any type of body
func NewGetIndexBeckhoffRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/beckhoff")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBeldenRequest calls the generic GetIndexBelden builder with application/json body
func NewGetIndexBeldenRequest(server string, body GetIndexBeldenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBeldenRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBeldenRequestWithBody generates requests for GetIndexBelden with any type of body
func NewGetIndexBeldenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/belden")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBeyondTrustRequest calls the generic GetIndexBeyondTrust builder with application/json body
func NewGetIndexBeyondTrustRequest(server string, body GetIndexBeyondTrustJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBeyondTrustRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBeyondTrustRequestWithBody generates requests for GetIndexBeyondTrust with any type of body
func NewGetIndexBeyondTrustRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/beyond-trust")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBinarlyRequest calls the generic GetIndexBinarly builder with application/json body
func NewGetIndexBinarlyRequest(server string, body GetIndexBinarlyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBinarlyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBinarlyRequestWithBody generates requests for GetIndexBinarly with any type of body
func NewGetIndexBinarlyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/binarly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBitdefenderRequest calls the generic GetIndexBitdefender builder with application/json body
func NewGetIndexBitdefenderRequest(server string, body GetIndexBitdefenderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBitdefenderRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBitdefenderRequestWithBody generates requests for GetIndexBitdefender with any type of body
func NewGetIndexBitdefenderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bitdefender")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBlackberryRequest calls the generic GetIndexBlackberry builder with application/json body
func NewGetIndexBlackberryRequest(server string, body GetIndexBlackberryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBlackberryRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBlackberryRequestWithBody generates requests for GetIndexBlackberry with any type of body
func NewGetIndexBlackberryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/blackberry")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBlsRequest calls the generic GetIndexBls builder with application/json body
func NewGetIndexBlsRequest(server string, body GetIndexBlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBlsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBlsRequestWithBody generates requests for GetIndexBls with any type of body
func NewGetIndexBlsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBoschRequest calls the generic GetIndexBosch builder with application/json body
func NewGetIndexBoschRequest(server string, body GetIndexBoschJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBoschRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBoschRequestWithBody generates requests for GetIndexBosch with any type of body
func NewGetIndexBoschRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/bosch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBostonScientificRequest calls the generic GetIndexBostonScientific builder with application/json body
func NewGetIndexBostonScientificRequest(server string, body GetIndexBostonScientificJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBostonScientificRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBostonScientificRequestWithBody generates requests for GetIndexBostonScientific with any type of body
func NewGetIndexBostonScientificRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/boston-scientific")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexBotnetsRequest calls the generic GetIndexBotnets builder with application/json body
func NewGetIndexBotnetsRequest(server string, body GetIndexBotnetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexBotnetsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexBotnetsRequestWithBody generates requests for GetIndexBotnets with any type of body
func NewGetIndexBotnetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/botnets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCaCyberCentreRequest calls the generic GetIndexCaCyberCentre builder with application/json body
func NewGetIndexCaCyberCentreRequest(server string, body GetIndexCaCyberCentreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCaCyberCentreRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCaCyberCentreRequestWithBody generates requests for GetIndexCaCyberCentre with any type of body
func NewGetIndexCaCyberCentreRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ca-cyber-centre")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCanvasRequest calls the generic GetIndexCanvas builder with application/json body
func NewGetIndexCanvasRequest(server string, body GetIndexCanvasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCanvasRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCanvasRequestWithBody generates requests for GetIndexCanvas with any type of body
func NewGetIndexCanvasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/canvas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCarestreamRequest calls the generic GetIndexCarestream builder with application/json body
func NewGetIndexCarestreamRequest(server string, body GetIndexCarestreamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCarestreamRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCarestreamRequestWithBody generates requests for GetIndexCarestream with any type of body
func NewGetIndexCarestreamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/carestream")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCargoRequest calls the generic GetIndexCargo builder with application/json body
func NewGetIndexCargoRequest(server string, body GetIndexCargoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCargoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCargoRequestWithBody generates requests for GetIndexCargo with any type of body
func NewGetIndexCargoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cargo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCarrierRequest calls the generic GetIndexCarrier builder with application/json body
func NewGetIndexCarrierRequest(server string, body GetIndexCarrierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCarrierRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCarrierRequestWithBody generates requests for GetIndexCarrier with any type of body
func NewGetIndexCarrierRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/carrier")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCblMarinerRequest calls the generic GetIndexCblMariner builder with application/json body
func NewGetIndexCblMarinerRequest(server string, body GetIndexCblMarinerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCblMarinerRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCblMarinerRequestWithBody generates requests for GetIndexCblMariner with any type of body
func NewGetIndexCblMarinerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cbl-mariner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCentosRequest calls the generic GetIndexCentos builder with application/json body
func NewGetIndexCentosRequest(server string, body GetIndexCentosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCentosRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCentosRequestWithBody generates requests for GetIndexCentos with any type of body
func NewGetIndexCentosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/centos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertBeRequest calls the generic GetIndexCertBe builder with application/json body
func NewGetIndexCertBeRequest(server string, body GetIndexCertBeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertBeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCertBeRequestWithBody generates requests for GetIndexCertBe with any type of body
func NewGetIndexCertBeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-be")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertUaRequest calls the generic GetIndexCertUa builder with application/json body
func NewGetIndexCertUaRequest(server string, body GetIndexCertUaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertUaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCertUaRequestWithBody generates requests for GetIndexCertUa with any type of body
func NewGetIndexCertUaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cert-ua")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCerteuRequest calls the generic GetIndexCerteu builder with application/json body
func NewGetIndexCerteuRequest(server string, body GetIndexCerteuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCerteuRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCerteuRequestWithBody generates requests for GetIndexCerteu with any type of body
func NewGetIndexCerteuRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/certeu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCertfrRequest calls the generic GetIndexCertfr builder with application/json body
func NewGetIndexCertfrRequest(server string, body GetIndexCertfrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCertfrRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCertfrRequestWithBody generates requests for GetIndexCertfr with any type of body
func NewGetIndexCertfrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/certfr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexChainguardRequest calls the generic GetIndexChainguard builder with application/json body
func NewGetIndexChainguardRequest(server string, body GetIndexChainguardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexChainguardRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexChainguardRequestWithBody generates requests for GetIndexChainguard with any type of body
func NewGetIndexChainguardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/chainguard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCheckpointRequest calls the generic GetIndexCheckpoint builder with application/json body
func NewGetIndexCheckpointRequest(server string, body GetIndexCheckpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCheckpointRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCheckpointRequestWithBody generates requests for GetIndexCheckpoint with any type of body
func NewGetIndexCheckpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/checkpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexChromeRequest calls the generic GetIndexChrome builder with application/json body
func NewGetIndexChromeRequest(server string, body GetIndexChromeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexChromeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexChromeRequestWithBody generates requests for GetIndexChrome with any type of body
func NewGetIndexChromeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/chrome")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCisaAlertsRequest calls the generic GetIndexCisaAlerts builder with application/json body
func NewGetIndexCisaAlertsRequest(server string, body GetIndexCisaAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCisaAlertsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCisaAlertsRequestWithBody generates requests for GetIndexCisaAlerts with any type of body
func NewGetIndexCisaAlertsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisa-alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCisaKevRequest calls the generic GetIndexCisaKev builder with application/json body
func NewGetIndexCisaKevRequest(server string, body GetIndexCisaKevJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCisaKevRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCisaKevRequestWithBody generates requests for GetIndexCisaKev with any type of body
func NewGetIndexCisaKevRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisa-kev")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCiscoRequest calls the generic GetIndexCisco builder with application/json body
func NewGetIndexCiscoRequest(server string, body GetIndexCiscoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCiscoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCiscoRequestWithBody generates requests for GetIndexCisco with any type of body
func NewGetIndexCiscoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisco")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCiscoTalosRequest calls the generic GetIndexCiscoTalos builder with application/json body
func NewGetIndexCiscoTalosRequest(server string, body GetIndexCiscoTalosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCiscoTalosRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCiscoTalosRequestWithBody generates requests for GetIndexCiscoTalos with any type of body
func NewGetIndexCiscoTalosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cisco-talos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCitrixRequest calls the generic GetIndexCitrix builder with application/json body
func NewGetIndexCitrixRequest(server string, body GetIndexCitrixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCitrixRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCitrixRequestWithBody generates requests for GetIndexCitrix with any type of body
func NewGetIndexCitrixRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/citrix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexClarotyRequest calls the generic GetIndexClaroty builder with application/json body
func NewGetIndexClarotyRequest(server string, body GetIndexClarotyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexClarotyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexClarotyRequestWithBody generates requests for GetIndexClaroty with any type of body
func NewGetIndexClarotyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/claroty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCloudbeesRequest calls the generic GetIndexCloudbees builder with application/json body
func NewGetIndexCloudbeesRequest(server string, body GetIndexCloudbeesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCloudbeesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCloudbeesRequestWithBody generates requests for GetIndexCloudbees with any type of body
func NewGetIndexCloudbeesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cloudbees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCloudvulndbRequest calls the generic GetIndexCloudvulndb builder with application/json body
func NewGetIndexCloudvulndbRequest(server string, body GetIndexCloudvulndbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCloudvulndbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCloudvulndbRequestWithBody generates requests for GetIndexCloudvulndb with any type of body
func NewGetIndexCloudvulndbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cloudvulndb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnaCveCountRequest calls the generic GetIndexCnaCveCount builder with application/json body
func NewGetIndexCnaCveCountRequest(server string, body GetIndexCnaCveCountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnaCveCountRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCnaCveCountRequestWithBody generates requests for GetIndexCnaCveCount with any type of body
func NewGetIndexCnaCveCountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cna-cve-count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnnvdRequest calls the generic GetIndexCnnvd builder with application/json body
func NewGetIndexCnnvdRequest(server string, body GetIndexCnnvdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnnvdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCnnvdRequestWithBody generates requests for GetIndexCnnvd with any type of body
func NewGetIndexCnnvdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cnnvd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnvdBulletinsRequest calls the generic GetIndexCnvdBulletins builder with application/json body
func NewGetIndexCnvdBulletinsRequest(server string, body GetIndexCnvdBulletinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnvdBulletinsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCnvdBulletinsRequestWithBody generates requests for GetIndexCnvdBulletins with any type of body
func NewGetIndexCnvdBulletinsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cnvd-bulletins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCnvdFlawsRequest calls the generic GetIndexCnvdFlaws builder with application/json body
func NewGetIndexCnvdFlawsRequest(server string, body GetIndexCnvdFlawsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCnvdFlawsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCnvdFlawsRequestWithBody generates requests for GetIndexCnvdFlaws with any type of body
func NewGetIndexCnvdFlawsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cnvd-flaws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCocoapodsRequest calls the generic GetIndexCocoapods builder with application/json body
func NewGetIndexCocoapodsRequest(server string, body GetIndexCocoapodsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCocoapodsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCocoapodsRequestWithBody generates requests for GetIndexCocoapods with any type of body
func NewGetIndexCocoapodsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cocoapods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCodesysRequest calls the generic GetIndexCodesys builder with application/json body
func NewGetIndexCodesysRequest(server string, body GetIndexCodesysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCodesysRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCodesysRequestWithBody generates requests for GetIndexCodesys with any type of body
func NewGetIndexCodesysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/codesys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCompassSecurityRequest calls the generic GetIndexCompassSecurity builder with application/json body
func NewGetIndexCompassSecurityRequest(server string, body GetIndexCompassSecurityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCompassSecurityRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCompassSecurityRequestWithBody generates requests for GetIndexCompassSecurity with any type of body
func NewGetIndexCompassSecurityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/compass-security")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexComposerRequest calls the generic GetIndexComposer builder with application/json body
func NewGetIndexComposerRequest(server string, body GetIndexComposerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexComposerRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexComposerRequestWithBody generates requests for GetIndexComposer with any type of body
func NewGetIndexComposerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/composer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexConanRequest calls the generic GetIndexConan builder with application/json body
func NewGetIndexConanRequest(server string, body GetIndexConanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexConanRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexConanRequestWithBody generates requests for GetIndexConan with any type of body
func NewGetIndexConanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/conan")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCrestronRequest calls the generic GetIndexCrestron builder with application/json body
func NewGetIndexCrestronRequest(server string, body GetIndexCrestronJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCrestronRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCrestronRequestWithBody generates requests for GetIndexCrestron with any type of body
func NewGetIndexCrestronRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/crestron")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCurlRequest calls the generic GetIndexCurl builder with application/json body
func NewGetIndexCurlRequest(server string, body GetIndexCurlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCurlRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCurlRequestWithBody generates requests for GetIndexCurl with any type of body
func NewGetIndexCurlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/curl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexCweRequest calls the generic GetIndexCwe builder with application/json body
func NewGetIndexCweRequest(server string, body GetIndexCweJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexCweRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexCweRequestWithBody generates requests for GetIndexCwe with any type of body
func NewGetIndexCweRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/cwe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDahuaRequest calls the generic GetIndexDahua builder with application/json body
func NewGetIndexDahuaRequest(server string, body GetIndexDahuaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDahuaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDahuaRequestWithBody generates requests for GetIndexDahua with any type of body
func NewGetIndexDahuaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dahua")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDassaultRequest calls the generic GetIndexDassault builder with application/json body
func NewGetIndexDassaultRequest(server string, body GetIndexDassaultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDassaultRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDassaultRequestWithBody generates requests for GetIndexDassault with any type of body
func NewGetIndexDassaultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dassault")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDebianRequest calls the generic GetIndexDebian builder with application/json body
func NewGetIndexDebianRequest(server string, body GetIndexDebianJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDebianRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDebianRequestWithBody generates requests for GetIndexDebian with any type of body
func NewGetIndexDebianRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/debian")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDebianDsaRequest calls the generic GetIndexDebianDsa builder with application/json body
func NewGetIndexDebianDsaRequest(server string, body GetIndexDebianDsaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDebianDsaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDebianDsaRequestWithBody generates requests for GetIndexDebianDsa with any type of body
func NewGetIndexDebianDsaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/debian-dsa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDellRequest calls the generic GetIndexDell builder with application/json body
func NewGetIndexDellRequest(server string, body GetIndexDellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDellRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDellRequestWithBody generates requests for GetIndexDell with any type of body
func NewGetIndexDellRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDeltaRequest calls the generic GetIndexDelta builder with application/json body
func NewGetIndexDeltaRequest(server string, body GetIndexDeltaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDeltaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDeltaRequestWithBody generates requests for GetIndexDelta with any type of body
func NewGetIndexDeltaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/delta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDotcmsRequest calls the generic GetIndexDotcms builder with application/json body
func NewGetIndexDotcmsRequest(server string, body GetIndexDotcmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDotcmsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDotcmsRequestWithBody generates requests for GetIndexDotcms with any type of body
func NewGetIndexDotcmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dotcms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDragosRequest calls the generic GetIndexDragos builder with application/json body
func NewGetIndexDragosRequest(server string, body GetIndexDragosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDragosRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDragosRequestWithBody generates requests for GetIndexDragos with any type of body
func NewGetIndexDragosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/dragos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexDraytekRequest calls the generic GetIndexDraytek builder with application/json body
func NewGetIndexDraytekRequest(server string, body GetIndexDraytekJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexDraytekRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexDraytekRequestWithBody generates requests for GetIndexDraytek with any type of body
func NewGetIndexDraytekRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/draytek")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEatonRequest calls the generic GetIndexEaton builder with application/json body
func NewGetIndexEatonRequest(server string, body GetIndexEatonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEatonRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexEatonRequestWithBody generates requests for GetIndexEaton with any type of body
func NewGetIndexEatonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/eaton")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexElasticRequest calls the generic GetIndexElastic builder with application/json body
func NewGetIndexElasticRequest(server string, body GetIndexElasticJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexElasticRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexElasticRequestWithBody generates requests for GetIndexElastic with any type of body
func NewGetIndexElasticRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/elastic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexElspecRequest calls the generic GetIndexElspec builder with application/json body
func NewGetIndexElspecRequest(server string, body GetIndexElspecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexElspecRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexElspecRequestWithBody generates requests for GetIndexElspec with any type of body
func NewGetIndexElspecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/elspec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEmersonRequest calls the generic GetIndexEmerson builder with application/json body
func NewGetIndexEmersonRequest(server string, body GetIndexEmersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEmersonRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexEmersonRequestWithBody generates requests for GetIndexEmerson with any type of body
func NewGetIndexEmersonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/emerson")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEolRequest calls the generic GetIndexEol builder with application/json body
func NewGetIndexEolRequest(server string, body GetIndexEolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEolRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexEolRequestWithBody generates requests for GetIndexEol with any type of body
func NewGetIndexEolRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/eol")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexEpssRequest calls the generic GetIndexEpss builder with application/json body
func NewGetIndexEpssRequest(server string, body GetIndexEpssJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexEpssRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexEpssRequestWithBody generates requests for GetIndexEpss with any type of body
func NewGetIndexEpssRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/epss")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExodusIntelRequest calls the generic GetIndexExodusIntel builder with application/json body
func NewGetIndexExodusIntelRequest(server string, body GetIndexExodusIntelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExodusIntelRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexExodusIntelRequestWithBody generates requests for GetIndexExodusIntel with any type of body
func NewGetIndexExodusIntelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exodus-intel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitChainsRequest calls the generic GetIndexExploitChains builder with application/json body
func NewGetIndexExploitChainsRequest(server string, body GetIndexExploitChainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitChainsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexExploitChainsRequestWithBody generates requests for GetIndexExploitChains with any type of body
func NewGetIndexExploitChainsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploit-chains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitdbRequest calls the generic GetIndexExploitdb builder with application/json body
func NewGetIndexExploitdbRequest(server string, body GetIndexExploitdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitdbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexExploitdbRequestWithBody generates requests for GetIndexExploitdb with any type of body
func NewGetIndexExploitdbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploitdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexExploitsRequest calls the generic GetIndexExploits builder with application/json body
func NewGetIndexExploitsRequest(server string, body GetIndexExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexExploitsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexExploitsRequestWithBody generates requests for GetIndexExploits with any type of body
func NewGetIndexExploitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFSecureRequest calls the generic GetIndexFSecure builder with application/json body
func NewGetIndexFSecureRequest(server string, body GetIndexFSecureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFSecureRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexFSecureRequestWithBody generates requests for GetIndexFSecure with any type of body
func NewGetIndexFSecureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/f-secure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFastlyRequest calls the generic GetIndexFastly builder with application/json body
func NewGetIndexFastlyRequest(server string, body GetIndexFastlyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFastlyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexFastlyRequestWithBody generates requests for GetIndexFastly with any type of body
func NewGetIndexFastlyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fastly")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFedoraRequest calls the generic GetIndexFedora builder with application/json body
func NewGetIndexFedoraRequest(server string, body GetIndexFedoraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFedoraRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexFedoraRequestWithBody generates requests for GetIndexFedora with any type of body
func NewGetIndexFedoraRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fedora")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFilecloudRequest calls the generic GetIndexFilecloud builder with application/json body
func NewGetIndexFilecloudRequest(server string, body GetIndexFilecloudJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFilecloudRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexFilecloudRequestWithBody generates requests for GetIndexFilecloud with any type of body
func NewGetIndexFilecloudRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/filecloud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexForgerockRequest calls the generic GetIndexForgerock builder with application/json body
func NewGetIndexForgerockRequest(server string, body GetIndexForgerockJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexForgerockRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexForgerockRequestWithBody generates requests for GetIndexForgerock with any type of body
func NewGetIndexForgerockRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/forgerock")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFortinetRequest calls the generic GetIndexFortinet builder with application/json body
func NewGetIndexFortinetRequest(server string, body GetIndexFortinetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFortinetRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexFortinetRequestWithBody generates requests for GetIndexFortinet with any type of body
func NewGetIndexFortinetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/fortinet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexFreebsdRequest calls the generic GetIndexFreebsd builder with application/json body
func NewGetIndexFreebsdRequest(server string, body GetIndexFreebsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexFreebsdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexFreebsdRequestWithBody generates requests for GetIndexFreebsd with any type of body
func NewGetIndexFreebsdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/freebsd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGallagherRequest calls the generic GetIndexGallagher builder with application/json body
func NewGetIndexGallagherRequest(server string, body GetIndexGallagherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGallagherRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGallagherRequestWithBody generates requests for GetIndexGallagher with any type of body
func NewGetIndexGallagherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gallagher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGcpRequest calls the generic GetIndexGcp builder with application/json body
func NewGetIndexGcpRequest(server string, body GetIndexGcpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGcpRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGcpRequestWithBody generates requests for GetIndexGcp with any type of body
func NewGetIndexGcpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gcp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGeGasRequest calls the generic GetIndexGeGas builder with application/json body
func NewGetIndexGeGasRequest(server string, body GetIndexGeGasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGeGasRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGeGasRequestWithBody generates requests for GetIndexGeGas with any type of body
func NewGetIndexGeGasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ge-gas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGeHealthcareRequest calls the generic GetIndexGeHealthcare builder with application/json body
func NewGetIndexGeHealthcareRequest(server string, body GetIndexGeHealthcareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGeHealthcareRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGeHealthcareRequestWithBody generates requests for GetIndexGeHealthcare with any type of body
func NewGetIndexGeHealthcareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ge-healthcare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGemRequest calls the generic GetIndexGem builder with application/json body
func NewGetIndexGemRequest(server string, body GetIndexGemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGemRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGemRequestWithBody generates requests for GetIndexGem with any type of body
func NewGetIndexGemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGenetecRequest calls the generic GetIndexGenetec builder with application/json body
func NewGetIndexGenetecRequest(server string, body GetIndexGenetecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGenetecRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGenetecRequestWithBody generates requests for GetIndexGenetec with any type of body
func NewGetIndexGenetecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/genetec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGigabyteRequest calls the generic GetIndexGigabyte builder with application/json body
func NewGetIndexGigabyteRequest(server string, body GetIndexGigabyteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGigabyteRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGigabyteRequestWithBody generates requests for GetIndexGigabyte with any type of body
func NewGetIndexGigabyteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gigabyte")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGiteeExploitsRequest calls the generic GetIndexGiteeExploits builder with application/json body
func NewGetIndexGiteeExploitsRequest(server string, body GetIndexGiteeExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGiteeExploitsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGiteeExploitsRequestWithBody generates requests for GetIndexGiteeExploits with any type of body
func NewGetIndexGiteeExploitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gitee-exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGithubExploitsRequest calls the generic GetIndexGithubExploits builder with application/json body
func NewGetIndexGithubExploitsRequest(server string, body GetIndexGithubExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGithubExploitsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGithubExploitsRequestWithBody generates requests for GetIndexGithubExploits with any type of body
func NewGetIndexGithubExploitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/github-exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGithubSecurityAdvisoriesRequest calls the generic GetIndexGithubSecurityAdvisories builder with application/json body
func NewGetIndexGithubSecurityAdvisoriesRequest(server string, body GetIndexGithubSecurityAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGithubSecurityAdvisoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGithubSecurityAdvisoriesRequestWithBody generates requests for GetIndexGithubSecurityAdvisories with any type of body
func NewGetIndexGithubSecurityAdvisoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/github-security-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGitlabAdvisoriesCommunityRequest calls the generic GetIndexGitlabAdvisoriesCommunity builder with application/json body
func NewGetIndexGitlabAdvisoriesCommunityRequest(server string, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGitlabAdvisoriesCommunityRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGitlabAdvisoriesCommunityRequestWithBody generates requests for GetIndexGitlabAdvisoriesCommunity with any type of body
func NewGetIndexGitlabAdvisoriesCommunityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gitlab-advisories-community")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGitlabExploitsRequest calls the generic GetIndexGitlabExploits builder with application/json body
func NewGetIndexGitlabExploitsRequest(server string, body GetIndexGitlabExploitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGitlabExploitsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGitlabExploitsRequestWithBody generates requests for GetIndexGitlabExploits with any type of body
func NewGetIndexGitlabExploitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gitlab-exploits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGnutlsRequest calls the generic GetIndexGnutls builder with application/json body
func NewGetIndexGnutlsRequest(server string, body GetIndexGnutlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGnutlsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGnutlsRequestWithBody generates requests for GetIndexGnutls with any type of body
func NewGetIndexGnutlsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/gnutls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGolangRequest calls the generic GetIndexGolang builder with application/json body
func NewGetIndexGolangRequest(server string, body GetIndexGolangJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGolangRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGolangRequestWithBody generates requests for GetIndexGolang with any type of body
func NewGetIndexGolangRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/golang")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGoogle0dayItwRequest calls the generic GetIndexGoogle0dayItw builder with application/json body
func NewGetIndexGoogle0dayItwRequest(server string, body GetIndexGoogle0dayItwJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGoogle0dayItwRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGoogle0dayItwRequestWithBody generates requests for GetIndexGoogle0dayItw with any type of body
func NewGetIndexGoogle0dayItwRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/google-0day-itw")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGoogleContainerOptimizedOsRequest calls the generic GetIndexGoogleContainerOptimizedOs builder with application/json body
func NewGetIndexGoogleContainerOptimizedOsRequest(server string, body GetIndexGoogleContainerOptimizedOsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGoogleContainerOptimizedOsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGoogleContainerOptimizedOsRequestWithBody generates requests for GetIndexGoogleContainerOptimizedOs with any type of body
func NewGetIndexGoogleContainerOptimizedOsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/google-container-optimized-os")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGrafanaRequest calls the generic GetIndexGrafana builder with application/json body
func NewGetIndexGrafanaRequest(server string, body GetIndexGrafanaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGrafanaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGrafanaRequestWithBody generates requests for GetIndexGrafana with any type of body
func NewGetIndexGrafanaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/grafana")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexGreynoiseMetadataRequest calls the generic GetIndexGreynoiseMetadata builder with application/json body
func NewGetIndexGreynoiseMetadataRequest(server string, body GetIndexGreynoiseMetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexGreynoiseMetadataRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexGreynoiseMetadataRequestWithBody generates requests for GetIndexGreynoiseMetadata with any type of body
func NewGetIndexGreynoiseMetadataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/greynoise-metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHackageRequest calls the generic GetIndexHackage builder with application/json body
func NewGetIndexHackageRequest(server string, body GetIndexHackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHackageRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHackageRequestWithBody generates requests for GetIndexHackage with any type of body
func NewGetIndexHackageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hackage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHarmonyosRequest calls the generic GetIndexHarmonyos builder with application/json body
func NewGetIndexHarmonyosRequest(server string, body GetIndexHarmonyosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHarmonyosRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHarmonyosRequestWithBody generates requests for GetIndexHarmonyos with any type of body
func NewGetIndexHarmonyosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/harmonyos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHashicorpRequest calls the generic GetIndexHashicorp builder with application/json body
func NewGetIndexHashicorpRequest(server string, body GetIndexHashicorpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHashicorpRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHashicorpRequestWithBody generates requests for GetIndexHashicorp with any type of body
func NewGetIndexHashicorpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hashicorp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHaskellSadbRequest calls the generic GetIndexHaskellSadb builder with application/json body
func NewGetIndexHaskellSadbRequest(server string, body GetIndexHaskellSadbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHaskellSadbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHaskellSadbRequestWithBody generates requests for GetIndexHaskellSadb with any type of body
func NewGetIndexHaskellSadbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/haskell-sadb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHclRequest calls the generic GetIndexHcl builder with application/json body
func NewGetIndexHclRequest(server string, body GetIndexHclJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHclRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHclRequestWithBody generates requests for GetIndexHcl with any type of body
func NewGetIndexHclRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hcl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHexRequest calls the generic GetIndexHex builder with application/json body
func NewGetIndexHexRequest(server string, body GetIndexHexJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHexRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHexRequestWithBody generates requests for GetIndexHex with any type of body
func NewGetIndexHexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hex")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHikvisionRequest calls the generic GetIndexHikvision builder with application/json body
func NewGetIndexHikvisionRequest(server string, body GetIndexHikvisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHikvisionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHikvisionRequestWithBody generates requests for GetIndexHikvision with any type of body
func NewGetIndexHikvisionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hikvision")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHillromRequest calls the generic GetIndexHillrom builder with application/json body
func NewGetIndexHillromRequest(server string, body GetIndexHillromJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHillromRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHillromRequestWithBody generates requests for GetIndexHillrom with any type of body
func NewGetIndexHillromRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hillrom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHitachiRequest calls the generic GetIndexHitachi builder with application/json body
func NewGetIndexHitachiRequest(server string, body GetIndexHitachiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHitachiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHitachiRequestWithBody generates requests for GetIndexHitachi with any type of body
func NewGetIndexHitachiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hitachi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHitachiEnergyRequest calls the generic GetIndexHitachiEnergy builder with application/json body
func NewGetIndexHitachiEnergyRequest(server string, body GetIndexHitachiEnergyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHitachiEnergyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHitachiEnergyRequestWithBody generates requests for GetIndexHitachiEnergy with any type of body
func NewGetIndexHitachiEnergyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hitachi-energy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHkcertRequest calls the generic GetIndexHkcert builder with application/json body
func NewGetIndexHkcertRequest(server string, body GetIndexHkcertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHkcertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHkcertRequestWithBody generates requests for GetIndexHkcert with any type of body
func NewGetIndexHkcertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hkcert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHoneywellRequest calls the generic GetIndexHoneywell builder with application/json body
func NewGetIndexHoneywellRequest(server string, body GetIndexHoneywellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHoneywellRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHoneywellRequestWithBody generates requests for GetIndexHoneywell with any type of body
func NewGetIndexHoneywellRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/honeywell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHpRequest calls the generic GetIndexHp builder with application/json body
func NewGetIndexHpRequest(server string, body GetIndexHpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHpRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHpRequestWithBody generates requests for GetIndexHp with any type of body
func NewGetIndexHpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/hp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHuaweiEulerosRequest calls the generic GetIndexHuaweiEuleros builder with application/json body
func NewGetIndexHuaweiEulerosRequest(server string, body GetIndexHuaweiEulerosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHuaweiEulerosRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHuaweiEulerosRequestWithBody generates requests for GetIndexHuaweiEuleros with any type of body
func NewGetIndexHuaweiEulerosRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/huawei-euleros")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHuaweiIpsRequest calls the generic GetIndexHuaweiIps builder with application/json body
func NewGetIndexHuaweiIpsRequest(server string, body GetIndexHuaweiIpsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHuaweiIpsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHuaweiIpsRequestWithBody generates requests for GetIndexHuaweiIps with any type of body
func NewGetIndexHuaweiIpsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/huawei-ips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexHuaweiPsirtRequest calls the generic GetIndexHuaweiPsirt builder with application/json body
func NewGetIndexHuaweiPsirtRequest(server string, body GetIndexHuaweiPsirtJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexHuaweiPsirtRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexHuaweiPsirtRequestWithBody generates requests for GetIndexHuaweiPsirt with any type of body
func NewGetIndexHuaweiPsirtRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/huawei-psirt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIavaRequest calls the generic GetIndexIava builder with application/json body
func NewGetIndexIavaRequest(server string, body GetIndexIavaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIavaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIavaRequestWithBody generates requests for GetIndexIava with any type of body
func NewGetIndexIavaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/iava")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIbmRequest calls the generic GetIndexIbm builder with application/json body
func NewGetIndexIbmRequest(server string, body GetIndexIbmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIbmRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIbmRequestWithBody generates requests for GetIndexIbm with any type of body
func NewGetIndexIbmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ibm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIdemiaRequest calls the generic GetIndexIdemia builder with application/json body
func NewGetIndexIdemiaRequest(server string, body GetIndexIdemiaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIdemiaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIdemiaRequestWithBody generates requests for GetIndexIdemia with any type of body
func NewGetIndexIdemiaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/idemia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIlAlertsRequest calls the generic GetIndexIlAlerts builder with application/json body
func NewGetIndexIlAlertsRequest(server string, body GetIndexIlAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIlAlertsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIlAlertsRequestWithBody generates requests for GetIndexIlAlerts with any type of body
func NewGetIndexIlAlertsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/il-alerts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIlVulnerabilitiesRequest calls the generic GetIndexIlVulnerabilities builder with application/json body
func NewGetIndexIlVulnerabilitiesRequest(server string, body GetIndexIlVulnerabilitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIlVulnerabilitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIlVulnerabilitiesRequestWithBody generates requests for GetIndexIlVulnerabilities with any type of body
func NewGetIndexIlVulnerabilitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/il-vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIncibeRequest calls the generic GetIndexIncibe builder with application/json body
func NewGetIndexIncibeRequest(server string, body GetIndexIncibeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIncibeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIncibeRequestWithBody generates requests for GetIndexIncibe with any type of body
func NewGetIndexIncibeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/incibe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexInitialAccessRequest calls the generic GetIndexInitialAccess builder with application/json body
func NewGetIndexInitialAccessRequest(server string, body GetIndexInitialAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexInitialAccessRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexInitialAccessRequestWithBody generates requests for GetIndexInitialAccess with any type of body
func NewGetIndexInitialAccessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/initial-access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexInitialAccessGitRequest calls the generic GetIndexInitialAccessGit builder with application/json body
func NewGetIndexInitialAccessGitRequest(server string, body GetIndexInitialAccessGitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexInitialAccessGitRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexInitialAccessGitRequestWithBody generates requests for GetIndexInitialAccessGit with any type of body
func NewGetIndexInitialAccessGitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/initial-access-git")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIntelRequest calls the generic GetIndexIntel builder with application/json body
func NewGetIndexIntelRequest(server string, body GetIndexIntelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIntelRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIntelRequestWithBody generates requests for GetIndexIntel with any type of body
func NewGetIndexIntelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/intel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel10dRequest calls the generic GetIndexIpintel10d builder with application/json body
func NewGetIndexIpintel10dRequest(server string, body GetIndexIpintel10dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel10dRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIpintel10dRequestWithBody generates requests for GetIndexIpintel10d with any type of body
func NewGetIndexIpintel10dRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-10d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel30dRequest calls the generic GetIndexIpintel30d builder with application/json body
func NewGetIndexIpintel30dRequest(server string, body GetIndexIpintel30dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel30dRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIpintel30dRequestWithBody generates requests for GetIndexIpintel30d with any type of body
func NewGetIndexIpintel30dRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-30d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel3dRequest calls the generic GetIndexIpintel3d builder with application/json body
func NewGetIndexIpintel3dRequest(server string, body GetIndexIpintel3dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel3dRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIpintel3dRequestWithBody generates requests for GetIndexIpintel3d with any type of body
func NewGetIndexIpintel3dRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-3d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIpintel90dRequest calls the generic GetIndexIpintel90d builder with application/json body
func NewGetIndexIpintel90dRequest(server string, body GetIndexIpintel90dJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIpintel90dRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIpintel90dRequestWithBody generates requests for GetIndexIpintel90d with any type of body
func NewGetIndexIpintel90dRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ipintel-90d")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIstioRequest calls the generic GetIndexIstio builder with application/json body
func NewGetIndexIstioRequest(server string, body GetIndexIstioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIstioRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIstioRequestWithBody generates requests for GetIndexIstio with any type of body
func NewGetIndexIstioRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/istio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIvantiRequest calls the generic GetIndexIvanti builder with application/json body
func NewGetIndexIvantiRequest(server string, body GetIndexIvantiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIvantiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIvantiRequestWithBody generates requests for GetIndexIvanti with any type of body
func NewGetIndexIvantiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ivanti")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexIvantiRssRequest calls the generic GetIndexIvantiRss builder with application/json body
func NewGetIndexIvantiRssRequest(server string, body GetIndexIvantiRssJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexIvantiRssRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexIvantiRssRequestWithBody generates requests for GetIndexIvantiRss with any type of body
func NewGetIndexIvantiRssRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ivanti-rss")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJenkinsRequest calls the generic GetIndexJenkins builder with application/json body
func NewGetIndexJenkinsRequest(server string, body GetIndexJenkinsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJenkinsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexJenkinsRequestWithBody generates requests for GetIndexJenkins with any type of body
func NewGetIndexJenkinsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jenkins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJetbrainsRequest calls the generic GetIndexJetbrains builder with application/json body
func NewGetIndexJetbrainsRequest(server string, body GetIndexJetbrainsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJetbrainsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexJetbrainsRequestWithBody generates requests for GetIndexJetbrains with any type of body
func NewGetIndexJetbrainsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jetbrains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJfrogRequest calls the generic GetIndexJfrog builder with application/json body
func NewGetIndexJfrogRequest(server string, body GetIndexJfrogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJfrogRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexJfrogRequestWithBody generates requests for GetIndexJfrog with any type of body
func NewGetIndexJfrogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jfrog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJnjRequest calls the generic GetIndexJnj builder with application/json body
func NewGetIndexJnjRequest(server string, body GetIndexJnjJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJnjRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexJnjRequestWithBody generates requests for GetIndexJnj with any type of body
func NewGetIndexJnjRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jnj")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexJvndbRequest calls the generic GetIndexJvndb builder with application/json body
func NewGetIndexJvndbRequest(server string, body GetIndexJvndbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexJvndbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexJvndbRequestWithBody generates requests for GetIndexJvndb with any type of body
func NewGetIndexJvndbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/jvndb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKasperskyIcsCertRequest calls the generic GetIndexKasperskyIcsCert builder with application/json body
func NewGetIndexKasperskyIcsCertRequest(server string, body GetIndexKasperskyIcsCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKasperskyIcsCertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexKasperskyIcsCertRequestWithBody generates requests for GetIndexKasperskyIcsCert with any type of body
func NewGetIndexKasperskyIcsCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/kaspersky-ics-cert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKrcertSecurityNoticesRequest calls the generic GetIndexKrcertSecurityNotices builder with application/json body
func NewGetIndexKrcertSecurityNoticesRequest(server string, body GetIndexKrcertSecurityNoticesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKrcertSecurityNoticesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexKrcertSecurityNoticesRequestWithBody generates requests for GetIndexKrcertSecurityNotices with any type of body
func NewGetIndexKrcertSecurityNoticesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/krcert-security-notices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKrcertVulnerabilitiesRequest calls the generic GetIndexKrcertVulnerabilities builder with application/json body
func NewGetIndexKrcertVulnerabilitiesRequest(server string, body GetIndexKrcertVulnerabilitiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKrcertVulnerabilitiesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexKrcertVulnerabilitiesRequestWithBody generates requests for GetIndexKrcertVulnerabilities with any type of body
func NewGetIndexKrcertVulnerabilitiesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/krcert-vulnerabilities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexKubernetesRequest calls the generic GetIndexKubernetes builder with application/json body
func NewGetIndexKubernetesRequest(server string, body GetIndexKubernetesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexKubernetesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexKubernetesRequestWithBody generates requests for GetIndexKubernetes with any type of body
func NewGetIndexKubernetesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/kubernetes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLenovoRequest calls the generic GetIndexLenovo builder with application/json body
func NewGetIndexLenovoRequest(server string, body GetIndexLenovoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLenovoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexLenovoRequestWithBody generates requests for GetIndexLenovo with any type of body
func NewGetIndexLenovoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/lenovo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLexmarkRequest calls the generic GetIndexLexmark builder with application/json body
func NewGetIndexLexmarkRequest(server string, body GetIndexLexmarkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLexmarkRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexLexmarkRequestWithBody generates requests for GetIndexLexmark with any type of body
func NewGetIndexLexmarkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/lexmark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLgRequest calls the generic GetIndexLg builder with application/json body
func NewGetIndexLgRequest(server string, body GetIndexLgJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLgRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexLgRequestWithBody generates requests for GetIndexLg with any type of body
func NewGetIndexLgRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/lg")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLibreOfficeRequest calls the generic GetIndexLibreOffice builder with application/json body
func NewGetIndexLibreOfficeRequest(server string, body GetIndexLibreOfficeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLibreOfficeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexLibreOfficeRequestWithBody generates requests for GetIndexLibreOffice with any type of body
func NewGetIndexLibreOfficeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/libre-office")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexLinuxRequest calls the generic GetIndexLinux builder with application/json body
func NewGetIndexLinuxRequest(server string, body GetIndexLinuxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexLinuxRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexLinuxRequestWithBody generates requests for GetIndexLinux with any type of body
func NewGetIndexLinuxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/linux")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMFilesRequest calls the generic GetIndexMFiles builder with application/json body
func NewGetIndexMFilesRequest(server string, body GetIndexMFilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMFilesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMFilesRequestWithBody generates requests for GetIndexMFiles with any type of body
func NewGetIndexMFilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/m-files")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMacertRequest calls the generic GetIndexMacert builder with application/json body
func NewGetIndexMacertRequest(server string, body GetIndexMacertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMacertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMacertRequestWithBody generates requests for GetIndexMacert with any type of body
func NewGetIndexMacertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/macert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexManageengineRequest calls the generic GetIndexManageengine builder with application/json body
func NewGetIndexManageengineRequest(server string, body GetIndexManageengineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexManageengineRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexManageengineRequestWithBody generates requests for GetIndexManageengine with any type of body
func NewGetIndexManageengineRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/manageengine")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMavenRequest calls the generic GetIndexMaven builder with application/json body
func NewGetIndexMavenRequest(server string, body GetIndexMavenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMavenRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMavenRequestWithBody generates requests for GetIndexMaven with any type of body
func NewGetIndexMavenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/maven")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMbedTlsRequest calls the generic GetIndexMbedTls builder with application/json body
func NewGetIndexMbedTlsRequest(server string, body GetIndexMbedTlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMbedTlsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMbedTlsRequestWithBody generates requests for GetIndexMbedTls with any type of body
func NewGetIndexMbedTlsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mbed-tls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMediatekRequest calls the generic GetIndexMediatek builder with application/json body
func NewGetIndexMediatekRequest(server string, body GetIndexMediatekJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMediatekRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMediatekRequestWithBody generates requests for GetIndexMediatek with any type of body
func NewGetIndexMediatekRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mediatek")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMedtronicRequest calls the generic GetIndexMedtronic builder with application/json body
func NewGetIndexMedtronicRequest(server string, body GetIndexMedtronicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMedtronicRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMedtronicRequestWithBody generates requests for GetIndexMedtronic with any type of body
func NewGetIndexMedtronicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/medtronic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMendixRequest calls the generic GetIndexMendix builder with application/json body
func NewGetIndexMendixRequest(server string, body GetIndexMendixJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMendixRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMendixRequestWithBody generates requests for GetIndexMendix with any type of body
func NewGetIndexMendixRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mendix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMetasploitRequest calls the generic GetIndexMetasploit builder with application/json body
func NewGetIndexMetasploitRequest(server string, body GetIndexMetasploitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMetasploitRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMetasploitRequestWithBody generates requests for GetIndexMetasploit with any type of body
func NewGetIndexMetasploitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/metasploit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMicrosoftCvrfRequest calls the generic GetIndexMicrosoftCvrf builder with application/json body
func NewGetIndexMicrosoftCvrfRequest(server string, body GetIndexMicrosoftCvrfJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMicrosoftCvrfRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMicrosoftCvrfRequestWithBody generates requests for GetIndexMicrosoftCvrf with any type of body
func NewGetIndexMicrosoftCvrfRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/microsoft-cvrf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMicrosoftKbRequest calls the generic GetIndexMicrosoftKb builder with application/json body
func NewGetIndexMicrosoftKbRequest(server string, body GetIndexMicrosoftKbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMicrosoftKbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMicrosoftKbRequestWithBody generates requests for GetIndexMicrosoftKb with any type of body
func NewGetIndexMicrosoftKbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/microsoft-kb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMikrotikRequest calls the generic GetIndexMikrotik builder with application/json body
func NewGetIndexMikrotikRequest(server string, body GetIndexMikrotikJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMikrotikRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMikrotikRequestWithBody generates requests for GetIndexMikrotik with any type of body
func NewGetIndexMikrotikRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mikrotik")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMindrayRequest calls the generic GetIndexMindray builder with application/json body
func NewGetIndexMindrayRequest(server string, body GetIndexMindrayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMindrayRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMindrayRequestWithBody generates requests for GetIndexMindray with any type of body
func NewGetIndexMindrayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mindray")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMispThreatActorsRequest calls the generic GetIndexMispThreatActors builder with application/json body
func NewGetIndexMispThreatActorsRequest(server string, body GetIndexMispThreatActorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMispThreatActorsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMispThreatActorsRequestWithBody generates requests for GetIndexMispThreatActors with any type of body
func NewGetIndexMispThreatActorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/misp-threat-actors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitelRequest calls the generic GetIndexMitel builder with application/json body
func NewGetIndexMitelRequest(server string, body GetIndexMitelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitelRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMitelRequestWithBody generates requests for GetIndexMitel with any type of body
func NewGetIndexMitelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitreAttackCveRequest calls the generic GetIndexMitreAttackCve builder with application/json body
func NewGetIndexMitreAttackCveRequest(server string, body GetIndexMitreAttackCveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitreAttackCveRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMitreAttackCveRequestWithBody generates requests for GetIndexMitreAttackCve with any type of body
func NewGetIndexMitreAttackCveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitre-attack-cve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitreCveRequest calls the generic GetIndexMitreCve builder with application/json body
func NewGetIndexMitreCveRequest(server string, body GetIndexMitreCveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitreCveRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMitreCveRequestWithBody generates requests for GetIndexMitreCve with any type of body
func NewGetIndexMitreCveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitre-cve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMitsubishiElectricRequest calls the generic GetIndexMitsubishiElectric builder with application/json body
func NewGetIndexMitsubishiElectricRequest(server string, body GetIndexMitsubishiElectricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMitsubishiElectricRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMitsubishiElectricRequestWithBody generates requests for GetIndexMitsubishiElectric with any type of body
func NewGetIndexMitsubishiElectricRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mitsubishi-electric")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMongodbRequest calls the generic GetIndexMongodb builder with application/json body
func NewGetIndexMongodbRequest(server string, body GetIndexMongodbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMongodbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMongodbRequestWithBody generates requests for GetIndexMongodb with any type of body
func NewGetIndexMongodbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mongodb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMoxaRequest calls the generic GetIndexMoxa builder with application/json body
func NewGetIndexMoxaRequest(server string, body GetIndexMoxaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMoxaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMoxaRequestWithBody generates requests for GetIndexMoxa with any type of body
func NewGetIndexMoxaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/moxa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexMozillaRequest calls the generic GetIndexMozilla builder with application/json body
func NewGetIndexMozillaRequest(server string, body GetIndexMozillaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexMozillaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexMozillaRequestWithBody generates requests for GetIndexMozilla with any type of body
func NewGetIndexMozillaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/mozilla")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNaverRequest calls the generic GetIndexNaver builder with application/json body
func NewGetIndexNaverRequest(server string, body GetIndexNaverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNaverRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNaverRequestWithBody generates requests for GetIndexNaver with any type of body
func NewGetIndexNaverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/naver")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNecRequest calls the generic GetIndexNec builder with application/json body
func NewGetIndexNecRequest(server string, body GetIndexNecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNecRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNecRequestWithBody generates requests for GetIndexNec with any type of body
func NewGetIndexNecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetappRequest calls the generic GetIndexNetapp builder with application/json body
func NewGetIndexNetappRequest(server string, body GetIndexNetappJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetappRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNetappRequestWithBody generates requests for GetIndexNetapp with any type of body
func NewGetIndexNetappRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netapp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetgateRequest calls the generic GetIndexNetgate builder with application/json body
func NewGetIndexNetgateRequest(server string, body GetIndexNetgateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetgateRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNetgateRequestWithBody generates requests for GetIndexNetgate with any type of body
func NewGetIndexNetgateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netgate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetgearRequest calls the generic GetIndexNetgear builder with application/json body
func NewGetIndexNetgearRequest(server string, body GetIndexNetgearJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetgearRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNetgearRequestWithBody generates requests for GetIndexNetgear with any type of body
func NewGetIndexNetgearRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netgear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNetskopeRequest calls the generic GetIndexNetskope builder with application/json body
func NewGetIndexNetskopeRequest(server string, body GetIndexNetskopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNetskopeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNetskopeRequestWithBody generates requests for GetIndexNetskope with any type of body
func NewGetIndexNetskopeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/netskope")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNginxRequest calls the generic GetIndexNginx builder with application/json body
func NewGetIndexNginxRequest(server string, body GetIndexNginxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNginxRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNginxRequestWithBody generates requests for GetIndexNginx with any type of body
func NewGetIndexNginxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nginx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNhsRequest calls the generic GetIndexNhs builder with application/json body
func NewGetIndexNhsRequest(server string, body GetIndexNhsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNhsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNhsRequestWithBody generates requests for GetIndexNhs with any type of body
func NewGetIndexNhsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nhs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNiRequest calls the generic GetIndexNi builder with application/json body
func NewGetIndexNiRequest(server string, body GetIndexNiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNiRequestWithBody generates requests for GetIndexNi with any type of body
func NewGetIndexNiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ni")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNistNvdRequest calls the generic GetIndexNistNvd builder with application/json body
func NewGetIndexNistNvdRequest(server string, body GetIndexNistNvdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNistNvdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNistNvdRequestWithBody generates requests for GetIndexNistNvd with any type of body
func NewGetIndexNistNvdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nist-nvd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNistNvd2Request calls the generic GetIndexNistNvd2 builder with application/json body
func NewGetIndexNistNvd2Request(server string, body GetIndexNistNvd2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNistNvd2RequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNistNvd2RequestWithBody generates requests for GetIndexNistNvd2 with any type of body
func NewGetIndexNistNvd2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nist-nvd2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNistNvd2CpematchRequest calls the generic GetIndexNistNvd2Cpematch builder with application/json body
func NewGetIndexNistNvd2CpematchRequest(server string, body GetIndexNistNvd2CpematchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNistNvd2CpematchRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNistNvd2CpematchRequestWithBody generates requests for GetIndexNistNvd2Cpematch with any type of body
func NewGetIndexNistNvd2CpematchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nist-nvd2-cpematch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNodeSecurityRequest calls the generic GetIndexNodeSecurity builder with application/json body
func NewGetIndexNodeSecurityRequest(server string, body GetIndexNodeSecurityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNodeSecurityRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNodeSecurityRequestWithBody generates requests for GetIndexNodeSecurity with any type of body
func NewGetIndexNodeSecurityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/node-security")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNodejsRequest calls the generic GetIndexNodejs builder with application/json body
func NewGetIndexNodejsRequest(server string, body GetIndexNodejsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNodejsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNodejsRequestWithBody generates requests for GetIndexNodejs with any type of body
func NewGetIndexNodejsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nodejs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNokiaRequest calls the generic GetIndexNokia builder with application/json body
func NewGetIndexNokiaRequest(server string, body GetIndexNokiaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNokiaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNokiaRequestWithBody generates requests for GetIndexNokia with any type of body
func NewGetIndexNokiaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nokia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNozomiRequest calls the generic GetIndexNozomi builder with application/json body
func NewGetIndexNozomiRequest(server string, body GetIndexNozomiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNozomiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNozomiRequestWithBody generates requests for GetIndexNozomi with any type of body
func NewGetIndexNozomiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nozomi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNpmRequest calls the generic GetIndexNpm builder with application/json body
func NewGetIndexNpmRequest(server string, body GetIndexNpmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNpmRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNpmRequestWithBody generates requests for GetIndexNpm with any type of body
func NewGetIndexNpmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/npm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNugetRequest calls the generic GetIndexNuget builder with application/json body
func NewGetIndexNugetRequest(server string, body GetIndexNugetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNugetRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNugetRequestWithBody generates requests for GetIndexNuget with any type of body
func NewGetIndexNugetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nuget")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNvidiaRequest calls the generic GetIndexNvidia builder with application/json body
func NewGetIndexNvidiaRequest(server string, body GetIndexNvidiaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNvidiaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNvidiaRequestWithBody generates requests for GetIndexNvidia with any type of body
func NewGetIndexNvidiaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nvidia")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexNzAdvisoriesRequest calls the generic GetIndexNzAdvisories builder with application/json body
func NewGetIndexNzAdvisoriesRequest(server string, body GetIndexNzAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexNzAdvisoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexNzAdvisoriesRequestWithBody generates requests for GetIndexNzAdvisories with any type of body
func NewGetIndexNzAdvisoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/nz-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOctopusDeployRequest calls the generic GetIndexOctopusDeploy builder with application/json body
func NewGetIndexOctopusDeployRequest(server string, body GetIndexOctopusDeployJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOctopusDeployRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOctopusDeployRequestWithBody generates requests for GetIndexOctopusDeploy with any type of body
func NewGetIndexOctopusDeployRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/octopus-deploy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOktaRequest calls the generic GetIndexOkta builder with application/json body
func NewGetIndexOktaRequest(server string, body GetIndexOktaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOktaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOktaRequestWithBody generates requests for GetIndexOkta with any type of body
func NewGetIndexOktaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/okta")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOmronRequest calls the generic GetIndexOmron builder with application/json body
func NewGetIndexOmronRequest(server string, body GetIndexOmronJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOmronRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOmronRequestWithBody generates requests for GetIndexOmron with any type of body
func NewGetIndexOmronRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/omron")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOneERequest calls the generic GetIndexOneE builder with application/json body
func NewGetIndexOneERequest(server string, body GetIndexOneEJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOneERequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOneERequestWithBody generates requests for GetIndexOneE with any type of body
func NewGetIndexOneERequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/one-e")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpamRequest calls the generic GetIndexOpam builder with application/json body
func NewGetIndexOpamRequest(server string, body GetIndexOpamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpamRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpamRequestWithBody generates requests for GetIndexOpam with any type of body
func NewGetIndexOpamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/opam")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenCvdbRequest calls the generic GetIndexOpenCvdb builder with application/json body
func NewGetIndexOpenCvdbRequest(server string, body GetIndexOpenCvdbJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenCvdbRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpenCvdbRequestWithBody generates requests for GetIndexOpenCvdb with any type of body
func NewGetIndexOpenCvdbRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/open-cvdb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenbsdRequest calls the generic GetIndexOpenbsd builder with application/json body
func NewGetIndexOpenbsdRequest(server string, body GetIndexOpenbsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenbsdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpenbsdRequestWithBody generates requests for GetIndexOpenbsd with any type of body
func NewGetIndexOpenbsdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openbsd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpensshRequest calls the generic GetIndexOpenssh builder with application/json body
func NewGetIndexOpensshRequest(server string, body GetIndexOpensshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpensshRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpensshRequestWithBody generates requests for GetIndexOpenssh with any type of body
func NewGetIndexOpensshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openssh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpensslSecadvRequest calls the generic GetIndexOpensslSecadv builder with application/json body
func NewGetIndexOpensslSecadvRequest(server string, body GetIndexOpensslSecadvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpensslSecadvRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpensslSecadvRequestWithBody generates requests for GetIndexOpensslSecadv with any type of body
func NewGetIndexOpensslSecadvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openssl-secadv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenstackRequest calls the generic GetIndexOpenstack builder with application/json body
func NewGetIndexOpenstackRequest(server string, body GetIndexOpenstackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenstackRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpenstackRequestWithBody generates requests for GetIndexOpenstack with any type of body
func NewGetIndexOpenstackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openstack")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOpenwrtRequest calls the generic GetIndexOpenwrt builder with application/json body
func NewGetIndexOpenwrtRequest(server string, body GetIndexOpenwrtJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOpenwrtRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOpenwrtRequestWithBody generates requests for GetIndexOpenwrt with any type of body
func NewGetIndexOpenwrtRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/openwrt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOracleRequest calls the generic GetIndexOracle builder with application/json body
func NewGetIndexOracleRequest(server string, body GetIndexOracleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOracleRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOracleRequestWithBody generates requests for GetIndexOracle with any type of body
func NewGetIndexOracleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/oracle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOracleCpuRequest calls the generic GetIndexOracleCpu builder with application/json body
func NewGetIndexOracleCpuRequest(server string, body GetIndexOracleCpuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOracleCpuRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOracleCpuRequestWithBody generates requests for GetIndexOracleCpu with any type of body
func NewGetIndexOracleCpuRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/oracle-cpu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOracleCpuCsafRequest calls the generic GetIndexOracleCpuCsaf builder with application/json body
func NewGetIndexOracleCpuCsafRequest(server string, body GetIndexOracleCpuCsafJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOracleCpuCsafRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOracleCpuCsafRequestWithBody generates requests for GetIndexOracleCpuCsaf with any type of body
func NewGetIndexOracleCpuCsafRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/oracle-cpu-csaf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOsvRequest calls the generic GetIndexOsv builder with application/json body
func NewGetIndexOsvRequest(server string, body GetIndexOsvJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOsvRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOsvRequestWithBody generates requests for GetIndexOsv with any type of body
func NewGetIndexOsvRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/osv")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOtrsRequest calls the generic GetIndexOtrs builder with application/json body
func NewGetIndexOtrsRequest(server string, body GetIndexOtrsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOtrsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOtrsRequestWithBody generates requests for GetIndexOtrs with any type of body
func NewGetIndexOtrsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/otrs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexOwncloudRequest calls the generic GetIndexOwncloud builder with application/json body
func NewGetIndexOwncloudRequest(server string, body GetIndexOwncloudJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexOwncloudRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexOwncloudRequestWithBody generates requests for GetIndexOwncloud with any type of body
func NewGetIndexOwncloudRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/owncloud")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPalantirRequest calls the generic GetIndexPalantir builder with application/json body
func NewGetIndexPalantirRequest(server string, body GetIndexPalantirJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPalantirRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPalantirRequestWithBody generates requests for GetIndexPalantir with any type of body
func NewGetIndexPalantirRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/palantir")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPaloAltoRequest calls the generic GetIndexPaloAlto builder with application/json body
func NewGetIndexPaloAltoRequest(server string, body GetIndexPaloAltoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPaloAltoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPaloAltoRequestWithBody generates requests for GetIndexPaloAlto with any type of body
func NewGetIndexPaloAltoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/palo-alto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPanasonicRequest calls the generic GetIndexPanasonic builder with application/json body
func NewGetIndexPanasonicRequest(server string, body GetIndexPanasonicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPanasonicRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPanasonicRequestWithBody generates requests for GetIndexPanasonic with any type of body
func NewGetIndexPanasonicRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/panasonic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPapercutRequest calls the generic GetIndexPapercut builder with application/json body
func NewGetIndexPapercutRequest(server string, body GetIndexPapercutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPapercutRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPapercutRequestWithBody generates requests for GetIndexPapercut with any type of body
func NewGetIndexPapercutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/papercut")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPegaRequest calls the generic GetIndexPega builder with application/json body
func NewGetIndexPegaRequest(server string, body GetIndexPegaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPegaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPegaRequestWithBody generates requests for GetIndexPega with any type of body
func NewGetIndexPegaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pega")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPhilipsRequest calls the generic GetIndexPhilips builder with application/json body
func NewGetIndexPhilipsRequest(server string, body GetIndexPhilipsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPhilipsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPhilipsRequestWithBody generates requests for GetIndexPhilips with any type of body
func NewGetIndexPhilipsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/philips")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPhoenixContactRequest calls the generic GetIndexPhoenixContact builder with application/json body
func NewGetIndexPhoenixContactRequest(server string, body GetIndexPhoenixContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPhoenixContactRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPhoenixContactRequestWithBody generates requests for GetIndexPhoenixContact with any type of body
func NewGetIndexPhoenixContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/phoenix-contact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPostgressqlRequest calls the generic GetIndexPostgressql builder with application/json body
func NewGetIndexPostgressqlRequest(server string, body GetIndexPostgressqlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPostgressqlRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPostgressqlRequestWithBody generates requests for GetIndexPostgressql with any type of body
func NewGetIndexPostgressqlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/postgressql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexProgressRequest calls the generic GetIndexProgress builder with application/json body
func NewGetIndexProgressRequest(server string, body GetIndexProgressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexProgressRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexProgressRequestWithBody generates requests for GetIndexProgress with any type of body
func NewGetIndexProgressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexProofpointRequest calls the generic GetIndexProofpoint builder with application/json body
func NewGetIndexProofpointRequest(server string, body GetIndexProofpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexProofpointRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexProofpointRequestWithBody generates requests for GetIndexProofpoint with any type of body
func NewGetIndexProofpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/proofpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPubRequest calls the generic GetIndexPub builder with application/json body
func NewGetIndexPubRequest(server string, body GetIndexPubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPubRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPubRequestWithBody generates requests for GetIndexPub with any type of body
func NewGetIndexPubRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pub")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPureStorageRequest calls the generic GetIndexPureStorage builder with application/json body
func NewGetIndexPureStorageRequest(server string, body GetIndexPureStorageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPureStorageRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPureStorageRequestWithBody generates requests for GetIndexPureStorage with any type of body
func NewGetIndexPureStorageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pure-storage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPypaAdvisoriesRequest calls the generic GetIndexPypaAdvisories builder with application/json body
func NewGetIndexPypaAdvisoriesRequest(server string, body GetIndexPypaAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPypaAdvisoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPypaAdvisoriesRequestWithBody generates requests for GetIndexPypaAdvisories with any type of body
func NewGetIndexPypaAdvisoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pypa-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexPypiRequest calls the generic GetIndexPypi builder with application/json body
func NewGetIndexPypiRequest(server string, body GetIndexPypiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexPypiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexPypiRequestWithBody generates requests for GetIndexPypi with any type of body
func NewGetIndexPypiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/pypi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQnapRequest calls the generic GetIndexQnap builder with application/json body
func NewGetIndexQnapRequest(server string, body GetIndexQnapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQnapRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexQnapRequestWithBody generates requests for GetIndexQnap with any type of body
func NewGetIndexQnapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qnap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQualcommRequest calls the generic GetIndexQualcomm builder with application/json body
func NewGetIndexQualcommRequest(server string, body GetIndexQualcommJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQualcommRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexQualcommRequestWithBody generates requests for GetIndexQualcomm with any type of body
func NewGetIndexQualcommRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qualcomm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexQualysRequest calls the generic GetIndexQualys builder with application/json body
func NewGetIndexQualysRequest(server string, body GetIndexQualysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexQualysRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexQualysRequestWithBody generates requests for GetIndexQualys with any type of body
func NewGetIndexQualysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/qualys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRansomwareRequest calls the generic GetIndexRansomware builder with application/json body
func NewGetIndexRansomwareRequest(server string, body GetIndexRansomwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRansomwareRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRansomwareRequestWithBody generates requests for GetIndexRansomware with any type of body
func NewGetIndexRansomwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ransomware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRedhatRequest calls the generic GetIndexRedhat builder with application/json body
func NewGetIndexRedhatRequest(server string, body GetIndexRedhatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRedhatRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRedhatRequestWithBody generates requests for GetIndexRedhat with any type of body
func NewGetIndexRedhatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/redhat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRenesasRequest calls the generic GetIndexRenesas builder with application/json body
func NewGetIndexRenesasRequest(server string, body GetIndexRenesasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRenesasRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRenesasRequestWithBody generates requests for GetIndexRenesas with any type of body
func NewGetIndexRenesasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/renesas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexReviveRequest calls the generic GetIndexRevive builder with application/json body
func NewGetIndexReviveRequest(server string, body GetIndexReviveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexReviveRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexReviveRequestWithBody generates requests for GetIndexRevive with any type of body
func NewGetIndexReviveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/revive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRockwellRequest calls the generic GetIndexRockwell builder with application/json body
func NewGetIndexRockwellRequest(server string, body GetIndexRockwellJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRockwellRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRockwellRequestWithBody generates requests for GetIndexRockwell with any type of body
func NewGetIndexRockwellRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rockwell")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRockyRequest calls the generic GetIndexRocky builder with application/json body
func NewGetIndexRockyRequest(server string, body GetIndexRockyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRockyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRockyRequestWithBody generates requests for GetIndexRocky with any type of body
func NewGetIndexRockyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rocky")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRuckusRequest calls the generic GetIndexRuckus builder with application/json body
func NewGetIndexRuckusRequest(server string, body GetIndexRuckusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRuckusRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRuckusRequestWithBody generates requests for GetIndexRuckus with any type of body
func NewGetIndexRuckusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ruckus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexRustsecAdvisoriesRequest calls the generic GetIndexRustsecAdvisories builder with application/json body
func NewGetIndexRustsecAdvisoriesRequest(server string, body GetIndexRustsecAdvisoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexRustsecAdvisoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexRustsecAdvisoriesRequestWithBody generates requests for GetIndexRustsecAdvisories with any type of body
func NewGetIndexRustsecAdvisoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/rustsec-advisories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSacertRequest calls the generic GetIndexSacert builder with application/json body
func NewGetIndexSacertRequest(server string, body GetIndexSacertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSacertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSacertRequestWithBody generates requests for GetIndexSacert with any type of body
func NewGetIndexSacertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sacert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSaintRequest calls the generic GetIndexSaint builder with application/json body
func NewGetIndexSaintRequest(server string, body GetIndexSaintJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSaintRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSaintRequestWithBody generates requests for GetIndexSaint with any type of body
func NewGetIndexSaintRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/saint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSalesforceRequest calls the generic GetIndexSalesforce builder with application/json body
func NewGetIndexSalesforceRequest(server string, body GetIndexSalesforceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSalesforceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSalesforceRequestWithBody generates requests for GetIndexSalesforce with any type of body
func NewGetIndexSalesforceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/salesforce")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSambaRequest calls the generic GetIndexSamba builder with application/json body
func NewGetIndexSambaRequest(server string, body GetIndexSambaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSambaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSambaRequestWithBody generates requests for GetIndexSamba with any type of body
func NewGetIndexSambaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/samba")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSapRequest calls the generic GetIndexSap builder with application/json body
func NewGetIndexSapRequest(server string, body GetIndexSapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSapRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSapRequestWithBody generates requests for GetIndexSap with any type of body
func NewGetIndexSapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sap")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSchneiderElectricRequest calls the generic GetIndexSchneiderElectric builder with application/json body
func NewGetIndexSchneiderElectricRequest(server string, body GetIndexSchneiderElectricJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSchneiderElectricRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSchneiderElectricRequestWithBody generates requests for GetIndexSchneiderElectric with any type of body
func NewGetIndexSchneiderElectricRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/schneider-electric")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSecConsultRequest calls the generic GetIndexSecConsult builder with application/json body
func NewGetIndexSecConsultRequest(server string, body GetIndexSecConsultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSecConsultRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSecConsultRequestWithBody generates requests for GetIndexSecConsult with any type of body
func NewGetIndexSecConsultRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sec-consult")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSelRequest calls the generic GetIndexSel builder with application/json body
func NewGetIndexSelRequest(server string, body GetIndexSelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSelRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSelRequestWithBody generates requests for GetIndexSel with any type of body
func NewGetIndexSelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSentineloneRequest calls the generic GetIndexSentinelone builder with application/json body
func NewGetIndexSentineloneRequest(server string, body GetIndexSentineloneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSentineloneRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSentineloneRequestWithBody generates requests for GetIndexSentinelone with any type of body
func NewGetIndexSentineloneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sentinelone")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexServicenowRequest calls the generic GetIndexServicenow builder with application/json body
func NewGetIndexServicenowRequest(server string, body GetIndexServicenowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexServicenowRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexServicenowRequestWithBody generates requests for GetIndexServicenow with any type of body
func NewGetIndexServicenowRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/servicenow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexShadowserverExploitedRequest calls the generic GetIndexShadowserverExploited builder with application/json body
func NewGetIndexShadowserverExploitedRequest(server string, body GetIndexShadowserverExploitedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexShadowserverExploitedRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexShadowserverExploitedRequestWithBody generates requests for GetIndexShadowserverExploited with any type of body
func NewGetIndexShadowserverExploitedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/shadowserver-exploited")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSickRequest calls the generic GetIndexSick builder with application/json body
func NewGetIndexSickRequest(server string, body GetIndexSickJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSickRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSickRequestWithBody generates requests for GetIndexSick with any type of body
func NewGetIndexSickRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sick")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSiemensRequest calls the generic GetIndexSiemens builder with application/json body
func NewGetIndexSiemensRequest(server string, body GetIndexSiemensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSiemensRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSiemensRequestWithBody generates requests for GetIndexSiemens with any type of body
func NewGetIndexSiemensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/siemens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSierraWirelessRequest calls the generic GetIndexSierraWireless builder with application/json body
func NewGetIndexSierraWirelessRequest(server string, body GetIndexSierraWirelessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSierraWirelessRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSierraWirelessRequestWithBody generates requests for GetIndexSierraWireless with any type of body
func NewGetIndexSierraWirelessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sierra-wireless")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSingcertRequest calls the generic GetIndexSingcert builder with application/json body
func NewGetIndexSingcertRequest(server string, body GetIndexSingcertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSingcertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSingcertRequestWithBody generates requests for GetIndexSingcert with any type of body
func NewGetIndexSingcertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/singcert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSlackwareRequest calls the generic GetIndexSlackware builder with application/json body
func NewGetIndexSlackwareRequest(server string, body GetIndexSlackwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSlackwareRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSlackwareRequestWithBody generates requests for GetIndexSlackware with any type of body
func NewGetIndexSlackwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/slackware")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSolarwindsRequest calls the generic GetIndexSolarwinds builder with application/json body
func NewGetIndexSolarwindsRequest(server string, body GetIndexSolarwindsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSolarwindsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSolarwindsRequestWithBody generates requests for GetIndexSolarwinds with any type of body
func NewGetIndexSolarwindsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/solarwinds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSolrRequest calls the generic GetIndexSolr builder with application/json body
func NewGetIndexSolrRequest(server string, body GetIndexSolrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSolrRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSolrRequestWithBody generates requests for GetIndexSolr with any type of body
func NewGetIndexSolrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/solr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSonicwallRequest calls the generic GetIndexSonicwall builder with application/json body
func NewGetIndexSonicwallRequest(server string, body GetIndexSonicwallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSonicwallRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSonicwallRequestWithBody generates requests for GetIndexSonicwall with any type of body
func NewGetIndexSonicwallRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sonicwall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSpacelabsHealthcareRequest calls the generic GetIndexSpacelabsHealthcare builder with application/json body
func NewGetIndexSpacelabsHealthcareRequest(server string, body GetIndexSpacelabsHealthcareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSpacelabsHealthcareRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSpacelabsHealthcareRequestWithBody generates requests for GetIndexSpacelabsHealthcare with any type of body
func NewGetIndexSpacelabsHealthcareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/spacelabs-healthcare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSpringRequest calls the generic GetIndexSpring builder with application/json body
func NewGetIndexSpringRequest(server string, body GetIndexSpringJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSpringRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSpringRequestWithBody generates requests for GetIndexSpring with any type of body
func NewGetIndexSpringRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/spring")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSsdRequest calls the generic GetIndexSsd builder with application/json body
func NewGetIndexSsdRequest(server string, body GetIndexSsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSsdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSsdRequestWithBody generates requests for GetIndexSsd with any type of body
func NewGetIndexSsdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ssd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexStormshieldRequest calls the generic GetIndexStormshield builder with application/json body
func NewGetIndexStormshieldRequest(server string, body GetIndexStormshieldJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexStormshieldRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexStormshieldRequestWithBody generates requests for GetIndexStormshield with any type of body
func NewGetIndexStormshieldRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/stormshield")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexStrykerRequest calls the generic GetIndexStryker builder with application/json body
func NewGetIndexStrykerRequest(server string, body GetIndexStrykerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexStrykerRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexStrykerRequestWithBody generates requests for GetIndexStryker with any type of body
func NewGetIndexStrykerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/stryker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSudoRequest calls the generic GetIndexSudo builder with application/json body
func NewGetIndexSudoRequest(server string, body GetIndexSudoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSudoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSudoRequestWithBody generates requests for GetIndexSudo with any type of body
func NewGetIndexSudoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/sudo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSuseRequest calls the generic GetIndexSuse builder with application/json body
func NewGetIndexSuseRequest(server string, body GetIndexSuseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSuseRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSuseRequestWithBody generates requests for GetIndexSuse with any type of body
func NewGetIndexSuseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/suse")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSwiftRequest calls the generic GetIndexSwift builder with application/json body
func NewGetIndexSwiftRequest(server string, body GetIndexSwiftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSwiftRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSwiftRequestWithBody generates requests for GetIndexSwift with any type of body
func NewGetIndexSwiftRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/swift")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSwisslogHealthcareRequest calls the generic GetIndexSwisslogHealthcare builder with application/json body
func NewGetIndexSwisslogHealthcareRequest(server string, body GetIndexSwisslogHealthcareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSwisslogHealthcareRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSwisslogHealthcareRequestWithBody generates requests for GetIndexSwisslogHealthcare with any type of body
func NewGetIndexSwisslogHealthcareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/swisslog-healthcare")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSymfonyRequest calls the generic GetIndexSymfony builder with application/json body
func NewGetIndexSymfonyRequest(server string, body GetIndexSymfonyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSymfonyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSymfonyRequestWithBody generates requests for GetIndexSymfony with any type of body
func NewGetIndexSymfonyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/symfony")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSyncrosoftRequest calls the generic GetIndexSyncrosoft builder with application/json body
func NewGetIndexSyncrosoftRequest(server string, body GetIndexSyncrosoftJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSyncrosoftRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSyncrosoftRequestWithBody generates requests for GetIndexSyncrosoft with any type of body
func NewGetIndexSyncrosoftRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/syncrosoft")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexSynologyRequest calls the generic GetIndexSynology builder with application/json body
func NewGetIndexSynologyRequest(server string, body GetIndexSynologyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexSynologyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexSynologyRequestWithBody generates requests for GetIndexSynology with any type of body
func NewGetIndexSynologyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/synology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTeamviewerRequest calls the generic GetIndexTeamviewer builder with application/json body
func NewGetIndexTeamviewerRequest(server string, body GetIndexTeamviewerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTeamviewerRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTeamviewerRequestWithBody generates requests for GetIndexTeamviewer with any type of body
func NewGetIndexTeamviewerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/teamviewer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTencentRequest calls the generic GetIndexTencent builder with application/json body
func NewGetIndexTencentRequest(server string, body GetIndexTencentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTencentRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTencentRequestWithBody generates requests for GetIndexTencent with any type of body
func NewGetIndexTencentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tencent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexThalesRequest calls the generic GetIndexThales builder with application/json body
func NewGetIndexThalesRequest(server string, body GetIndexThalesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexThalesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexThalesRequestWithBody generates requests for GetIndexThales with any type of body
func NewGetIndexThalesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/thales")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexThemissinglinkRequest calls the generic GetIndexThemissinglink builder with application/json body
func NewGetIndexThemissinglinkRequest(server string, body GetIndexThemissinglinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexThemissinglinkRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexThemissinglinkRequestWithBody generates requests for GetIndexThemissinglink with any type of body
func NewGetIndexThemissinglinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/themissinglink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexThreatActorsRequest calls the generic GetIndexThreatActors builder with application/json body
func NewGetIndexThreatActorsRequest(server string, body GetIndexThreatActorsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexThreatActorsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexThreatActorsRequestWithBody generates requests for GetIndexThreatActors with any type of body
func NewGetIndexThreatActorsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/threat-actors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTiRequest calls the generic GetIndexTi builder with application/json body
func NewGetIndexTiRequest(server string, body GetIndexTiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTiRequestWithBody generates requests for GetIndexTi with any type of body
func NewGetIndexTiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ti")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTibcoRequest calls the generic GetIndexTibco builder with application/json body
func NewGetIndexTibcoRequest(server string, body GetIndexTibcoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTibcoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTibcoRequestWithBody generates requests for GetIndexTibco with any type of body
func NewGetIndexTibcoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tibco")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTpLinkRequest calls the generic GetIndexTpLink builder with application/json body
func NewGetIndexTpLinkRequest(server string, body GetIndexTpLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTpLinkRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTpLinkRequestWithBody generates requests for GetIndexTpLink with any type of body
func NewGetIndexTpLinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/tp-link")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTraneTechnologyRequest calls the generic GetIndexTraneTechnology builder with application/json body
func NewGetIndexTraneTechnologyRequest(server string, body GetIndexTraneTechnologyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTraneTechnologyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTraneTechnologyRequestWithBody generates requests for GetIndexTraneTechnology with any type of body
func NewGetIndexTraneTechnologyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/trane-technology")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTrendmicroRequest calls the generic GetIndexTrendmicro builder with application/json body
func NewGetIndexTrendmicroRequest(server string, body GetIndexTrendmicroJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTrendmicroRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTrendmicroRequestWithBody generates requests for GetIndexTrendmicro with any type of body
func NewGetIndexTrendmicroRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/trendmicro")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTrustwaveRequest calls the generic GetIndexTrustwave builder with application/json body
func NewGetIndexTrustwaveRequest(server string, body GetIndexTrustwaveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTrustwaveRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTrustwaveRequestWithBody generates requests for GetIndexTrustwave with any type of body
func NewGetIndexTrustwaveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/trustwave")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexTwcertRequest calls the generic GetIndexTwcert builder with application/json body
func NewGetIndexTwcertRequest(server string, body GetIndexTwcertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexTwcertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexTwcertRequestWithBody generates requests for GetIndexTwcert with any type of body
func NewGetIndexTwcertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/twcert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUbiquitiRequest calls the generic GetIndexUbiquiti builder with application/json body
func NewGetIndexUbiquitiRequest(server string, body GetIndexUbiquitiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUbiquitiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexUbiquitiRequestWithBody generates requests for GetIndexUbiquiti with any type of body
func NewGetIndexUbiquitiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ubiquiti")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUbuntuRequest calls the generic GetIndexUbuntu builder with application/json body
func NewGetIndexUbuntuRequest(server string, body GetIndexUbuntuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUbuntuRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexUbuntuRequestWithBody generates requests for GetIndexUbuntu with any type of body
func NewGetIndexUbuntuRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/ubuntu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUnifyRequest calls the generic GetIndexUnify builder with application/json body
func NewGetIndexUnifyRequest(server string, body GetIndexUnifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUnifyRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexUnifyRequestWithBody generates requests for GetIndexUnify with any type of body
func NewGetIndexUnifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/unify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUnisocRequest calls the generic GetIndexUnisoc builder with application/json body
func NewGetIndexUnisocRequest(server string, body GetIndexUnisocJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUnisocRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexUnisocRequestWithBody generates requests for GetIndexUnisoc with any type of body
func NewGetIndexUnisocRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/unisoc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUsdRequest calls the generic GetIndexUsd builder with application/json body
func NewGetIndexUsdRequest(server string, body GetIndexUsdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUsdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexUsdRequestWithBody generates requests for GetIndexUsd with any type of body
func NewGetIndexUsdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/usd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexUsomRequest calls the generic GetIndexUsom builder with application/json body
func NewGetIndexUsomRequest(server string, body GetIndexUsomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexUsomRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexUsomRequestWithBody generates requests for GetIndexUsom with any type of body
func NewGetIndexUsomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/usom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVandykeRequest calls the generic GetIndexVandyke builder with application/json body
func NewGetIndexVandykeRequest(server string, body GetIndexVandykeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVandykeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVandykeRequestWithBody generates requests for GetIndexVandyke with any type of body
func NewGetIndexVandykeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vandyke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVapidlabsRequest calls the generic GetIndexVapidlabs builder with application/json body
func NewGetIndexVapidlabsRequest(server string, body GetIndexVapidlabsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVapidlabsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVapidlabsRequestWithBody generates requests for GetIndexVapidlabs with any type of body
func NewGetIndexVapidlabsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vapidlabs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVdeRequest calls the generic GetIndexVde builder with application/json body
func NewGetIndexVdeRequest(server string, body GetIndexVdeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVdeRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVdeRequestWithBody generates requests for GetIndexVde with any type of body
func NewGetIndexVdeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vde")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVeeamRequest calls the generic GetIndexVeeam builder with application/json body
func NewGetIndexVeeamRequest(server string, body GetIndexVeeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVeeamRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVeeamRequestWithBody generates requests for GetIndexVeeam with any type of body
func NewGetIndexVeeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/veeam")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVoidsecRequest calls the generic GetIndexVoidsec builder with application/json body
func NewGetIndexVoidsecRequest(server string, body GetIndexVoidsecJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVoidsecRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVoidsecRequestWithBody generates requests for GetIndexVoidsec with any type of body
func NewGetIndexVoidsecRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/voidsec")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckConfigRequest calls the generic GetIndexVulncheckConfig builder with application/json body
func NewGetIndexVulncheckConfigRequest(server string, body GetIndexVulncheckConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVulncheckConfigRequestWithBody generates requests for GetIndexVulncheckConfig with any type of body
func NewGetIndexVulncheckConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckKevRequest calls the generic GetIndexVulncheckKev builder with application/json body
func NewGetIndexVulncheckKevRequest(server string, body GetIndexVulncheckKevJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckKevRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVulncheckKevRequestWithBody generates requests for GetIndexVulncheckKev with any type of body
func NewGetIndexVulncheckKevRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-kev")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckNvdRequest calls the generic GetIndexVulncheckNvd builder with application/json body
func NewGetIndexVulncheckNvdRequest(server string, body GetIndexVulncheckNvdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckNvdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVulncheckNvdRequestWithBody generates requests for GetIndexVulncheckNvd with any type of body
func NewGetIndexVulncheckNvdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-nvd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulncheckNvd2Request calls the generic GetIndexVulncheckNvd2 builder with application/json body
func NewGetIndexVulncheckNvd2Request(server string, body GetIndexVulncheckNvd2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulncheckNvd2RequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVulncheckNvd2RequestWithBody generates requests for GetIndexVulncheckNvd2 with any type of body
func NewGetIndexVulncheckNvd2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulncheck-nvd2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVulnerabilityAliasesRequest calls the generic GetIndexVulnerabilityAliases builder with application/json body
func NewGetIndexVulnerabilityAliasesRequest(server string, body GetIndexVulnerabilityAliasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVulnerabilityAliasesRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVulnerabilityAliasesRequestWithBody generates requests for GetIndexVulnerabilityAliases with any type of body
func NewGetIndexVulnerabilityAliasesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vulnerability-aliases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexVyaireRequest calls the generic GetIndexVyaire builder with application/json body
func NewGetIndexVyaireRequest(server string, body GetIndexVyaireJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexVyaireRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexVyaireRequestWithBody generates requests for GetIndexVyaire with any type of body
func NewGetIndexVyaireRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/vyaire")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWatchguardRequest calls the generic GetIndexWatchguard builder with application/json body
func NewGetIndexWatchguardRequest(server string, body GetIndexWatchguardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWatchguardRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWatchguardRequestWithBody generates requests for GetIndexWatchguard with any type of body
func NewGetIndexWatchguardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/watchguard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWhatsappRequest calls the generic GetIndexWhatsapp builder with application/json body
func NewGetIndexWhatsappRequest(server string, body GetIndexWhatsappJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWhatsappRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWhatsappRequestWithBody generates requests for GetIndexWhatsapp with any type of body
func NewGetIndexWhatsappRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/whatsapp")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWibuRequest calls the generic GetIndexWibu builder with application/json body
func NewGetIndexWibuRequest(server string, body GetIndexWibuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWibuRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWibuRequestWithBody generates requests for GetIndexWibu with any type of body
func NewGetIndexWibuRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wibu")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWiresharkRequest calls the generic GetIndexWireshark builder with application/json body
func NewGetIndexWiresharkRequest(server string, body GetIndexWiresharkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWiresharkRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWiresharkRequestWithBody generates requests for GetIndexWireshark with any type of body
func NewGetIndexWiresharkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wireshark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWithSecureRequest calls the generic GetIndexWithSecure builder with application/json body
func NewGetIndexWithSecureRequest(server string, body GetIndexWithSecureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWithSecureRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWithSecureRequestWithBody generates requests for GetIndexWithSecure with any type of body
func NewGetIndexWithSecureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/with-secure")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWolfiRequest calls the generic GetIndexWolfi builder with application/json body
func NewGetIndexWolfiRequest(server string, body GetIndexWolfiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWolfiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWolfiRequestWithBody generates requests for GetIndexWolfi with any type of body
func NewGetIndexWolfiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wolfi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWolfsslRequest calls the generic GetIndexWolfssl builder with application/json body
func NewGetIndexWolfsslRequest(server string, body GetIndexWolfsslJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWolfsslRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWolfsslRequestWithBody generates requests for GetIndexWolfssl with any type of body
func NewGetIndexWolfsslRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wolfssl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexWordfenceRequest calls the generic GetIndexWordfence builder with application/json body
func NewGetIndexWordfenceRequest(server string, body GetIndexWordfenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexWordfenceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexWordfenceRequestWithBody generates requests for GetIndexWordfence with any type of body
func NewGetIndexWordfenceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/wordfence")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXenRequest calls the generic GetIndexXen builder with application/json body
func NewGetIndexXenRequest(server string, body GetIndexXenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXenRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexXenRequestWithBody generates requests for GetIndexXen with any type of body
func NewGetIndexXenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xen")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXeroxRequest calls the generic GetIndexXerox builder with application/json body
func NewGetIndexXeroxRequest(server string, body GetIndexXeroxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXeroxRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexXeroxRequestWithBody generates requests for GetIndexXerox with any type of body
func NewGetIndexXeroxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xerox")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXiaomiRequest calls the generic GetIndexXiaomi builder with application/json body
func NewGetIndexXiaomiRequest(server string, body GetIndexXiaomiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXiaomiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexXiaomiRequestWithBody generates requests for GetIndexXiaomi with any type of body
func NewGetIndexXiaomiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xiaomi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexXylemRequest calls the generic GetIndexXylem builder with application/json body
func NewGetIndexXylemRequest(server string, body GetIndexXylemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexXylemRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexXylemRequestWithBody generates requests for GetIndexXylem with any type of body
func NewGetIndexXylemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/xylem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexYokogawaRequest calls the generic GetIndexYokogawa builder with application/json body
func NewGetIndexYokogawaRequest(server string, body GetIndexYokogawaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexYokogawaRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexYokogawaRequestWithBody generates requests for GetIndexYokogawa with any type of body
func NewGetIndexYokogawaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/yokogawa")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexYubicoRequest calls the generic GetIndexYubico builder with application/json body
func NewGetIndexYubicoRequest(server string, body GetIndexYubicoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexYubicoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexYubicoRequestWithBody generates requests for GetIndexYubico with any type of body
func NewGetIndexYubicoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/yubico")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZdiRequest calls the generic GetIndexZdi builder with application/json body
func NewGetIndexZdiRequest(server string, body GetIndexZdiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZdiRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZdiRequestWithBody generates requests for GetIndexZdi with any type of body
func NewGetIndexZdiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zdi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZeroscienceRequest calls the generic GetIndexZeroscience builder with application/json body
func NewGetIndexZeroscienceRequest(server string, body GetIndexZeroscienceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZeroscienceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZeroscienceRequestWithBody generates requests for GetIndexZeroscience with any type of body
func NewGetIndexZeroscienceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zeroscience")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZimbraRequest calls the generic GetIndexZimbra builder with application/json body
func NewGetIndexZimbraRequest(server string, body GetIndexZimbraJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZimbraRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZimbraRequestWithBody generates requests for GetIndexZimbra with any type of body
func NewGetIndexZimbraRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zimbra")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZoomRequest calls the generic GetIndexZoom builder with application/json body
func NewGetIndexZoomRequest(server string, body GetIndexZoomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZoomRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZoomRequestWithBody generates requests for GetIndexZoom with any type of body
func NewGetIndexZoomRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zoom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZscalerRequest calls the generic GetIndexZscaler builder with application/json body
func NewGetIndexZscalerRequest(server string, body GetIndexZscalerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZscalerRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZscalerRequestWithBody generates requests for GetIndexZscaler with any type of body
func NewGetIndexZscalerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zscaler")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZusoRequest calls the generic GetIndexZuso builder with application/json body
func NewGetIndexZusoRequest(server string, body GetIndexZusoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZusoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZusoRequestWithBody generates requests for GetIndexZuso with any type of body
func NewGetIndexZusoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zuso")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIndexZyxelRequest calls the generic GetIndexZyxel builder with application/json body
func NewGetIndexZyxelRequest(server string, body GetIndexZyxelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIndexZyxelRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIndexZyxelRequestWithBody generates requests for GetIndexZyxel with any type of body
func NewGetIndexZyxelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/index/zyxel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenapiRequest generates requests for GetOpenapi
func NewGetOpenapiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPurlRequest generates requests for GetPurl
func NewGetPurlRequest(server string, params *GetPurlParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/purl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "purl", runtime.ParamLocationQuery, params.Purl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsVulncheckC2Request generates requests for GetTagsVulncheckC2
func NewGetTagsVulncheckC2Request(server string, params *GetTagsVulncheckC2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/vulncheck-c2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBackupIndexWithResponse request
	GetBackupIndexWithResponse(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*GetBackupIndexResponse, error)

	// GetCpeWithResponse request
	GetCpeWithResponse(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*GetCpeResponse, error)

	// GetIndexWithResponse request
	GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error)

	// GetIndexA10WithBodyWithResponse request with any body
	GetIndexA10WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error)

	GetIndexA10WithResponse(ctx context.Context, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error)

	// GetIndexAbbWithBodyWithResponse request with any body
	GetIndexAbbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error)

	GetIndexAbbWithResponse(ctx context.Context, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error)

	// GetIndexAbbottWithBodyWithResponse request with any body
	GetIndexAbbottWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error)

	GetIndexAbbottWithResponse(ctx context.Context, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error)

	// GetIndexAbsoluteWithBodyWithResponse request with any body
	GetIndexAbsoluteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error)

	GetIndexAbsoluteWithResponse(ctx context.Context, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error)

	// GetIndexAcronisWithBodyWithResponse request with any body
	GetIndexAcronisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error)

	GetIndexAcronisWithResponse(ctx context.Context, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error)

	// GetIndexAdobeWithBodyWithResponse request with any body
	GetIndexAdobeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error)

	GetIndexAdobeWithResponse(ctx context.Context, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error)

	// GetIndexAdvisoriesWithBodyWithResponse request with any body
	GetIndexAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error)

	GetIndexAdvisoriesWithResponse(ctx context.Context, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error)

	// GetIndexAlephResearchWithBodyWithResponse request with any body
	GetIndexAlephResearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error)

	GetIndexAlephResearchWithResponse(ctx context.Context, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error)

	// GetIndexAlmaWithBodyWithResponse request with any body
	GetIndexAlmaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error)

	GetIndexAlmaWithResponse(ctx context.Context, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error)

	// GetIndexAlpineWithBodyWithResponse request with any body
	GetIndexAlpineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error)

	GetIndexAlpineWithResponse(ctx context.Context, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error)

	// GetIndexAmazonWithBodyWithResponse request with any body
	GetIndexAmazonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error)

	GetIndexAmazonWithResponse(ctx context.Context, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error)

	// GetIndexAmdWithBodyWithResponse request with any body
	GetIndexAmdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error)

	GetIndexAmdWithResponse(ctx context.Context, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error)

	// GetIndexAmiWithBodyWithResponse request with any body
	GetIndexAmiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error)

	GetIndexAmiWithResponse(ctx context.Context, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error)

	// GetIndexAnchoreNvdOverrideWithBodyWithResponse request with any body
	GetIndexAnchoreNvdOverrideWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error)

	GetIndexAnchoreNvdOverrideWithResponse(ctx context.Context, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error)

	// GetIndexAndroidWithBodyWithResponse request with any body
	GetIndexAndroidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error)

	GetIndexAndroidWithResponse(ctx context.Context, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error)

	// GetIndexApacheActivemqWithBodyWithResponse request with any body
	GetIndexApacheActivemqWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error)

	GetIndexApacheActivemqWithResponse(ctx context.Context, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error)

	// GetIndexApacheArchivaWithBodyWithResponse request with any body
	GetIndexApacheArchivaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error)

	GetIndexApacheArchivaWithResponse(ctx context.Context, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error)

	// GetIndexApacheArrowWithBodyWithResponse request with any body
	GetIndexApacheArrowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error)

	GetIndexApacheArrowWithResponse(ctx context.Context, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error)

	// GetIndexApacheCamelWithBodyWithResponse request with any body
	GetIndexApacheCamelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error)

	GetIndexApacheCamelWithResponse(ctx context.Context, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error)

	// GetIndexApacheCommonsWithBodyWithResponse request with any body
	GetIndexApacheCommonsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error)

	GetIndexApacheCommonsWithResponse(ctx context.Context, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error)

	// GetIndexApacheCouchdbWithBodyWithResponse request with any body
	GetIndexApacheCouchdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error)

	GetIndexApacheCouchdbWithResponse(ctx context.Context, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error)

	// GetIndexApacheFlinkWithBodyWithResponse request with any body
	GetIndexApacheFlinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error)

	GetIndexApacheFlinkWithResponse(ctx context.Context, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error)

	// GetIndexApacheGuacamoleWithBodyWithResponse request with any body
	GetIndexApacheGuacamoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error)

	GetIndexApacheGuacamoleWithResponse(ctx context.Context, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error)

	// GetIndexApacheHadoopWithBodyWithResponse request with any body
	GetIndexApacheHadoopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error)

	GetIndexApacheHadoopWithResponse(ctx context.Context, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error)

	// GetIndexApacheHttpWithBodyWithResponse request with any body
	GetIndexApacheHttpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error)

	GetIndexApacheHttpWithResponse(ctx context.Context, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error)

	// GetIndexApacheJspwikiWithBodyWithResponse request with any body
	GetIndexApacheJspwikiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error)

	GetIndexApacheJspwikiWithResponse(ctx context.Context, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error)

	// GetIndexApacheKafkaWithBodyWithResponse request with any body
	GetIndexApacheKafkaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error)

	GetIndexApacheKafkaWithResponse(ctx context.Context, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error)

	// GetIndexApacheLoggingservicesWithBodyWithResponse request with any body
	GetIndexApacheLoggingservicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error)

	GetIndexApacheLoggingservicesWithResponse(ctx context.Context, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error)

	// GetIndexApacheNifiWithBodyWithResponse request with any body
	GetIndexApacheNifiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error)

	GetIndexApacheNifiWithResponse(ctx context.Context, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error)

	// GetIndexApacheOfbizWithBodyWithResponse request with any body
	GetIndexApacheOfbizWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error)

	GetIndexApacheOfbizWithResponse(ctx context.Context, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error)

	// GetIndexApacheOpenmeetingsWithBodyWithResponse request with any body
	GetIndexApacheOpenmeetingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error)

	GetIndexApacheOpenmeetingsWithResponse(ctx context.Context, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error)

	// GetIndexApacheOpenofficeWithBodyWithResponse request with any body
	GetIndexApacheOpenofficeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error)

	GetIndexApacheOpenofficeWithResponse(ctx context.Context, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error)

	// GetIndexApachePulsarWithBodyWithResponse request with any body
	GetIndexApachePulsarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error)

	GetIndexApachePulsarWithResponse(ctx context.Context, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error)

	// GetIndexApacheShiroWithBodyWithResponse request with any body
	GetIndexApacheShiroWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error)

	GetIndexApacheShiroWithResponse(ctx context.Context, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error)

	// GetIndexApacheSparkWithBodyWithResponse request with any body
	GetIndexApacheSparkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error)

	GetIndexApacheSparkWithResponse(ctx context.Context, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error)

	// GetIndexApacheStrutsWithBodyWithResponse request with any body
	GetIndexApacheStrutsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error)

	GetIndexApacheStrutsWithResponse(ctx context.Context, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error)

	// GetIndexApacheSubversionWithBodyWithResponse request with any body
	GetIndexApacheSubversionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error)

	GetIndexApacheSubversionWithResponse(ctx context.Context, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error)

	// GetIndexApacheSupersetWithBodyWithResponse request with any body
	GetIndexApacheSupersetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error)

	GetIndexApacheSupersetWithResponse(ctx context.Context, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error)

	// GetIndexApacheTomcatWithBodyWithResponse request with any body
	GetIndexApacheTomcatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error)

	GetIndexApacheTomcatWithResponse(ctx context.Context, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error)

	// GetIndexApacheZookeeperWithBodyWithResponse request with any body
	GetIndexApacheZookeeperWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error)

	GetIndexApacheZookeeperWithResponse(ctx context.Context, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error)

	// GetIndexAppcheckWithBodyWithResponse request with any body
	GetIndexAppcheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error)

	GetIndexAppcheckWithResponse(ctx context.Context, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error)

	// GetIndexAppgateWithBodyWithResponse request with any body
	GetIndexAppgateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error)

	GetIndexAppgateWithResponse(ctx context.Context, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error)

	// GetIndexAppleWithBodyWithResponse request with any body
	GetIndexAppleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error)

	GetIndexAppleWithResponse(ctx context.Context, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error)

	// GetIndexArchWithBodyWithResponse request with any body
	GetIndexArchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error)

	GetIndexArchWithResponse(ctx context.Context, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error)

	// GetIndexAristaWithBodyWithResponse request with any body
	GetIndexAristaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error)

	GetIndexAristaWithResponse(ctx context.Context, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error)

	// GetIndexArubaWithBodyWithResponse request with any body
	GetIndexArubaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error)

	GetIndexArubaWithResponse(ctx context.Context, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error)

	// GetIndexAsrgWithBodyWithResponse request with any body
	GetIndexAsrgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error)

	GetIndexAsrgWithResponse(ctx context.Context, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error)

	// GetIndexAssetnoteWithBodyWithResponse request with any body
	GetIndexAssetnoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error)

	GetIndexAssetnoteWithResponse(ctx context.Context, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error)

	// GetIndexAsteriskWithBodyWithResponse request with any body
	GetIndexAsteriskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error)

	GetIndexAsteriskWithResponse(ctx context.Context, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error)

	// GetIndexAsusWithBodyWithResponse request with any body
	GetIndexAsusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error)

	GetIndexAsusWithResponse(ctx context.Context, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error)

	// GetIndexAtlassianWithBodyWithResponse request with any body
	GetIndexAtlassianWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error)

	GetIndexAtlassianWithResponse(ctx context.Context, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error)

	// GetIndexAtlassianVulnsWithBodyWithResponse request with any body
	GetIndexAtlassianVulnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error)

	GetIndexAtlassianVulnsWithResponse(ctx context.Context, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error)

	// GetIndexAtredisWithBodyWithResponse request with any body
	GetIndexAtredisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error)

	GetIndexAtredisWithResponse(ctx context.Context, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error)

	// GetIndexAuscertWithBodyWithResponse request with any body
	GetIndexAuscertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error)

	GetIndexAuscertWithResponse(ctx context.Context, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error)

	// GetIndexAutodeskWithBodyWithResponse request with any body
	GetIndexAutodeskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error)

	GetIndexAutodeskWithResponse(ctx context.Context, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error)

	// GetIndexAvayaWithBodyWithResponse request with any body
	GetIndexAvayaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error)

	GetIndexAvayaWithResponse(ctx context.Context, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error)

	// GetIndexAvevaWithBodyWithResponse request with any body
	GetIndexAvevaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error)

	GetIndexAvevaWithResponse(ctx context.Context, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error)

	// GetIndexAvigilonWithBodyWithResponse request with any body
	GetIndexAvigilonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error)

	GetIndexAvigilonWithResponse(ctx context.Context, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error)

	// GetIndexAwsWithBodyWithResponse request with any body
	GetIndexAwsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error)

	GetIndexAwsWithResponse(ctx context.Context, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error)

	// GetIndexAxisWithBodyWithResponse request with any body
	GetIndexAxisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error)

	GetIndexAxisWithResponse(ctx context.Context, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error)

	// GetIndexBandrWithBodyWithResponse request with any body
	GetIndexBandrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error)

	GetIndexBandrWithResponse(ctx context.Context, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error)

	// GetIndexBaxterWithBodyWithResponse request with any body
	GetIndexBaxterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error)

	GetIndexBaxterWithResponse(ctx context.Context, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error)

	// GetIndexBbraunWithBodyWithResponse request with any body
	GetIndexBbraunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error)

	GetIndexBbraunWithResponse(ctx context.Context, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error)

	// GetIndexBdWithBodyWithResponse request with any body
	GetIndexBdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error)

	GetIndexBdWithResponse(ctx context.Context, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error)

	// GetIndexBduWithBodyWithResponse request with any body
	GetIndexBduWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error)

	GetIndexBduWithResponse(ctx context.Context, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error)

	// GetIndexBeckhoffWithBodyWithResponse request with any body
	GetIndexBeckhoffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error)

	GetIndexBeckhoffWithResponse(ctx context.Context, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error)

	// GetIndexBeldenWithBodyWithResponse request with any body
	GetIndexBeldenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error)

	GetIndexBeldenWithResponse(ctx context.Context, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error)

	// GetIndexBeyondTrustWithBodyWithResponse request with any body
	GetIndexBeyondTrustWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error)

	GetIndexBeyondTrustWithResponse(ctx context.Context, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error)

	// GetIndexBinarlyWithBodyWithResponse request with any body
	GetIndexBinarlyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error)

	GetIndexBinarlyWithResponse(ctx context.Context, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error)

	// GetIndexBitdefenderWithBodyWithResponse request with any body
	GetIndexBitdefenderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error)

	GetIndexBitdefenderWithResponse(ctx context.Context, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error)

	// GetIndexBlackberryWithBodyWithResponse request with any body
	GetIndexBlackberryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error)

	GetIndexBlackberryWithResponse(ctx context.Context, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error)

	// GetIndexBlsWithBodyWithResponse request with any body
	GetIndexBlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error)

	GetIndexBlsWithResponse(ctx context.Context, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error)

	// GetIndexBoschWithBodyWithResponse request with any body
	GetIndexBoschWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error)

	GetIndexBoschWithResponse(ctx context.Context, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error)

	// GetIndexBostonScientificWithBodyWithResponse request with any body
	GetIndexBostonScientificWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error)

	GetIndexBostonScientificWithResponse(ctx context.Context, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error)

	// GetIndexBotnetsWithBodyWithResponse request with any body
	GetIndexBotnetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error)

	GetIndexBotnetsWithResponse(ctx context.Context, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error)

	// GetIndexCaCyberCentreWithBodyWithResponse request with any body
	GetIndexCaCyberCentreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error)

	GetIndexCaCyberCentreWithResponse(ctx context.Context, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error)

	// GetIndexCanvasWithBodyWithResponse request with any body
	GetIndexCanvasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error)

	GetIndexCanvasWithResponse(ctx context.Context, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error)

	// GetIndexCarestreamWithBodyWithResponse request with any body
	GetIndexCarestreamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error)

	GetIndexCarestreamWithResponse(ctx context.Context, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error)

	// GetIndexCargoWithBodyWithResponse request with any body
	GetIndexCargoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error)

	GetIndexCargoWithResponse(ctx context.Context, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error)

	// GetIndexCarrierWithBodyWithResponse request with any body
	GetIndexCarrierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error)

	GetIndexCarrierWithResponse(ctx context.Context, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error)

	// GetIndexCblMarinerWithBodyWithResponse request with any body
	GetIndexCblMarinerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error)

	GetIndexCblMarinerWithResponse(ctx context.Context, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error)

	// GetIndexCentosWithBodyWithResponse request with any body
	GetIndexCentosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error)

	GetIndexCentosWithResponse(ctx context.Context, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error)

	// GetIndexCertBeWithBodyWithResponse request with any body
	GetIndexCertBeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error)

	GetIndexCertBeWithResponse(ctx context.Context, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error)

	// GetIndexCertUaWithBodyWithResponse request with any body
	GetIndexCertUaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error)

	GetIndexCertUaWithResponse(ctx context.Context, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error)

	// GetIndexCerteuWithBodyWithResponse request with any body
	GetIndexCerteuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error)

	GetIndexCerteuWithResponse(ctx context.Context, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error)

	// GetIndexCertfrWithBodyWithResponse request with any body
	GetIndexCertfrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error)

	GetIndexCertfrWithResponse(ctx context.Context, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error)

	// GetIndexChainguardWithBodyWithResponse request with any body
	GetIndexChainguardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error)

	GetIndexChainguardWithResponse(ctx context.Context, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error)

	// GetIndexCheckpointWithBodyWithResponse request with any body
	GetIndexCheckpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error)

	GetIndexCheckpointWithResponse(ctx context.Context, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error)

	// GetIndexChromeWithBodyWithResponse request with any body
	GetIndexChromeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error)

	GetIndexChromeWithResponse(ctx context.Context, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error)

	// GetIndexCisaAlertsWithBodyWithResponse request with any body
	GetIndexCisaAlertsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error)

	GetIndexCisaAlertsWithResponse(ctx context.Context, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error)

	// GetIndexCisaKevWithBodyWithResponse request with any body
	GetIndexCisaKevWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error)

	GetIndexCisaKevWithResponse(ctx context.Context, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error)

	// GetIndexCiscoWithBodyWithResponse request with any body
	GetIndexCiscoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error)

	GetIndexCiscoWithResponse(ctx context.Context, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error)

	// GetIndexCiscoTalosWithBodyWithResponse request with any body
	GetIndexCiscoTalosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error)

	GetIndexCiscoTalosWithResponse(ctx context.Context, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error)

	// GetIndexCitrixWithBodyWithResponse request with any body
	GetIndexCitrixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error)

	GetIndexCitrixWithResponse(ctx context.Context, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error)

	// GetIndexClarotyWithBodyWithResponse request with any body
	GetIndexClarotyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error)

	GetIndexClarotyWithResponse(ctx context.Context, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error)

	// GetIndexCloudbeesWithBodyWithResponse request with any body
	GetIndexCloudbeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error)

	GetIndexCloudbeesWithResponse(ctx context.Context, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error)

	// GetIndexCloudvulndbWithBodyWithResponse request with any body
	GetIndexCloudvulndbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error)

	GetIndexCloudvulndbWithResponse(ctx context.Context, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error)

	// GetIndexCnaCveCountWithBodyWithResponse request with any body
	GetIndexCnaCveCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnaCveCountResponse, error)

	GetIndexCnaCveCountWithResponse(ctx context.Context, body GetIndexCnaCveCountJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnaCveCountResponse, error)

	// GetIndexCnnvdWithBodyWithResponse request with any body
	GetIndexCnnvdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error)

	GetIndexCnnvdWithResponse(ctx context.Context, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error)

	// GetIndexCnvdBulletinsWithBodyWithResponse request with any body
	GetIndexCnvdBulletinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error)

	GetIndexCnvdBulletinsWithResponse(ctx context.Context, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error)

	// GetIndexCnvdFlawsWithBodyWithResponse request with any body
	GetIndexCnvdFlawsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error)

	GetIndexCnvdFlawsWithResponse(ctx context.Context, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error)

	// GetIndexCocoapodsWithBodyWithResponse request with any body
	GetIndexCocoapodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error)

	GetIndexCocoapodsWithResponse(ctx context.Context, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error)

	// GetIndexCodesysWithBodyWithResponse request with any body
	GetIndexCodesysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error)

	GetIndexCodesysWithResponse(ctx context.Context, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error)

	// GetIndexCompassSecurityWithBodyWithResponse request with any body
	GetIndexCompassSecurityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error)

	GetIndexCompassSecurityWithResponse(ctx context.Context, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error)

	// GetIndexComposerWithBodyWithResponse request with any body
	GetIndexComposerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error)

	GetIndexComposerWithResponse(ctx context.Context, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error)

	// GetIndexConanWithBodyWithResponse request with any body
	GetIndexConanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error)

	GetIndexConanWithResponse(ctx context.Context, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error)

	// GetIndexCrestronWithBodyWithResponse request with any body
	GetIndexCrestronWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error)

	GetIndexCrestronWithResponse(ctx context.Context, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error)

	// GetIndexCurlWithBodyWithResponse request with any body
	GetIndexCurlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error)

	GetIndexCurlWithResponse(ctx context.Context, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error)

	// GetIndexCweWithBodyWithResponse request with any body
	GetIndexCweWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error)

	GetIndexCweWithResponse(ctx context.Context, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error)

	// GetIndexDahuaWithBodyWithResponse request with any body
	GetIndexDahuaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error)

	GetIndexDahuaWithResponse(ctx context.Context, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error)

	// GetIndexDassaultWithBodyWithResponse request with any body
	GetIndexDassaultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error)

	GetIndexDassaultWithResponse(ctx context.Context, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error)

	// GetIndexDebianWithBodyWithResponse request with any body
	GetIndexDebianWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error)

	GetIndexDebianWithResponse(ctx context.Context, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error)

	// GetIndexDebianDsaWithBodyWithResponse request with any body
	GetIndexDebianDsaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error)

	GetIndexDebianDsaWithResponse(ctx context.Context, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error)

	// GetIndexDellWithBodyWithResponse request with any body
	GetIndexDellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error)

	GetIndexDellWithResponse(ctx context.Context, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error)

	// GetIndexDeltaWithBodyWithResponse request with any body
	GetIndexDeltaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error)

	GetIndexDeltaWithResponse(ctx context.Context, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error)

	// GetIndexDotcmsWithBodyWithResponse request with any body
	GetIndexDotcmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error)

	GetIndexDotcmsWithResponse(ctx context.Context, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error)

	// GetIndexDragosWithBodyWithResponse request with any body
	GetIndexDragosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error)

	GetIndexDragosWithResponse(ctx context.Context, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error)

	// GetIndexDraytekWithBodyWithResponse request with any body
	GetIndexDraytekWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error)

	GetIndexDraytekWithResponse(ctx context.Context, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error)

	// GetIndexEatonWithBodyWithResponse request with any body
	GetIndexEatonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error)

	GetIndexEatonWithResponse(ctx context.Context, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error)

	// GetIndexElasticWithBodyWithResponse request with any body
	GetIndexElasticWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error)

	GetIndexElasticWithResponse(ctx context.Context, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error)

	// GetIndexElspecWithBodyWithResponse request with any body
	GetIndexElspecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error)

	GetIndexElspecWithResponse(ctx context.Context, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error)

	// GetIndexEmersonWithBodyWithResponse request with any body
	GetIndexEmersonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error)

	GetIndexEmersonWithResponse(ctx context.Context, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error)

	// GetIndexEolWithBodyWithResponse request with any body
	GetIndexEolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error)

	GetIndexEolWithResponse(ctx context.Context, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error)

	// GetIndexEpssWithBodyWithResponse request with any body
	GetIndexEpssWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error)

	GetIndexEpssWithResponse(ctx context.Context, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error)

	// GetIndexExodusIntelWithBodyWithResponse request with any body
	GetIndexExodusIntelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error)

	GetIndexExodusIntelWithResponse(ctx context.Context, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error)

	// GetIndexExploitChainsWithBodyWithResponse request with any body
	GetIndexExploitChainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error)

	GetIndexExploitChainsWithResponse(ctx context.Context, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error)

	// GetIndexExploitdbWithBodyWithResponse request with any body
	GetIndexExploitdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error)

	GetIndexExploitdbWithResponse(ctx context.Context, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error)

	// GetIndexExploitsWithBodyWithResponse request with any body
	GetIndexExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error)

	GetIndexExploitsWithResponse(ctx context.Context, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error)

	// GetIndexFSecureWithBodyWithResponse request with any body
	GetIndexFSecureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error)

	GetIndexFSecureWithResponse(ctx context.Context, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error)

	// GetIndexFastlyWithBodyWithResponse request with any body
	GetIndexFastlyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error)

	GetIndexFastlyWithResponse(ctx context.Context, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error)

	// GetIndexFedoraWithBodyWithResponse request with any body
	GetIndexFedoraWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error)

	GetIndexFedoraWithResponse(ctx context.Context, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error)

	// GetIndexFilecloudWithBodyWithResponse request with any body
	GetIndexFilecloudWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error)

	GetIndexFilecloudWithResponse(ctx context.Context, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error)

	// GetIndexForgerockWithBodyWithResponse request with any body
	GetIndexForgerockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error)

	GetIndexForgerockWithResponse(ctx context.Context, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error)

	// GetIndexFortinetWithBodyWithResponse request with any body
	GetIndexFortinetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error)

	GetIndexFortinetWithResponse(ctx context.Context, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error)

	// GetIndexFreebsdWithBodyWithResponse request with any body
	GetIndexFreebsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error)

	GetIndexFreebsdWithResponse(ctx context.Context, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error)

	// GetIndexGallagherWithBodyWithResponse request with any body
	GetIndexGallagherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error)

	GetIndexGallagherWithResponse(ctx context.Context, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error)

	// GetIndexGcpWithBodyWithResponse request with any body
	GetIndexGcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error)

	GetIndexGcpWithResponse(ctx context.Context, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error)

	// GetIndexGeGasWithBodyWithResponse request with any body
	GetIndexGeGasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error)

	GetIndexGeGasWithResponse(ctx context.Context, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error)

	// GetIndexGeHealthcareWithBodyWithResponse request with any body
	GetIndexGeHealthcareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error)

	GetIndexGeHealthcareWithResponse(ctx context.Context, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error)

	// GetIndexGemWithBodyWithResponse request with any body
	GetIndexGemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error)

	GetIndexGemWithResponse(ctx context.Context, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error)

	// GetIndexGenetecWithBodyWithResponse request with any body
	GetIndexGenetecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error)

	GetIndexGenetecWithResponse(ctx context.Context, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error)

	// GetIndexGigabyteWithBodyWithResponse request with any body
	GetIndexGigabyteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error)

	GetIndexGigabyteWithResponse(ctx context.Context, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error)

	// GetIndexGiteeExploitsWithBodyWithResponse request with any body
	GetIndexGiteeExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error)

	GetIndexGiteeExploitsWithResponse(ctx context.Context, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error)

	// GetIndexGithubExploitsWithBodyWithResponse request with any body
	GetIndexGithubExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error)

	GetIndexGithubExploitsWithResponse(ctx context.Context, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error)

	// GetIndexGithubSecurityAdvisoriesWithBodyWithResponse request with any body
	GetIndexGithubSecurityAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error)

	GetIndexGithubSecurityAdvisoriesWithResponse(ctx context.Context, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error)

	// GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse request with any body
	GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error)

	GetIndexGitlabAdvisoriesCommunityWithResponse(ctx context.Context, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error)

	// GetIndexGitlabExploitsWithBodyWithResponse request with any body
	GetIndexGitlabExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error)

	GetIndexGitlabExploitsWithResponse(ctx context.Context, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error)

	// GetIndexGnutlsWithBodyWithResponse request with any body
	GetIndexGnutlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error)

	GetIndexGnutlsWithResponse(ctx context.Context, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error)

	// GetIndexGolangWithBodyWithResponse request with any body
	GetIndexGolangWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error)

	GetIndexGolangWithResponse(ctx context.Context, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error)

	// GetIndexGoogle0dayItwWithBodyWithResponse request with any body
	GetIndexGoogle0dayItwWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error)

	GetIndexGoogle0dayItwWithResponse(ctx context.Context, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error)

	// GetIndexGoogleContainerOptimizedOsWithBodyWithResponse request with any body
	GetIndexGoogleContainerOptimizedOsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error)

	GetIndexGoogleContainerOptimizedOsWithResponse(ctx context.Context, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error)

	// GetIndexGrafanaWithBodyWithResponse request with any body
	GetIndexGrafanaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error)

	GetIndexGrafanaWithResponse(ctx context.Context, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error)

	// GetIndexGreynoiseMetadataWithBodyWithResponse request with any body
	GetIndexGreynoiseMetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error)

	GetIndexGreynoiseMetadataWithResponse(ctx context.Context, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error)

	// GetIndexHackageWithBodyWithResponse request with any body
	GetIndexHackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error)

	GetIndexHackageWithResponse(ctx context.Context, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error)

	// GetIndexHarmonyosWithBodyWithResponse request with any body
	GetIndexHarmonyosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error)

	GetIndexHarmonyosWithResponse(ctx context.Context, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error)

	// GetIndexHashicorpWithBodyWithResponse request with any body
	GetIndexHashicorpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error)

	GetIndexHashicorpWithResponse(ctx context.Context, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error)

	// GetIndexHaskellSadbWithBodyWithResponse request with any body
	GetIndexHaskellSadbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error)

	GetIndexHaskellSadbWithResponse(ctx context.Context, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error)

	// GetIndexHclWithBodyWithResponse request with any body
	GetIndexHclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error)

	GetIndexHclWithResponse(ctx context.Context, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error)

	// GetIndexHexWithBodyWithResponse request with any body
	GetIndexHexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error)

	GetIndexHexWithResponse(ctx context.Context, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error)

	// GetIndexHikvisionWithBodyWithResponse request with any body
	GetIndexHikvisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error)

	GetIndexHikvisionWithResponse(ctx context.Context, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error)

	// GetIndexHillromWithBodyWithResponse request with any body
	GetIndexHillromWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error)

	GetIndexHillromWithResponse(ctx context.Context, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error)

	// GetIndexHitachiWithBodyWithResponse request with any body
	GetIndexHitachiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error)

	GetIndexHitachiWithResponse(ctx context.Context, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error)

	// GetIndexHitachiEnergyWithBodyWithResponse request with any body
	GetIndexHitachiEnergyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error)

	GetIndexHitachiEnergyWithResponse(ctx context.Context, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error)

	// GetIndexHkcertWithBodyWithResponse request with any body
	GetIndexHkcertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error)

	GetIndexHkcertWithResponse(ctx context.Context, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error)

	// GetIndexHoneywellWithBodyWithResponse request with any body
	GetIndexHoneywellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error)

	GetIndexHoneywellWithResponse(ctx context.Context, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error)

	// GetIndexHpWithBodyWithResponse request with any body
	GetIndexHpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error)

	GetIndexHpWithResponse(ctx context.Context, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error)

	// GetIndexHuaweiEulerosWithBodyWithResponse request with any body
	GetIndexHuaweiEulerosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error)

	GetIndexHuaweiEulerosWithResponse(ctx context.Context, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error)

	// GetIndexHuaweiIpsWithBodyWithResponse request with any body
	GetIndexHuaweiIpsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error)

	GetIndexHuaweiIpsWithResponse(ctx context.Context, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error)

	// GetIndexHuaweiPsirtWithBodyWithResponse request with any body
	GetIndexHuaweiPsirtWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error)

	GetIndexHuaweiPsirtWithResponse(ctx context.Context, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error)

	// GetIndexIavaWithBodyWithResponse request with any body
	GetIndexIavaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error)

	GetIndexIavaWithResponse(ctx context.Context, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error)

	// GetIndexIbmWithBodyWithResponse request with any body
	GetIndexIbmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error)

	GetIndexIbmWithResponse(ctx context.Context, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error)

	// GetIndexIdemiaWithBodyWithResponse request with any body
	GetIndexIdemiaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error)

	GetIndexIdemiaWithResponse(ctx context.Context, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error)

	// GetIndexIlAlertsWithBodyWithResponse request with any body
	GetIndexIlAlertsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error)

	GetIndexIlAlertsWithResponse(ctx context.Context, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error)

	// GetIndexIlVulnerabilitiesWithBodyWithResponse request with any body
	GetIndexIlVulnerabilitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error)

	GetIndexIlVulnerabilitiesWithResponse(ctx context.Context, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error)

	// GetIndexIncibeWithBodyWithResponse request with any body
	GetIndexIncibeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error)

	GetIndexIncibeWithResponse(ctx context.Context, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error)

	// GetIndexInitialAccessWithBodyWithResponse request with any body
	GetIndexInitialAccessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error)

	GetIndexInitialAccessWithResponse(ctx context.Context, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error)

	// GetIndexInitialAccessGitWithBodyWithResponse request with any body
	GetIndexInitialAccessGitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error)

	GetIndexInitialAccessGitWithResponse(ctx context.Context, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error)

	// GetIndexIntelWithBodyWithResponse request with any body
	GetIndexIntelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error)

	GetIndexIntelWithResponse(ctx context.Context, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error)

	// GetIndexIpintel10dWithBodyWithResponse request with any body
	GetIndexIpintel10dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error)

	GetIndexIpintel10dWithResponse(ctx context.Context, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error)

	// GetIndexIpintel30dWithBodyWithResponse request with any body
	GetIndexIpintel30dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error)

	GetIndexIpintel30dWithResponse(ctx context.Context, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error)

	// GetIndexIpintel3dWithBodyWithResponse request with any body
	GetIndexIpintel3dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error)

	GetIndexIpintel3dWithResponse(ctx context.Context, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error)

	// GetIndexIpintel90dWithBodyWithResponse request with any body
	GetIndexIpintel90dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error)

	GetIndexIpintel90dWithResponse(ctx context.Context, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error)

	// GetIndexIstioWithBodyWithResponse request with any body
	GetIndexIstioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error)

	GetIndexIstioWithResponse(ctx context.Context, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error)

	// GetIndexIvantiWithBodyWithResponse request with any body
	GetIndexIvantiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error)

	GetIndexIvantiWithResponse(ctx context.Context, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error)

	// GetIndexIvantiRssWithBodyWithResponse request with any body
	GetIndexIvantiRssWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error)

	GetIndexIvantiRssWithResponse(ctx context.Context, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error)

	// GetIndexJenkinsWithBodyWithResponse request with any body
	GetIndexJenkinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error)

	GetIndexJenkinsWithResponse(ctx context.Context, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error)

	// GetIndexJetbrainsWithBodyWithResponse request with any body
	GetIndexJetbrainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error)

	GetIndexJetbrainsWithResponse(ctx context.Context, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error)

	// GetIndexJfrogWithBodyWithResponse request with any body
	GetIndexJfrogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error)

	GetIndexJfrogWithResponse(ctx context.Context, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error)

	// GetIndexJnjWithBodyWithResponse request with any body
	GetIndexJnjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error)

	GetIndexJnjWithResponse(ctx context.Context, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error)

	// GetIndexJvndbWithBodyWithResponse request with any body
	GetIndexJvndbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error)

	GetIndexJvndbWithResponse(ctx context.Context, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error)

	// GetIndexKasperskyIcsCertWithBodyWithResponse request with any body
	GetIndexKasperskyIcsCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error)

	GetIndexKasperskyIcsCertWithResponse(ctx context.Context, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error)

	// GetIndexKrcertSecurityNoticesWithBodyWithResponse request with any body
	GetIndexKrcertSecurityNoticesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error)

	GetIndexKrcertSecurityNoticesWithResponse(ctx context.Context, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error)

	// GetIndexKrcertVulnerabilitiesWithBodyWithResponse request with any body
	GetIndexKrcertVulnerabilitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error)

	GetIndexKrcertVulnerabilitiesWithResponse(ctx context.Context, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error)

	// GetIndexKubernetesWithBodyWithResponse request with any body
	GetIndexKubernetesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error)

	GetIndexKubernetesWithResponse(ctx context.Context, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error)

	// GetIndexLenovoWithBodyWithResponse request with any body
	GetIndexLenovoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error)

	GetIndexLenovoWithResponse(ctx context.Context, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error)

	// GetIndexLexmarkWithBodyWithResponse request with any body
	GetIndexLexmarkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error)

	GetIndexLexmarkWithResponse(ctx context.Context, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error)

	// GetIndexLgWithBodyWithResponse request with any body
	GetIndexLgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error)

	GetIndexLgWithResponse(ctx context.Context, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error)

	// GetIndexLibreOfficeWithBodyWithResponse request with any body
	GetIndexLibreOfficeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error)

	GetIndexLibreOfficeWithResponse(ctx context.Context, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error)

	// GetIndexLinuxWithBodyWithResponse request with any body
	GetIndexLinuxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error)

	GetIndexLinuxWithResponse(ctx context.Context, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error)

	// GetIndexMFilesWithBodyWithResponse request with any body
	GetIndexMFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error)

	GetIndexMFilesWithResponse(ctx context.Context, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error)

	// GetIndexMacertWithBodyWithResponse request with any body
	GetIndexMacertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error)

	GetIndexMacertWithResponse(ctx context.Context, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error)

	// GetIndexManageengineWithBodyWithResponse request with any body
	GetIndexManageengineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error)

	GetIndexManageengineWithResponse(ctx context.Context, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error)

	// GetIndexMavenWithBodyWithResponse request with any body
	GetIndexMavenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error)

	GetIndexMavenWithResponse(ctx context.Context, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error)

	// GetIndexMbedTlsWithBodyWithResponse request with any body
	GetIndexMbedTlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error)

	GetIndexMbedTlsWithResponse(ctx context.Context, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error)

	// GetIndexMediatekWithBodyWithResponse request with any body
	GetIndexMediatekWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error)

	GetIndexMediatekWithResponse(ctx context.Context, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error)

	// GetIndexMedtronicWithBodyWithResponse request with any body
	GetIndexMedtronicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error)

	GetIndexMedtronicWithResponse(ctx context.Context, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error)

	// GetIndexMendixWithBodyWithResponse request with any body
	GetIndexMendixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error)

	GetIndexMendixWithResponse(ctx context.Context, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error)

	// GetIndexMetasploitWithBodyWithResponse request with any body
	GetIndexMetasploitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error)

	GetIndexMetasploitWithResponse(ctx context.Context, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error)

	// GetIndexMicrosoftCvrfWithBodyWithResponse request with any body
	GetIndexMicrosoftCvrfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error)

	GetIndexMicrosoftCvrfWithResponse(ctx context.Context, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error)

	// GetIndexMicrosoftKbWithBodyWithResponse request with any body
	GetIndexMicrosoftKbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error)

	GetIndexMicrosoftKbWithResponse(ctx context.Context, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error)

	// GetIndexMikrotikWithBodyWithResponse request with any body
	GetIndexMikrotikWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error)

	GetIndexMikrotikWithResponse(ctx context.Context, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error)

	// GetIndexMindrayWithBodyWithResponse request with any body
	GetIndexMindrayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error)

	GetIndexMindrayWithResponse(ctx context.Context, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error)

	// GetIndexMispThreatActorsWithBodyWithResponse request with any body
	GetIndexMispThreatActorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error)

	GetIndexMispThreatActorsWithResponse(ctx context.Context, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error)

	// GetIndexMitelWithBodyWithResponse request with any body
	GetIndexMitelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error)

	GetIndexMitelWithResponse(ctx context.Context, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error)

	// GetIndexMitreAttackCveWithBodyWithResponse request with any body
	GetIndexMitreAttackCveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error)

	GetIndexMitreAttackCveWithResponse(ctx context.Context, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error)

	// GetIndexMitreCveWithBodyWithResponse request with any body
	GetIndexMitreCveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreCveResponse, error)

	GetIndexMitreCveWithResponse(ctx context.Context, body GetIndexMitreCveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreCveResponse, error)

	// GetIndexMitsubishiElectricWithBodyWithResponse request with any body
	GetIndexMitsubishiElectricWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error)

	GetIndexMitsubishiElectricWithResponse(ctx context.Context, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error)

	// GetIndexMongodbWithBodyWithResponse request with any body
	GetIndexMongodbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error)

	GetIndexMongodbWithResponse(ctx context.Context, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error)

	// GetIndexMoxaWithBodyWithResponse request with any body
	GetIndexMoxaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error)

	GetIndexMoxaWithResponse(ctx context.Context, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error)

	// GetIndexMozillaWithBodyWithResponse request with any body
	GetIndexMozillaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error)

	GetIndexMozillaWithResponse(ctx context.Context, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error)

	// GetIndexNaverWithBodyWithResponse request with any body
	GetIndexNaverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error)

	GetIndexNaverWithResponse(ctx context.Context, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error)

	// GetIndexNecWithBodyWithResponse request with any body
	GetIndexNecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error)

	GetIndexNecWithResponse(ctx context.Context, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error)

	// GetIndexNetappWithBodyWithResponse request with any body
	GetIndexNetappWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error)

	GetIndexNetappWithResponse(ctx context.Context, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error)

	// GetIndexNetgateWithBodyWithResponse request with any body
	GetIndexNetgateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error)

	GetIndexNetgateWithResponse(ctx context.Context, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error)

	// GetIndexNetgearWithBodyWithResponse request with any body
	GetIndexNetgearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error)

	GetIndexNetgearWithResponse(ctx context.Context, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error)

	// GetIndexNetskopeWithBodyWithResponse request with any body
	GetIndexNetskopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error)

	GetIndexNetskopeWithResponse(ctx context.Context, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error)

	// GetIndexNginxWithBodyWithResponse request with any body
	GetIndexNginxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error)

	GetIndexNginxWithResponse(ctx context.Context, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error)

	// GetIndexNhsWithBodyWithResponse request with any body
	GetIndexNhsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error)

	GetIndexNhsWithResponse(ctx context.Context, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error)

	// GetIndexNiWithBodyWithResponse request with any body
	GetIndexNiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error)

	GetIndexNiWithResponse(ctx context.Context, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error)

	// GetIndexNistNvdWithBodyWithResponse request with any body
	GetIndexNistNvdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error)

	GetIndexNistNvdWithResponse(ctx context.Context, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error)

	// GetIndexNistNvd2WithBodyWithResponse request with any body
	GetIndexNistNvd2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error)

	GetIndexNistNvd2WithResponse(ctx context.Context, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error)

	// GetIndexNistNvd2CpematchWithBodyWithResponse request with any body
	GetIndexNistNvd2CpematchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error)

	GetIndexNistNvd2CpematchWithResponse(ctx context.Context, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error)

	// GetIndexNodeSecurityWithBodyWithResponse request with any body
	GetIndexNodeSecurityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error)

	GetIndexNodeSecurityWithResponse(ctx context.Context, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error)

	// GetIndexNodejsWithBodyWithResponse request with any body
	GetIndexNodejsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error)

	GetIndexNodejsWithResponse(ctx context.Context, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error)

	// GetIndexNokiaWithBodyWithResponse request with any body
	GetIndexNokiaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error)

	GetIndexNokiaWithResponse(ctx context.Context, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error)

	// GetIndexNozomiWithBodyWithResponse request with any body
	GetIndexNozomiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error)

	GetIndexNozomiWithResponse(ctx context.Context, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error)

	// GetIndexNpmWithBodyWithResponse request with any body
	GetIndexNpmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error)

	GetIndexNpmWithResponse(ctx context.Context, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error)

	// GetIndexNugetWithBodyWithResponse request with any body
	GetIndexNugetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error)

	GetIndexNugetWithResponse(ctx context.Context, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error)

	// GetIndexNvidiaWithBodyWithResponse request with any body
	GetIndexNvidiaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error)

	GetIndexNvidiaWithResponse(ctx context.Context, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error)

	// GetIndexNzAdvisoriesWithBodyWithResponse request with any body
	GetIndexNzAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error)

	GetIndexNzAdvisoriesWithResponse(ctx context.Context, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error)

	// GetIndexOctopusDeployWithBodyWithResponse request with any body
	GetIndexOctopusDeployWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error)

	GetIndexOctopusDeployWithResponse(ctx context.Context, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error)

	// GetIndexOktaWithBodyWithResponse request with any body
	GetIndexOktaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error)

	GetIndexOktaWithResponse(ctx context.Context, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error)

	// GetIndexOmronWithBodyWithResponse request with any body
	GetIndexOmronWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error)

	GetIndexOmronWithResponse(ctx context.Context, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error)

	// GetIndexOneEWithBodyWithResponse request with any body
	GetIndexOneEWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error)

	GetIndexOneEWithResponse(ctx context.Context, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error)

	// GetIndexOpamWithBodyWithResponse request with any body
	GetIndexOpamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error)

	GetIndexOpamWithResponse(ctx context.Context, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error)

	// GetIndexOpenCvdbWithBodyWithResponse request with any body
	GetIndexOpenCvdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error)

	GetIndexOpenCvdbWithResponse(ctx context.Context, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error)

	// GetIndexOpenbsdWithBodyWithResponse request with any body
	GetIndexOpenbsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error)

	GetIndexOpenbsdWithResponse(ctx context.Context, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error)

	// GetIndexOpensshWithBodyWithResponse request with any body
	GetIndexOpensshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error)

	GetIndexOpensshWithResponse(ctx context.Context, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error)

	// GetIndexOpensslSecadvWithBodyWithResponse request with any body
	GetIndexOpensslSecadvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error)

	GetIndexOpensslSecadvWithResponse(ctx context.Context, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error)

	// GetIndexOpenstackWithBodyWithResponse request with any body
	GetIndexOpenstackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error)

	GetIndexOpenstackWithResponse(ctx context.Context, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error)

	// GetIndexOpenwrtWithBodyWithResponse request with any body
	GetIndexOpenwrtWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error)

	GetIndexOpenwrtWithResponse(ctx context.Context, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error)

	// GetIndexOracleWithBodyWithResponse request with any body
	GetIndexOracleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error)

	GetIndexOracleWithResponse(ctx context.Context, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error)

	// GetIndexOracleCpuWithBodyWithResponse request with any body
	GetIndexOracleCpuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error)

	GetIndexOracleCpuWithResponse(ctx context.Context, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error)

	// GetIndexOracleCpuCsafWithBodyWithResponse request with any body
	GetIndexOracleCpuCsafWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error)

	GetIndexOracleCpuCsafWithResponse(ctx context.Context, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error)

	// GetIndexOsvWithBodyWithResponse request with any body
	GetIndexOsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error)

	GetIndexOsvWithResponse(ctx context.Context, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error)

	// GetIndexOtrsWithBodyWithResponse request with any body
	GetIndexOtrsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error)

	GetIndexOtrsWithResponse(ctx context.Context, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error)

	// GetIndexOwncloudWithBodyWithResponse request with any body
	GetIndexOwncloudWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error)

	GetIndexOwncloudWithResponse(ctx context.Context, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error)

	// GetIndexPalantirWithBodyWithResponse request with any body
	GetIndexPalantirWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error)

	GetIndexPalantirWithResponse(ctx context.Context, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error)

	// GetIndexPaloAltoWithBodyWithResponse request with any body
	GetIndexPaloAltoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error)

	GetIndexPaloAltoWithResponse(ctx context.Context, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error)

	// GetIndexPanasonicWithBodyWithResponse request with any body
	GetIndexPanasonicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error)

	GetIndexPanasonicWithResponse(ctx context.Context, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error)

	// GetIndexPapercutWithBodyWithResponse request with any body
	GetIndexPapercutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error)

	GetIndexPapercutWithResponse(ctx context.Context, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error)

	// GetIndexPegaWithBodyWithResponse request with any body
	GetIndexPegaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error)

	GetIndexPegaWithResponse(ctx context.Context, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error)

	// GetIndexPhilipsWithBodyWithResponse request with any body
	GetIndexPhilipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error)

	GetIndexPhilipsWithResponse(ctx context.Context, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error)

	// GetIndexPhoenixContactWithBodyWithResponse request with any body
	GetIndexPhoenixContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error)

	GetIndexPhoenixContactWithResponse(ctx context.Context, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error)

	// GetIndexPostgressqlWithBodyWithResponse request with any body
	GetIndexPostgressqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error)

	GetIndexPostgressqlWithResponse(ctx context.Context, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error)

	// GetIndexProgressWithBodyWithResponse request with any body
	GetIndexProgressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error)

	GetIndexProgressWithResponse(ctx context.Context, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error)

	// GetIndexProofpointWithBodyWithResponse request with any body
	GetIndexProofpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error)

	GetIndexProofpointWithResponse(ctx context.Context, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error)

	// GetIndexPubWithBodyWithResponse request with any body
	GetIndexPubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error)

	GetIndexPubWithResponse(ctx context.Context, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error)

	// GetIndexPureStorageWithBodyWithResponse request with any body
	GetIndexPureStorageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error)

	GetIndexPureStorageWithResponse(ctx context.Context, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error)

	// GetIndexPypaAdvisoriesWithBodyWithResponse request with any body
	GetIndexPypaAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error)

	GetIndexPypaAdvisoriesWithResponse(ctx context.Context, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error)

	// GetIndexPypiWithBodyWithResponse request with any body
	GetIndexPypiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error)

	GetIndexPypiWithResponse(ctx context.Context, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error)

	// GetIndexQnapWithBodyWithResponse request with any body
	GetIndexQnapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error)

	GetIndexQnapWithResponse(ctx context.Context, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error)

	// GetIndexQualcommWithBodyWithResponse request with any body
	GetIndexQualcommWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error)

	GetIndexQualcommWithResponse(ctx context.Context, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error)

	// GetIndexQualysWithBodyWithResponse request with any body
	GetIndexQualysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error)

	GetIndexQualysWithResponse(ctx context.Context, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error)

	// GetIndexRansomwareWithBodyWithResponse request with any body
	GetIndexRansomwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error)

	GetIndexRansomwareWithResponse(ctx context.Context, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error)

	// GetIndexRedhatWithBodyWithResponse request with any body
	GetIndexRedhatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error)

	GetIndexRedhatWithResponse(ctx context.Context, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error)

	// GetIndexRenesasWithBodyWithResponse request with any body
	GetIndexRenesasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error)

	GetIndexRenesasWithResponse(ctx context.Context, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error)

	// GetIndexReviveWithBodyWithResponse request with any body
	GetIndexReviveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error)

	GetIndexReviveWithResponse(ctx context.Context, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error)

	// GetIndexRockwellWithBodyWithResponse request with any body
	GetIndexRockwellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error)

	GetIndexRockwellWithResponse(ctx context.Context, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error)

	// GetIndexRockyWithBodyWithResponse request with any body
	GetIndexRockyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error)

	GetIndexRockyWithResponse(ctx context.Context, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error)

	// GetIndexRuckusWithBodyWithResponse request with any body
	GetIndexRuckusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error)

	GetIndexRuckusWithResponse(ctx context.Context, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error)

	// GetIndexRustsecAdvisoriesWithBodyWithResponse request with any body
	GetIndexRustsecAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error)

	GetIndexRustsecAdvisoriesWithResponse(ctx context.Context, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error)

	// GetIndexSacertWithBodyWithResponse request with any body
	GetIndexSacertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error)

	GetIndexSacertWithResponse(ctx context.Context, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error)

	// GetIndexSaintWithBodyWithResponse request with any body
	GetIndexSaintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error)

	GetIndexSaintWithResponse(ctx context.Context, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error)

	// GetIndexSalesforceWithBodyWithResponse request with any body
	GetIndexSalesforceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error)

	GetIndexSalesforceWithResponse(ctx context.Context, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error)

	// GetIndexSambaWithBodyWithResponse request with any body
	GetIndexSambaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error)

	GetIndexSambaWithResponse(ctx context.Context, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error)

	// GetIndexSapWithBodyWithResponse request with any body
	GetIndexSapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error)

	GetIndexSapWithResponse(ctx context.Context, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error)

	// GetIndexSchneiderElectricWithBodyWithResponse request with any body
	GetIndexSchneiderElectricWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error)

	GetIndexSchneiderElectricWithResponse(ctx context.Context, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error)

	// GetIndexSecConsultWithBodyWithResponse request with any body
	GetIndexSecConsultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error)

	GetIndexSecConsultWithResponse(ctx context.Context, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error)

	// GetIndexSelWithBodyWithResponse request with any body
	GetIndexSelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error)

	GetIndexSelWithResponse(ctx context.Context, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error)

	// GetIndexSentineloneWithBodyWithResponse request with any body
	GetIndexSentineloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error)

	GetIndexSentineloneWithResponse(ctx context.Context, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error)

	// GetIndexServicenowWithBodyWithResponse request with any body
	GetIndexServicenowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error)

	GetIndexServicenowWithResponse(ctx context.Context, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error)

	// GetIndexShadowserverExploitedWithBodyWithResponse request with any body
	GetIndexShadowserverExploitedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error)

	GetIndexShadowserverExploitedWithResponse(ctx context.Context, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error)

	// GetIndexSickWithBodyWithResponse request with any body
	GetIndexSickWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error)

	GetIndexSickWithResponse(ctx context.Context, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error)

	// GetIndexSiemensWithBodyWithResponse request with any body
	GetIndexSiemensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error)

	GetIndexSiemensWithResponse(ctx context.Context, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error)

	// GetIndexSierraWirelessWithBodyWithResponse request with any body
	GetIndexSierraWirelessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error)

	GetIndexSierraWirelessWithResponse(ctx context.Context, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error)

	// GetIndexSingcertWithBodyWithResponse request with any body
	GetIndexSingcertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error)

	GetIndexSingcertWithResponse(ctx context.Context, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error)

	// GetIndexSlackwareWithBodyWithResponse request with any body
	GetIndexSlackwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error)

	GetIndexSlackwareWithResponse(ctx context.Context, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error)

	// GetIndexSolarwindsWithBodyWithResponse request with any body
	GetIndexSolarwindsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error)

	GetIndexSolarwindsWithResponse(ctx context.Context, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error)

	// GetIndexSolrWithBodyWithResponse request with any body
	GetIndexSolrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error)

	GetIndexSolrWithResponse(ctx context.Context, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error)

	// GetIndexSonicwallWithBodyWithResponse request with any body
	GetIndexSonicwallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error)

	GetIndexSonicwallWithResponse(ctx context.Context, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error)

	// GetIndexSpacelabsHealthcareWithBodyWithResponse request with any body
	GetIndexSpacelabsHealthcareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error)

	GetIndexSpacelabsHealthcareWithResponse(ctx context.Context, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error)

	// GetIndexSpringWithBodyWithResponse request with any body
	GetIndexSpringWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error)

	GetIndexSpringWithResponse(ctx context.Context, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error)

	// GetIndexSsdWithBodyWithResponse request with any body
	GetIndexSsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error)

	GetIndexSsdWithResponse(ctx context.Context, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error)

	// GetIndexStormshieldWithBodyWithResponse request with any body
	GetIndexStormshieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error)

	GetIndexStormshieldWithResponse(ctx context.Context, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error)

	// GetIndexStrykerWithBodyWithResponse request with any body
	GetIndexStrykerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error)

	GetIndexStrykerWithResponse(ctx context.Context, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error)

	// GetIndexSudoWithBodyWithResponse request with any body
	GetIndexSudoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error)

	GetIndexSudoWithResponse(ctx context.Context, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error)

	// GetIndexSuseWithBodyWithResponse request with any body
	GetIndexSuseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error)

	GetIndexSuseWithResponse(ctx context.Context, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error)

	// GetIndexSwiftWithBodyWithResponse request with any body
	GetIndexSwiftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error)

	GetIndexSwiftWithResponse(ctx context.Context, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error)

	// GetIndexSwisslogHealthcareWithBodyWithResponse request with any body
	GetIndexSwisslogHealthcareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error)

	GetIndexSwisslogHealthcareWithResponse(ctx context.Context, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error)

	// GetIndexSymfonyWithBodyWithResponse request with any body
	GetIndexSymfonyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error)

	GetIndexSymfonyWithResponse(ctx context.Context, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error)

	// GetIndexSyncrosoftWithBodyWithResponse request with any body
	GetIndexSyncrosoftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error)

	GetIndexSyncrosoftWithResponse(ctx context.Context, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error)

	// GetIndexSynologyWithBodyWithResponse request with any body
	GetIndexSynologyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error)

	GetIndexSynologyWithResponse(ctx context.Context, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error)

	// GetIndexTeamviewerWithBodyWithResponse request with any body
	GetIndexTeamviewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error)

	GetIndexTeamviewerWithResponse(ctx context.Context, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error)

	// GetIndexTencentWithBodyWithResponse request with any body
	GetIndexTencentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error)

	GetIndexTencentWithResponse(ctx context.Context, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error)

	// GetIndexThalesWithBodyWithResponse request with any body
	GetIndexThalesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error)

	GetIndexThalesWithResponse(ctx context.Context, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error)

	// GetIndexThemissinglinkWithBodyWithResponse request with any body
	GetIndexThemissinglinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error)

	GetIndexThemissinglinkWithResponse(ctx context.Context, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error)

	// GetIndexThreatActorsWithBodyWithResponse request with any body
	GetIndexThreatActorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error)

	GetIndexThreatActorsWithResponse(ctx context.Context, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error)

	// GetIndexTiWithBodyWithResponse request with any body
	GetIndexTiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error)

	GetIndexTiWithResponse(ctx context.Context, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error)

	// GetIndexTibcoWithBodyWithResponse request with any body
	GetIndexTibcoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error)

	GetIndexTibcoWithResponse(ctx context.Context, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error)

	// GetIndexTpLinkWithBodyWithResponse request with any body
	GetIndexTpLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error)

	GetIndexTpLinkWithResponse(ctx context.Context, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error)

	// GetIndexTraneTechnologyWithBodyWithResponse request with any body
	GetIndexTraneTechnologyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error)

	GetIndexTraneTechnologyWithResponse(ctx context.Context, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error)

	// GetIndexTrendmicroWithBodyWithResponse request with any body
	GetIndexTrendmicroWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error)

	GetIndexTrendmicroWithResponse(ctx context.Context, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error)

	// GetIndexTrustwaveWithBodyWithResponse request with any body
	GetIndexTrustwaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error)

	GetIndexTrustwaveWithResponse(ctx context.Context, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error)

	// GetIndexTwcertWithBodyWithResponse request with any body
	GetIndexTwcertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error)

	GetIndexTwcertWithResponse(ctx context.Context, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error)

	// GetIndexUbiquitiWithBodyWithResponse request with any body
	GetIndexUbiquitiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error)

	GetIndexUbiquitiWithResponse(ctx context.Context, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error)

	// GetIndexUbuntuWithBodyWithResponse request with any body
	GetIndexUbuntuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error)

	GetIndexUbuntuWithResponse(ctx context.Context, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error)

	// GetIndexUnifyWithBodyWithResponse request with any body
	GetIndexUnifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error)

	GetIndexUnifyWithResponse(ctx context.Context, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error)

	// GetIndexUnisocWithBodyWithResponse request with any body
	GetIndexUnisocWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error)

	GetIndexUnisocWithResponse(ctx context.Context, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error)

	// GetIndexUsdWithBodyWithResponse request with any body
	GetIndexUsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error)

	GetIndexUsdWithResponse(ctx context.Context, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error)

	// GetIndexUsomWithBodyWithResponse request with any body
	GetIndexUsomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error)

	GetIndexUsomWithResponse(ctx context.Context, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error)

	// GetIndexVandykeWithBodyWithResponse request with any body
	GetIndexVandykeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error)

	GetIndexVandykeWithResponse(ctx context.Context, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error)

	// GetIndexVapidlabsWithBodyWithResponse request with any body
	GetIndexVapidlabsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error)

	GetIndexVapidlabsWithResponse(ctx context.Context, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error)

	// GetIndexVdeWithBodyWithResponse request with any body
	GetIndexVdeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error)

	GetIndexVdeWithResponse(ctx context.Context, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error)

	// GetIndexVeeamWithBodyWithResponse request with any body
	GetIndexVeeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error)

	GetIndexVeeamWithResponse(ctx context.Context, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error)

	// GetIndexVoidsecWithBodyWithResponse request with any body
	GetIndexVoidsecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error)

	GetIndexVoidsecWithResponse(ctx context.Context, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error)

	// GetIndexVulncheckConfigWithBodyWithResponse request with any body
	GetIndexVulncheckConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error)

	GetIndexVulncheckConfigWithResponse(ctx context.Context, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error)

	// GetIndexVulncheckKevWithBodyWithResponse request with any body
	GetIndexVulncheckKevWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error)

	GetIndexVulncheckKevWithResponse(ctx context.Context, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error)

	// GetIndexVulncheckNvdWithBodyWithResponse request with any body
	GetIndexVulncheckNvdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error)

	GetIndexVulncheckNvdWithResponse(ctx context.Context, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error)

	// GetIndexVulncheckNvd2WithBodyWithResponse request with any body
	GetIndexVulncheckNvd2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error)

	GetIndexVulncheckNvd2WithResponse(ctx context.Context, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error)

	// GetIndexVulnerabilityAliasesWithBodyWithResponse request with any body
	GetIndexVulnerabilityAliasesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error)

	GetIndexVulnerabilityAliasesWithResponse(ctx context.Context, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error)

	// GetIndexVyaireWithBodyWithResponse request with any body
	GetIndexVyaireWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error)

	GetIndexVyaireWithResponse(ctx context.Context, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error)

	// GetIndexWatchguardWithBodyWithResponse request with any body
	GetIndexWatchguardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error)

	GetIndexWatchguardWithResponse(ctx context.Context, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error)

	// GetIndexWhatsappWithBodyWithResponse request with any body
	GetIndexWhatsappWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error)

	GetIndexWhatsappWithResponse(ctx context.Context, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error)

	// GetIndexWibuWithBodyWithResponse request with any body
	GetIndexWibuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error)

	GetIndexWibuWithResponse(ctx context.Context, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error)

	// GetIndexWiresharkWithBodyWithResponse request with any body
	GetIndexWiresharkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error)

	GetIndexWiresharkWithResponse(ctx context.Context, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error)

	// GetIndexWithSecureWithBodyWithResponse request with any body
	GetIndexWithSecureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error)

	GetIndexWithSecureWithResponse(ctx context.Context, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error)

	// GetIndexWolfiWithBodyWithResponse request with any body
	GetIndexWolfiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error)

	GetIndexWolfiWithResponse(ctx context.Context, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error)

	// GetIndexWolfsslWithBodyWithResponse request with any body
	GetIndexWolfsslWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error)

	GetIndexWolfsslWithResponse(ctx context.Context, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error)

	// GetIndexWordfenceWithBodyWithResponse request with any body
	GetIndexWordfenceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error)

	GetIndexWordfenceWithResponse(ctx context.Context, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error)

	// GetIndexXenWithBodyWithResponse request with any body
	GetIndexXenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error)

	GetIndexXenWithResponse(ctx context.Context, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error)

	// GetIndexXeroxWithBodyWithResponse request with any body
	GetIndexXeroxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error)

	GetIndexXeroxWithResponse(ctx context.Context, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error)

	// GetIndexXiaomiWithBodyWithResponse request with any body
	GetIndexXiaomiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error)

	GetIndexXiaomiWithResponse(ctx context.Context, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error)

	// GetIndexXylemWithBodyWithResponse request with any body
	GetIndexXylemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error)

	GetIndexXylemWithResponse(ctx context.Context, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error)

	// GetIndexYokogawaWithBodyWithResponse request with any body
	GetIndexYokogawaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error)

	GetIndexYokogawaWithResponse(ctx context.Context, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error)

	// GetIndexYubicoWithBodyWithResponse request with any body
	GetIndexYubicoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error)

	GetIndexYubicoWithResponse(ctx context.Context, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error)

	// GetIndexZdiWithBodyWithResponse request with any body
	GetIndexZdiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error)

	GetIndexZdiWithResponse(ctx context.Context, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error)

	// GetIndexZeroscienceWithBodyWithResponse request with any body
	GetIndexZeroscienceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error)

	GetIndexZeroscienceWithResponse(ctx context.Context, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error)

	// GetIndexZimbraWithBodyWithResponse request with any body
	GetIndexZimbraWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error)

	GetIndexZimbraWithResponse(ctx context.Context, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error)

	// GetIndexZoomWithBodyWithResponse request with any body
	GetIndexZoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error)

	GetIndexZoomWithResponse(ctx context.Context, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error)

	// GetIndexZscalerWithBodyWithResponse request with any body
	GetIndexZscalerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error)

	GetIndexZscalerWithResponse(ctx context.Context, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error)

	// GetIndexZusoWithBodyWithResponse request with any body
	GetIndexZusoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error)

	GetIndexZusoWithResponse(ctx context.Context, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error)

	// GetIndexZyxelWithBodyWithResponse request with any body
	GetIndexZyxelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error)

	GetIndexZyxelWithResponse(ctx context.Context, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error)

	// GetOpenapiWithResponse request
	GetOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiResponse, error)

	// GetPurlWithResponse request
	GetPurlWithResponse(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*GetPurlResponse, error)

	// GetTagsVulncheckC2WithResponse request
	GetTagsVulncheckC2WithResponse(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*GetTagsVulncheckC2Response, error)
}

type GetBackupIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseV3controllersBackupResponseDataV3controllersBackupResponseMetadata
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetBackupIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCpeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseArrayStringV3controllersResponseMetadata
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetCpeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCpeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V3controllersListIndexesResponse
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexA10Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryA10PaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexA10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexA10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAbbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryABBAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAbbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAbbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAbbottResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAbbottPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAbbottResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAbbottResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAbsoluteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAbsolutePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAbsoluteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAbsoluteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAcronisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAcronisPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAcronisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAcronisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAdobeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAdobeAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAdobeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAdobeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAdvisoryRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAlephResearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAlephResearchPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAlephResearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAlephResearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAlmaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAlmaLinuxUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAlmaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAlmaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAlpineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAlpineLinuxSecDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAlpineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAlpineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAmazonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAmazonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAmazonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAmdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAMDPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAmdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAmdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAmiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAMIPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAmiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAmiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAnchoreNvdOverrideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAnchoreNVDOverridePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAnchoreNvdOverrideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAnchoreNvdOverrideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAndroidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAndroidAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAndroidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAndroidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheActivemqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheActiveMQPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheActivemqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheActivemqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheArchivaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheArchivaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheArchivaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheArchivaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheArrowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheArrowPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheArrowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheArrowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheCamelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheCamelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheCamelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheCamelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheCommonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheCommonsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheCommonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheCommonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheCouchdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheCouchDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheCouchdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheCouchdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheFlinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheFlinkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheFlinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheFlinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheGuacamoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheGuacamolePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheGuacamoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheGuacamoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheHadoopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheHadoopPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheHadoopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheHadoopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheHttpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheHTTPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheHttpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheHttpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheJspwikiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheJSPWikiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheJspwikiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheJspwikiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheKafkaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheKafkaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheKafkaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheKafkaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheLoggingservicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheLoggingServicesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheLoggingservicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheLoggingservicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheNifiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheNiFiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheNifiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheNifiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheOfbizResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheOFBizPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheOfbizResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheOfbizResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheOpenmeetingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheOpenMeetingsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheOpenmeetingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheOpenmeetingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheOpenofficeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheOpenOfficePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheOpenofficeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheOpenofficeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApachePulsarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApachePulsarPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApachePulsarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApachePulsarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheShiroResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheShiroPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheShiroResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheShiroResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheSparkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheSparkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheSparkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheSparkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheStrutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheStrutsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheStrutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheStrutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheSubversionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheSubversionPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheSubversionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheSubversionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheSupersetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheSupersetPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheSupersetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheSupersetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheTomcatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheTomcatPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheTomcatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheTomcatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexApacheZookeeperResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryApacheZooKeeperPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexApacheZookeeperResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexApacheZookeeperResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAppcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAppCheckPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAppcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAppcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAppgateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAppgatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAppgateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAppgateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAppleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAppleAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAppleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAppleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexArchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryArchIssuePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexArchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexArchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAristaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAristaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAristaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAristaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexArubaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryArubaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexArubaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexArubaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAsrgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryASRGPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAsrgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAsrgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAssetnoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAssetNotePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAssetnoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAssetnoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAsteriskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAsteriskPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAsteriskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAsteriskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAsusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAsusPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAsusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAsusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAtlassianResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAtlassianAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAtlassianResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAtlassianResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAtlassianVulnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAtlassianVulnPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAtlassianVulnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAtlassianVulnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAtredisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAtredisPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAtredisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAtredisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAuscertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAusCertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAuscertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAuscertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAutodeskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAutodeskPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAutodeskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAutodeskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAvayaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAvayaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAvayaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAvayaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAvevaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAVEVAAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAvevaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAvevaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAvigilonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAvigilonPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAvigilonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAvigilonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAwsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAWSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAwsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAwsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexAxisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAxisPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexAxisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexAxisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBandrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBandrPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBandrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBandrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBaxterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBaxterAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBaxterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBaxterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBbraunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBBraunAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBbraunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBbraunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBectonDickinsonAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBduResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBDUAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBduResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBduResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBeckhoffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBeckhoffAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBeckhoffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBeckhoffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBeldenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBeldenAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBeldenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBeldenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBeyondTrustResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBeyondTrustPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBeyondTrustResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBeyondTrustResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBinarlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBinarlyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBinarlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBinarlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBitdefenderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBitDefenderPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBitdefenderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBitdefenderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBlackberryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBlackBerryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBlackberryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBlackberryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBLSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBoschResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBoschAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBoschResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBoschResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBostonScientificResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBostonScientificAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBostonScientificResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBostonScientificResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexBotnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryBotnetPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexBotnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexBotnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCaCyberCentreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCACyberCentreAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCaCyberCentreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCaCyberCentreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCanvasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCanvasExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCanvasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCanvasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCarestreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCarestreamAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCarestreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCarestreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCargoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCargoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCargoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCarrierPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCblMarinerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCBLMarinerPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCblMarinerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCblMarinerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCentosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCESAPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCentosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCentosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertBeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCertBEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertBeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertBeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertUaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCertUAPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertUaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertUaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCerteuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCERTEUAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCerteuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCerteuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCertfrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCertFRAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCertfrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCertfrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexChainguardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryChainGuardPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexChainguardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexChainguardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCheckpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCheckPointPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCheckpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCheckpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexChromeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryChromePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexChromeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexChromeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCisaAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCISAAlertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCisaAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCisaAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCisaKevResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryKEVCatalogVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCisaKevResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCisaKevResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCiscoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCiscoAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCiscoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCiscoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCiscoTalosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTalosAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCiscoTalosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCiscoTalosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCitrixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCitrixAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCitrixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCitrixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexClarotyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryClarotyVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexClarotyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexClarotyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCloudbeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCloudBeesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCloudbeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCloudbeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCloudvulndbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCloudVulnDBAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCloudvulndbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCloudvulndbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnaCveCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseV3controllersDefaultIndexResponsePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnaCveCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnaCveCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnnvdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCNNVDEntryJSONPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnnvdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnnvdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnvdBulletinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCNVDBulletinPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnvdBulletinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnvdBulletinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCnvdFlawsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCNVDFlawPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCnvdFlawsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCnvdFlawsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCocoapodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCocoapodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCocoapodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCodesysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCodesysAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCodesysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCodesysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCompassSecurityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCompassSecurityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCompassSecurityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCompassSecurityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexComposerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexComposerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexComposerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexConanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexConanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexConanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCrestronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCrestronPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCrestronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCrestronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCurlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCurlPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCurlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCurlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexCweResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiCWEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexCweResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexCweResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDahuaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDahuaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDahuaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDahuaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDassaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDassaultPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDassaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDassaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDebianResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVulnerableDebianPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDebianResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDebianResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDebianDsaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDebianSecurityAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDebianDsaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDebianDsaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDellPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDeltaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDotcmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDotCMSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDotcmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDotcmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDragosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDragosAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDragosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDragosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexDraytekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryDraytekPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexDraytekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexDraytekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEatonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryEatonAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEatonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEatonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexElasticResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryElasticPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexElasticResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexElasticResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexElspecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryElspecPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexElspecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexElspecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEmersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryEmersonAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEmersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEmersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryEOLReleaseDataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexEpssResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiEPSSDataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexEpssResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexEpssResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExodusIntelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryExodusIntelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExodusIntelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExodusIntelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitChainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiExploitChainPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitChainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitChainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryExploitDBExploitv2PaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiExploitV3ResultPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFSecureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryFSecurePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFSecureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFSecureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFastlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryFastlyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFastlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFastlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFedoraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFedoraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFedoraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFilecloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryFileCloudPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFilecloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFilecloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexForgerockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryForgeRockPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexForgerockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexForgerockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFortinetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryFortinetAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFortinetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFortinetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexFreebsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexFreebsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexFreebsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGallagherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGallagherPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGallagherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGallagherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGcpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGCPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGcpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGcpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGeGasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGEGasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGeGasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGeGasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGeHealthcareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGEHealthcareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGeHealthcareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGeHealthcareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGenetecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGenetecPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGenetecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGenetecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGigabyteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGigabytePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGigabyteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGigabyteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGiteeExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGiteeExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGiteeExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGiteeExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGithubExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGitHubExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGithubExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGithubExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGithubSecurityAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGHAdvisoryJSONLeanPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGithubSecurityAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGithubSecurityAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGitlabAdvisoriesCommunityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGitlabAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGitlabAdvisoriesCommunityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGitlabAdvisoriesCommunityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGitlabExploitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGitLabExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGitlabExploitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGitlabExploitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGnutlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGnuTLSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGnutlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGnutlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGolangResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGolangResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGolangResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGoogle0dayItwResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryITWExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGoogle0dayItwResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGoogle0dayItwResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGoogleContainerOptimizedOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryContainerOSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGoogleContainerOptimizedOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGoogleContainerOptimizedOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGrafanaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGrafanaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGrafanaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGrafanaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexGreynoiseMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryGreyNoiseDetectionPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexGreynoiseMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexGreynoiseMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHarmonyosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHarmonyOSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHarmonyosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHarmonyosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHashicorpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHashiCorpPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHashicorpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHashicorpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHaskellSadbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHaskellSADBAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHaskellSadbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHaskellSadbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHclResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHCLPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHclResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHclResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHikvisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHIKVisionPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHikvisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHikvisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHillromResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHillromAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHillromResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHillromResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHitachiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHitachiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHitachiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHitachiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHitachiEnergyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHitachiEnergyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHitachiEnergyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHitachiEnergyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHkcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHKCertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHkcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHkcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHoneywellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHoneywellPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHoneywellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHoneywellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHuaweiEulerosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHuaweiEulerOSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHuaweiEulerosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHuaweiEulerosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHuaweiIpsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHuaweiIPSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHuaweiIpsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHuaweiIpsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexHuaweiPsirtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryHuaweiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexHuaweiPsirtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexHuaweiPsirtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIavaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIAVAPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIavaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIavaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIbmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIBMPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIbmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIbmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIdemiaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIdemiaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIdemiaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIdemiaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIlAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIsraeliAlertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIlAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIlAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIlVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIsraeliVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIlVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIlVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIncibeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIncibeAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIncibeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIncibeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiInitialAccessPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexInitialAccessGitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiInitialAccessPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexInitialAccessGitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexInitialAccessGitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIntelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIntelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIntelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIntelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel10dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel10dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel10dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel30dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel30dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel30dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel3dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel3dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel3dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIpintel90dResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIpIntelRecordPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIpintel90dResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIpintel90dResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIstioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIstioPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIstioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIstioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIvantiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIvantiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIvantiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIvantiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexIvantiRssResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryIvantiRSSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexIvantiRssResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexIvantiRssResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJenkinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryJenkinsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJenkinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJenkinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJetbrainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryJetBrainsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJetbrainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJetbrainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJfrogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryJFrogPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJfrogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJfrogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJnjResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryJNJAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJnjResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJnjResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexJvndbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryJVNAdvisoryItemPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexJvndbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexJvndbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKasperskyIcsCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryKasperskyICSCERTAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKasperskyIcsCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKasperskyIcsCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKrcertSecurityNoticesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryKRCertAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKrcertSecurityNoticesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKrcertSecurityNoticesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKrcertVulnerabilitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryKRCertAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKrcertVulnerabilitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKrcertVulnerabilitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexKubernetesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryK8SPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexKubernetesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexKubernetesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLenovoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryLenovoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLenovoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLenovoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLexmarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryLexmarkAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLexmarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLexmarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLgResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryLGPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLgResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLgResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLibreOfficeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryLibreOfficePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLibreOfficeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLibreOfficeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexLinuxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryLinuxPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexLinuxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexLinuxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMFilesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMacertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMACertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMacertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMacertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexManageengineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryManageEngineAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexManageengineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexManageengineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMavenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMavenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMavenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMbedTlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMbedTLSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMbedTlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMbedTlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMediatekResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMediatekPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMediatekResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMediatekResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMedtronicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMedtronicAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMedtronicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMedtronicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMendixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMendixPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMendixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMendixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMetasploitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMetasploitExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMetasploitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMetasploitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMicrosoftCvrfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMicrosoftCVRFPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMicrosoftCvrfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMicrosoftCvrfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMicrosoftKbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMicrosoftKbPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMicrosoftKbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMicrosoftKbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMikrotikResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMikrotikPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMikrotikResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMikrotikResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMindrayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMindrayPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMindrayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMindrayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMispThreatActorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMispValuePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMispThreatActorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMispThreatActorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMitelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitreAttackCveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiMitreAttackToCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitreAttackCveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitreAttackCveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitreCveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMitreCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitreCveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitreCveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMitsubishiElectricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMitsubishiElectricAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMitsubishiElectricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMitsubishiElectricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMongodbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMongoDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMongodbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMongodbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMoxaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMoxaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMoxaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMoxaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexMozillaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMozillaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexMozillaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexMozillaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNaverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNaverPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNaverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNaverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNECPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetappResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNetAppPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetappResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetappResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetgateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNetgatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetgateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetgateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetgearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNetgearPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetgearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetgearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNetskopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNetskopePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNetskopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNetskopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNginxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNginxAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNginxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNginxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNhsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNHSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNhsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNhsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNIPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNistNvdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiCveItemsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNistNvdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNistNvdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNistNvd2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiNVD20CVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNistNvd2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNistNvd2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNistNvd2CpematchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiNVD20CPEMatchPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNistNvd2CpematchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNistNvd2CpematchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNodeSecurityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNodeSecurityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNodeSecurityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNodeSecurityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNodejsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNodeJSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNodejsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNodejsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNokiaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNokiaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNokiaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNokiaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNozomiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNozomiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNozomiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNozomiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNpmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNpmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNpmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNugetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNugetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNugetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNvidiaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySecurityBulletinPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNvidiaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNvidiaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexNzAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryNZAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexNzAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexNzAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOctopusDeployResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOctopusDeployPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOctopusDeployResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOctopusDeployResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOktaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOktaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOktaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOktaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOmronResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOmronPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOmronResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOmronResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOneEResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOneEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOneEResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOneEResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenCvdbResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOpenCVDBPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenCvdbResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenCvdbResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenbsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOpenBSDPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenbsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenbsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpensshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOpenSSHPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpensshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpensshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpensslSecadvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOpenSSLSecAdvPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpensslSecadvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpensslSecadvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenstackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOpenStackPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenstackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenstackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOpenwrtResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWRTPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOpenwrtResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOpenwrtResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOracleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryMetaDataPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOracleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOracleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOracleCpuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOracleCPUPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOracleCpuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOracleCpuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOracleCpuCsafResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOracleCPUCSAFPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOracleCpuCsafResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOracleCpuCsafResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOsvResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOSVPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOsvResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOsvResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOtrsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOTRSPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOtrsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOtrsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexOwncloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryOwnCloudPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexOwncloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexOwncloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPalantirResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPalantirPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPalantirResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPalantirResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPaloAltoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPaloAltoAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPaloAltoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPaloAltoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPanasonicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPanasonicPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPanasonicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPanasonicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPapercutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPaperCutPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPapercutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPapercutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPegaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPegaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPegaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPegaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPhilipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPhilipsAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPhilipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPhilipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPhoenixContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPhoenixContactAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPhoenixContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPhoenixContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPostgressqlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPostgresSQLPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPostgressqlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPostgressqlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryProgressPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexProofpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryProofpointPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexProofpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexProofpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPubResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPubResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPubResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPureStorageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPureStoragePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPureStorageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPureStorageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPypaAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryPyPAAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPypaAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPypaAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexPypiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexPypiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexPypiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQnapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryQNAPAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQnapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQnapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQualcommResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryQualcommPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQualcommResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQualcommResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexQualysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryQualysPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexQualysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexQualysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRansomwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRansomwareExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRansomwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRansomwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRedhatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRedhatCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRedhatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRedhatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRenesasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRenesasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRenesasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRenesasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexReviveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRevivePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexReviveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexReviveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRockwellResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRockwellPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRockwellResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRockwellResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRockyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiUpdatePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRockyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRockyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRuckusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRuckusPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRuckusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRuckusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexRustsecAdvisoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryRustsecAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexRustsecAdvisoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexRustsecAdvisoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSacertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySAAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSacertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSacertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSaintResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySaintExploitPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSaintResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSaintResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSalesforceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySalesForcePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSalesforceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSalesforceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSambaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySambaPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSambaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSambaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySAPPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSchneiderElectricResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySchneiderElectricAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSchneiderElectricResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSchneiderElectricResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSecConsultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySECConsultPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSecConsultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSecConsultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSentineloneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySentinelOnePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSentineloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSentineloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexServicenowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryServiceNowPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexServicenowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexServicenowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexShadowserverExploitedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryShadowServerExploitedVulnerabilityPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexShadowserverExploitedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexShadowserverExploitedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySickPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSiemensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySiemensAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSiemensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSiemensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSierraWirelessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySierraWirelessPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSierraWirelessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSierraWirelessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSingcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySingCertPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSingcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSingcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSlackwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySlackwarePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSlackwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSlackwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSolarwindsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySolarWindsAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSolarwindsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSolarwindsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSolrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySolrPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSolrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSolrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSonicwallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySonicWallAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSonicwallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSonicwallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSpacelabsHealthcareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySpacelabsHealthcareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSpacelabsHealthcareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSpacelabsHealthcareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSpringResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySpringPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSpringResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSpringResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySSDAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexStormshieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryStormshieldPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexStormshieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexStormshieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexStrykerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryStrykerAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexStrykerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexStrykerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSudoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySudoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSudoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSudoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSuseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryCvrfPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSuseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSuseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSwiftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiOSSPackagePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSwiftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSwiftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSwisslogHealthcareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySwisslogHealthcareAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSwisslogHealthcareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSwisslogHealthcareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSymfonyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySymfonyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSymfonyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSymfonyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSyncrosoftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySyncroSoftPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSyncrosoftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSyncrosoftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexSynologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisorySynologyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexSynologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexSynologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTeamviewerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTeamViewerPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTeamviewerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTeamviewerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTencentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTencentPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTencentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTencentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexThalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryThalesPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexThalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexThalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexThemissinglinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTheMissingLinkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexThemissinglinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexThemissinglinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexThreatActorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryThreatActorWithExternalObjectsPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexThreatActorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexThreatActorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTIPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTibcoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTibcoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTibcoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTibcoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTpLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTPLinkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTpLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTpLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTraneTechnologyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTraneTechnologyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTraneTechnologyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTraneTechnologyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTrendmicroResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTrendMicroPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTrendmicroResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTrendmicroResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTrustwaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTrustwavePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTrustwaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTrustwaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexTwcertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryTWCertAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexTwcertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexTwcertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUbiquitiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUbiquitiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUbiquitiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUbiquitiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUbuntuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUbuntuCVEPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUbuntuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUbuntuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUnifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUnifyPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUnifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUnifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUnisocResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUnisocPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUnisocResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUnisocResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUsdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUSDPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUsdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUsdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexUsomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryUSOMAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexUsomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexUsomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVandykeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVanDykePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVandykeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVandykeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVapidlabsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVapidLabsAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVapidlabsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVapidlabsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVdeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVDEAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVdeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVdeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVeeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVeeamPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVeeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVeeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVoidsecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVoidSecPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVoidsecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVoidsecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVulnCheckConfigPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckKevResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVulnCheckKEVPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckKevResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckKevResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckNvdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiCveItemsExtendedPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckNvdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckNvdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulncheckNvd2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiNVD20CVEExtendedPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulncheckNvd2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulncheckNvd2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVulnerabilityAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseApiVulnerabilityAliasPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVulnerabilityAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVulnerabilityAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexVyaireResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryVYAIREAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexVyaireResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexVyaireResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWatchguardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWatchGuardPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWatchguardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWatchguardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWhatsappResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWhatsAppPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWhatsappResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWhatsappResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWibuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWibuPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWibuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWibuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWiresharkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWiresharkPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWiresharkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWiresharkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWithSecureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWithSecurePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWithSecureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWithSecureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWolfiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWolfiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWolfiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWolfiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWolfsslResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWolfSSLPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWolfsslResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWolfsslResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexWordfenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryWordfencePaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexWordfenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexWordfenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryXenPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXeroxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryXeroxPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXeroxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXeroxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXiaomiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryXiaomiPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXiaomiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXiaomiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexXylemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryXylemPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexXylemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexXylemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexYokogawaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryYokogawaAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexYokogawaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexYokogawaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexYubicoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryYubicoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexYubicoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexYubicoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZdiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZeroDayAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZdiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZdiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZeroscienceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZeroScienceAdvisoryPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZeroscienceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZeroscienceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZimbraResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZimbraPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZimbraResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZimbraResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZoomPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZscalerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZscalerPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZscalerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZscalerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZusoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZusoPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZusoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZusoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndexZyxelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseAdvisoryZyxelPaginatePagination
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetIndexZyxelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexZyxelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenapiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetOpenapiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPurlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FumeResponseV3controllersPurlResponseDataV3controllersPurlResponseMetadata
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetPurlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPurlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsVulncheckC2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON404      *string
	JSON500      *string
}

// Status returns HTTPResponse.Status
func (r GetTagsVulncheckC2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsVulncheckC2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBackupIndexWithResponse request returning *GetBackupIndexResponse
func (c *ClientWithResponses) GetBackupIndexWithResponse(ctx context.Context, index GetBackupIndexParamsIndex, reqEditors ...RequestEditorFn) (*GetBackupIndexResponse, error) {
	rsp, err := c.GetBackupIndex(ctx, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupIndexResponse(rsp)
}

// GetCpeWithResponse request returning *GetCpeResponse
func (c *ClientWithResponses) GetCpeWithResponse(ctx context.Context, params *GetCpeParams, reqEditors ...RequestEditorFn) (*GetCpeResponse, error) {
	rsp, err := c.GetCpe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCpeResponse(rsp)
}

// GetIndexWithResponse request returning *GetIndexResponse
func (c *ClientWithResponses) GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error) {
	rsp, err := c.GetIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexResponse(rsp)
}

// GetIndexA10WithBodyWithResponse request with arbitrary body returning *GetIndexA10Response
func (c *ClientWithResponses) GetIndexA10WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error) {
	rsp, err := c.GetIndexA10WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexA10Response(rsp)
}

func (c *ClientWithResponses) GetIndexA10WithResponse(ctx context.Context, body GetIndexA10JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexA10Response, error) {
	rsp, err := c.GetIndexA10(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexA10Response(rsp)
}

// GetIndexAbbWithBodyWithResponse request with arbitrary body returning *GetIndexAbbResponse
func (c *ClientWithResponses) GetIndexAbbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error) {
	rsp, err := c.GetIndexAbbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAbbWithResponse(ctx context.Context, body GetIndexAbbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbResponse, error) {
	rsp, err := c.GetIndexAbb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbResponse(rsp)
}

// GetIndexAbbottWithBodyWithResponse request with arbitrary body returning *GetIndexAbbottResponse
func (c *ClientWithResponses) GetIndexAbbottWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error) {
	rsp, err := c.GetIndexAbbottWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbottResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAbbottWithResponse(ctx context.Context, body GetIndexAbbottJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbbottResponse, error) {
	rsp, err := c.GetIndexAbbott(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbbottResponse(rsp)
}

// GetIndexAbsoluteWithBodyWithResponse request with arbitrary body returning *GetIndexAbsoluteResponse
func (c *ClientWithResponses) GetIndexAbsoluteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error) {
	rsp, err := c.GetIndexAbsoluteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbsoluteResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAbsoluteWithResponse(ctx context.Context, body GetIndexAbsoluteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAbsoluteResponse, error) {
	rsp, err := c.GetIndexAbsolute(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAbsoluteResponse(rsp)
}

// GetIndexAcronisWithBodyWithResponse request with arbitrary body returning *GetIndexAcronisResponse
func (c *ClientWithResponses) GetIndexAcronisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error) {
	rsp, err := c.GetIndexAcronisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAcronisResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAcronisWithResponse(ctx context.Context, body GetIndexAcronisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAcronisResponse, error) {
	rsp, err := c.GetIndexAcronis(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAcronisResponse(rsp)
}

// GetIndexAdobeWithBodyWithResponse request with arbitrary body returning *GetIndexAdobeResponse
func (c *ClientWithResponses) GetIndexAdobeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error) {
	rsp, err := c.GetIndexAdobeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdobeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAdobeWithResponse(ctx context.Context, body GetIndexAdobeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdobeResponse, error) {
	rsp, err := c.GetIndexAdobe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdobeResponse(rsp)
}

// GetIndexAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexAdvisoriesResponse
func (c *ClientWithResponses) GetIndexAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error) {
	rsp, err := c.GetIndexAdvisoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAdvisoriesWithResponse(ctx context.Context, body GetIndexAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAdvisoriesResponse, error) {
	rsp, err := c.GetIndexAdvisories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAdvisoriesResponse(rsp)
}

// GetIndexAlephResearchWithBodyWithResponse request with arbitrary body returning *GetIndexAlephResearchResponse
func (c *ClientWithResponses) GetIndexAlephResearchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error) {
	rsp, err := c.GetIndexAlephResearchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlephResearchResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAlephResearchWithResponse(ctx context.Context, body GetIndexAlephResearchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlephResearchResponse, error) {
	rsp, err := c.GetIndexAlephResearch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlephResearchResponse(rsp)
}

// GetIndexAlmaWithBodyWithResponse request with arbitrary body returning *GetIndexAlmaResponse
func (c *ClientWithResponses) GetIndexAlmaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error) {
	rsp, err := c.GetIndexAlmaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlmaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAlmaWithResponse(ctx context.Context, body GetIndexAlmaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlmaResponse, error) {
	rsp, err := c.GetIndexAlma(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlmaResponse(rsp)
}

// GetIndexAlpineWithBodyWithResponse request with arbitrary body returning *GetIndexAlpineResponse
func (c *ClientWithResponses) GetIndexAlpineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error) {
	rsp, err := c.GetIndexAlpineWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlpineResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAlpineWithResponse(ctx context.Context, body GetIndexAlpineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAlpineResponse, error) {
	rsp, err := c.GetIndexAlpine(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAlpineResponse(rsp)
}

// GetIndexAmazonWithBodyWithResponse request with arbitrary body returning *GetIndexAmazonResponse
func (c *ClientWithResponses) GetIndexAmazonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error) {
	rsp, err := c.GetIndexAmazonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmazonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAmazonWithResponse(ctx context.Context, body GetIndexAmazonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmazonResponse, error) {
	rsp, err := c.GetIndexAmazon(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmazonResponse(rsp)
}

// GetIndexAmdWithBodyWithResponse request with arbitrary body returning *GetIndexAmdResponse
func (c *ClientWithResponses) GetIndexAmdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error) {
	rsp, err := c.GetIndexAmdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAmdWithResponse(ctx context.Context, body GetIndexAmdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmdResponse, error) {
	rsp, err := c.GetIndexAmd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmdResponse(rsp)
}

// GetIndexAmiWithBodyWithResponse request with arbitrary body returning *GetIndexAmiResponse
func (c *ClientWithResponses) GetIndexAmiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error) {
	rsp, err := c.GetIndexAmiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAmiWithResponse(ctx context.Context, body GetIndexAmiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAmiResponse, error) {
	rsp, err := c.GetIndexAmi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAmiResponse(rsp)
}

// GetIndexAnchoreNvdOverrideWithBodyWithResponse request with arbitrary body returning *GetIndexAnchoreNvdOverrideResponse
func (c *ClientWithResponses) GetIndexAnchoreNvdOverrideWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error) {
	rsp, err := c.GetIndexAnchoreNvdOverrideWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAnchoreNvdOverrideResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAnchoreNvdOverrideWithResponse(ctx context.Context, body GetIndexAnchoreNvdOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAnchoreNvdOverrideResponse, error) {
	rsp, err := c.GetIndexAnchoreNvdOverride(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAnchoreNvdOverrideResponse(rsp)
}

// GetIndexAndroidWithBodyWithResponse request with arbitrary body returning *GetIndexAndroidResponse
func (c *ClientWithResponses) GetIndexAndroidWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error) {
	rsp, err := c.GetIndexAndroidWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAndroidResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAndroidWithResponse(ctx context.Context, body GetIndexAndroidJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAndroidResponse, error) {
	rsp, err := c.GetIndexAndroid(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAndroidResponse(rsp)
}

// GetIndexApacheActivemqWithBodyWithResponse request with arbitrary body returning *GetIndexApacheActivemqResponse
func (c *ClientWithResponses) GetIndexApacheActivemqWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error) {
	rsp, err := c.GetIndexApacheActivemqWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheActivemqResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheActivemqWithResponse(ctx context.Context, body GetIndexApacheActivemqJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheActivemqResponse, error) {
	rsp, err := c.GetIndexApacheActivemq(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheActivemqResponse(rsp)
}

// GetIndexApacheArchivaWithBodyWithResponse request with arbitrary body returning *GetIndexApacheArchivaResponse
func (c *ClientWithResponses) GetIndexApacheArchivaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error) {
	rsp, err := c.GetIndexApacheArchivaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArchivaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheArchivaWithResponse(ctx context.Context, body GetIndexApacheArchivaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArchivaResponse, error) {
	rsp, err := c.GetIndexApacheArchiva(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArchivaResponse(rsp)
}

// GetIndexApacheArrowWithBodyWithResponse request with arbitrary body returning *GetIndexApacheArrowResponse
func (c *ClientWithResponses) GetIndexApacheArrowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error) {
	rsp, err := c.GetIndexApacheArrowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArrowResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheArrowWithResponse(ctx context.Context, body GetIndexApacheArrowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheArrowResponse, error) {
	rsp, err := c.GetIndexApacheArrow(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheArrowResponse(rsp)
}

// GetIndexApacheCamelWithBodyWithResponse request with arbitrary body returning *GetIndexApacheCamelResponse
func (c *ClientWithResponses) GetIndexApacheCamelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error) {
	rsp, err := c.GetIndexApacheCamelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCamelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheCamelWithResponse(ctx context.Context, body GetIndexApacheCamelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCamelResponse, error) {
	rsp, err := c.GetIndexApacheCamel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCamelResponse(rsp)
}

// GetIndexApacheCommonsWithBodyWithResponse request with arbitrary body returning *GetIndexApacheCommonsResponse
func (c *ClientWithResponses) GetIndexApacheCommonsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error) {
	rsp, err := c.GetIndexApacheCommonsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCommonsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheCommonsWithResponse(ctx context.Context, body GetIndexApacheCommonsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCommonsResponse, error) {
	rsp, err := c.GetIndexApacheCommons(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCommonsResponse(rsp)
}

// GetIndexApacheCouchdbWithBodyWithResponse request with arbitrary body returning *GetIndexApacheCouchdbResponse
func (c *ClientWithResponses) GetIndexApacheCouchdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error) {
	rsp, err := c.GetIndexApacheCouchdbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCouchdbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheCouchdbWithResponse(ctx context.Context, body GetIndexApacheCouchdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheCouchdbResponse, error) {
	rsp, err := c.GetIndexApacheCouchdb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheCouchdbResponse(rsp)
}

// GetIndexApacheFlinkWithBodyWithResponse request with arbitrary body returning *GetIndexApacheFlinkResponse
func (c *ClientWithResponses) GetIndexApacheFlinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error) {
	rsp, err := c.GetIndexApacheFlinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheFlinkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheFlinkWithResponse(ctx context.Context, body GetIndexApacheFlinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheFlinkResponse, error) {
	rsp, err := c.GetIndexApacheFlink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheFlinkResponse(rsp)
}

// GetIndexApacheGuacamoleWithBodyWithResponse request with arbitrary body returning *GetIndexApacheGuacamoleResponse
func (c *ClientWithResponses) GetIndexApacheGuacamoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error) {
	rsp, err := c.GetIndexApacheGuacamoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheGuacamoleResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheGuacamoleWithResponse(ctx context.Context, body GetIndexApacheGuacamoleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheGuacamoleResponse, error) {
	rsp, err := c.GetIndexApacheGuacamole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheGuacamoleResponse(rsp)
}

// GetIndexApacheHadoopWithBodyWithResponse request with arbitrary body returning *GetIndexApacheHadoopResponse
func (c *ClientWithResponses) GetIndexApacheHadoopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error) {
	rsp, err := c.GetIndexApacheHadoopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHadoopResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheHadoopWithResponse(ctx context.Context, body GetIndexApacheHadoopJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHadoopResponse, error) {
	rsp, err := c.GetIndexApacheHadoop(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHadoopResponse(rsp)
}

// GetIndexApacheHttpWithBodyWithResponse request with arbitrary body returning *GetIndexApacheHttpResponse
func (c *ClientWithResponses) GetIndexApacheHttpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error) {
	rsp, err := c.GetIndexApacheHttpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHttpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheHttpWithResponse(ctx context.Context, body GetIndexApacheHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheHttpResponse, error) {
	rsp, err := c.GetIndexApacheHttp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheHttpResponse(rsp)
}

// GetIndexApacheJspwikiWithBodyWithResponse request with arbitrary body returning *GetIndexApacheJspwikiResponse
func (c *ClientWithResponses) GetIndexApacheJspwikiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error) {
	rsp, err := c.GetIndexApacheJspwikiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheJspwikiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheJspwikiWithResponse(ctx context.Context, body GetIndexApacheJspwikiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheJspwikiResponse, error) {
	rsp, err := c.GetIndexApacheJspwiki(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheJspwikiResponse(rsp)
}

// GetIndexApacheKafkaWithBodyWithResponse request with arbitrary body returning *GetIndexApacheKafkaResponse
func (c *ClientWithResponses) GetIndexApacheKafkaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error) {
	rsp, err := c.GetIndexApacheKafkaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheKafkaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheKafkaWithResponse(ctx context.Context, body GetIndexApacheKafkaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheKafkaResponse, error) {
	rsp, err := c.GetIndexApacheKafka(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheKafkaResponse(rsp)
}

// GetIndexApacheLoggingservicesWithBodyWithResponse request with arbitrary body returning *GetIndexApacheLoggingservicesResponse
func (c *ClientWithResponses) GetIndexApacheLoggingservicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error) {
	rsp, err := c.GetIndexApacheLoggingservicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheLoggingservicesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheLoggingservicesWithResponse(ctx context.Context, body GetIndexApacheLoggingservicesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheLoggingservicesResponse, error) {
	rsp, err := c.GetIndexApacheLoggingservices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheLoggingservicesResponse(rsp)
}

// GetIndexApacheNifiWithBodyWithResponse request with arbitrary body returning *GetIndexApacheNifiResponse
func (c *ClientWithResponses) GetIndexApacheNifiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error) {
	rsp, err := c.GetIndexApacheNifiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheNifiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheNifiWithResponse(ctx context.Context, body GetIndexApacheNifiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheNifiResponse, error) {
	rsp, err := c.GetIndexApacheNifi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheNifiResponse(rsp)
}

// GetIndexApacheOfbizWithBodyWithResponse request with arbitrary body returning *GetIndexApacheOfbizResponse
func (c *ClientWithResponses) GetIndexApacheOfbizWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error) {
	rsp, err := c.GetIndexApacheOfbizWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOfbizResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheOfbizWithResponse(ctx context.Context, body GetIndexApacheOfbizJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOfbizResponse, error) {
	rsp, err := c.GetIndexApacheOfbiz(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOfbizResponse(rsp)
}

// GetIndexApacheOpenmeetingsWithBodyWithResponse request with arbitrary body returning *GetIndexApacheOpenmeetingsResponse
func (c *ClientWithResponses) GetIndexApacheOpenmeetingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error) {
	rsp, err := c.GetIndexApacheOpenmeetingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenmeetingsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheOpenmeetingsWithResponse(ctx context.Context, body GetIndexApacheOpenmeetingsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenmeetingsResponse, error) {
	rsp, err := c.GetIndexApacheOpenmeetings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenmeetingsResponse(rsp)
}

// GetIndexApacheOpenofficeWithBodyWithResponse request with arbitrary body returning *GetIndexApacheOpenofficeResponse
func (c *ClientWithResponses) GetIndexApacheOpenofficeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error) {
	rsp, err := c.GetIndexApacheOpenofficeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenofficeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheOpenofficeWithResponse(ctx context.Context, body GetIndexApacheOpenofficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheOpenofficeResponse, error) {
	rsp, err := c.GetIndexApacheOpenoffice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheOpenofficeResponse(rsp)
}

// GetIndexApachePulsarWithBodyWithResponse request with arbitrary body returning *GetIndexApachePulsarResponse
func (c *ClientWithResponses) GetIndexApachePulsarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error) {
	rsp, err := c.GetIndexApachePulsarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApachePulsarResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApachePulsarWithResponse(ctx context.Context, body GetIndexApachePulsarJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApachePulsarResponse, error) {
	rsp, err := c.GetIndexApachePulsar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApachePulsarResponse(rsp)
}

// GetIndexApacheShiroWithBodyWithResponse request with arbitrary body returning *GetIndexApacheShiroResponse
func (c *ClientWithResponses) GetIndexApacheShiroWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error) {
	rsp, err := c.GetIndexApacheShiroWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheShiroResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheShiroWithResponse(ctx context.Context, body GetIndexApacheShiroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheShiroResponse, error) {
	rsp, err := c.GetIndexApacheShiro(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheShiroResponse(rsp)
}

// GetIndexApacheSparkWithBodyWithResponse request with arbitrary body returning *GetIndexApacheSparkResponse
func (c *ClientWithResponses) GetIndexApacheSparkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error) {
	rsp, err := c.GetIndexApacheSparkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSparkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheSparkWithResponse(ctx context.Context, body GetIndexApacheSparkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSparkResponse, error) {
	rsp, err := c.GetIndexApacheSpark(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSparkResponse(rsp)
}

// GetIndexApacheStrutsWithBodyWithResponse request with arbitrary body returning *GetIndexApacheStrutsResponse
func (c *ClientWithResponses) GetIndexApacheStrutsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error) {
	rsp, err := c.GetIndexApacheStrutsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheStrutsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheStrutsWithResponse(ctx context.Context, body GetIndexApacheStrutsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheStrutsResponse, error) {
	rsp, err := c.GetIndexApacheStruts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheStrutsResponse(rsp)
}

// GetIndexApacheSubversionWithBodyWithResponse request with arbitrary body returning *GetIndexApacheSubversionResponse
func (c *ClientWithResponses) GetIndexApacheSubversionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error) {
	rsp, err := c.GetIndexApacheSubversionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSubversionResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheSubversionWithResponse(ctx context.Context, body GetIndexApacheSubversionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSubversionResponse, error) {
	rsp, err := c.GetIndexApacheSubversion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSubversionResponse(rsp)
}

// GetIndexApacheSupersetWithBodyWithResponse request with arbitrary body returning *GetIndexApacheSupersetResponse
func (c *ClientWithResponses) GetIndexApacheSupersetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error) {
	rsp, err := c.GetIndexApacheSupersetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSupersetResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheSupersetWithResponse(ctx context.Context, body GetIndexApacheSupersetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheSupersetResponse, error) {
	rsp, err := c.GetIndexApacheSuperset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheSupersetResponse(rsp)
}

// GetIndexApacheTomcatWithBodyWithResponse request with arbitrary body returning *GetIndexApacheTomcatResponse
func (c *ClientWithResponses) GetIndexApacheTomcatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error) {
	rsp, err := c.GetIndexApacheTomcatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheTomcatResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheTomcatWithResponse(ctx context.Context, body GetIndexApacheTomcatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheTomcatResponse, error) {
	rsp, err := c.GetIndexApacheTomcat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheTomcatResponse(rsp)
}

// GetIndexApacheZookeeperWithBodyWithResponse request with arbitrary body returning *GetIndexApacheZookeeperResponse
func (c *ClientWithResponses) GetIndexApacheZookeeperWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error) {
	rsp, err := c.GetIndexApacheZookeeperWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheZookeeperResponse(rsp)
}

func (c *ClientWithResponses) GetIndexApacheZookeeperWithResponse(ctx context.Context, body GetIndexApacheZookeeperJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexApacheZookeeperResponse, error) {
	rsp, err := c.GetIndexApacheZookeeper(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexApacheZookeeperResponse(rsp)
}

// GetIndexAppcheckWithBodyWithResponse request with arbitrary body returning *GetIndexAppcheckResponse
func (c *ClientWithResponses) GetIndexAppcheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error) {
	rsp, err := c.GetIndexAppcheckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppcheckResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAppcheckWithResponse(ctx context.Context, body GetIndexAppcheckJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppcheckResponse, error) {
	rsp, err := c.GetIndexAppcheck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppcheckResponse(rsp)
}

// GetIndexAppgateWithBodyWithResponse request with arbitrary body returning *GetIndexAppgateResponse
func (c *ClientWithResponses) GetIndexAppgateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error) {
	rsp, err := c.GetIndexAppgateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppgateResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAppgateWithResponse(ctx context.Context, body GetIndexAppgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppgateResponse, error) {
	rsp, err := c.GetIndexAppgate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppgateResponse(rsp)
}

// GetIndexAppleWithBodyWithResponse request with arbitrary body returning *GetIndexAppleResponse
func (c *ClientWithResponses) GetIndexAppleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error) {
	rsp, err := c.GetIndexAppleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppleResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAppleWithResponse(ctx context.Context, body GetIndexAppleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAppleResponse, error) {
	rsp, err := c.GetIndexApple(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAppleResponse(rsp)
}

// GetIndexArchWithBodyWithResponse request with arbitrary body returning *GetIndexArchResponse
func (c *ClientWithResponses) GetIndexArchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error) {
	rsp, err := c.GetIndexArchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArchResponse(rsp)
}

func (c *ClientWithResponses) GetIndexArchWithResponse(ctx context.Context, body GetIndexArchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArchResponse, error) {
	rsp, err := c.GetIndexArch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArchResponse(rsp)
}

// GetIndexAristaWithBodyWithResponse request with arbitrary body returning *GetIndexAristaResponse
func (c *ClientWithResponses) GetIndexAristaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error) {
	rsp, err := c.GetIndexAristaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAristaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAristaWithResponse(ctx context.Context, body GetIndexAristaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAristaResponse, error) {
	rsp, err := c.GetIndexArista(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAristaResponse(rsp)
}

// GetIndexArubaWithBodyWithResponse request with arbitrary body returning *GetIndexArubaResponse
func (c *ClientWithResponses) GetIndexArubaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error) {
	rsp, err := c.GetIndexArubaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArubaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexArubaWithResponse(ctx context.Context, body GetIndexArubaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexArubaResponse, error) {
	rsp, err := c.GetIndexAruba(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexArubaResponse(rsp)
}

// GetIndexAsrgWithBodyWithResponse request with arbitrary body returning *GetIndexAsrgResponse
func (c *ClientWithResponses) GetIndexAsrgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error) {
	rsp, err := c.GetIndexAsrgWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsrgResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAsrgWithResponse(ctx context.Context, body GetIndexAsrgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsrgResponse, error) {
	rsp, err := c.GetIndexAsrg(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsrgResponse(rsp)
}

// GetIndexAssetnoteWithBodyWithResponse request with arbitrary body returning *GetIndexAssetnoteResponse
func (c *ClientWithResponses) GetIndexAssetnoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error) {
	rsp, err := c.GetIndexAssetnoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAssetnoteResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAssetnoteWithResponse(ctx context.Context, body GetIndexAssetnoteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAssetnoteResponse, error) {
	rsp, err := c.GetIndexAssetnote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAssetnoteResponse(rsp)
}

// GetIndexAsteriskWithBodyWithResponse request with arbitrary body returning *GetIndexAsteriskResponse
func (c *ClientWithResponses) GetIndexAsteriskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error) {
	rsp, err := c.GetIndexAsteriskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsteriskResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAsteriskWithResponse(ctx context.Context, body GetIndexAsteriskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsteriskResponse, error) {
	rsp, err := c.GetIndexAsterisk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsteriskResponse(rsp)
}

// GetIndexAsusWithBodyWithResponse request with arbitrary body returning *GetIndexAsusResponse
func (c *ClientWithResponses) GetIndexAsusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error) {
	rsp, err := c.GetIndexAsusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsusResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAsusWithResponse(ctx context.Context, body GetIndexAsusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAsusResponse, error) {
	rsp, err := c.GetIndexAsus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAsusResponse(rsp)
}

// GetIndexAtlassianWithBodyWithResponse request with arbitrary body returning *GetIndexAtlassianResponse
func (c *ClientWithResponses) GetIndexAtlassianWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error) {
	rsp, err := c.GetIndexAtlassianWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAtlassianWithResponse(ctx context.Context, body GetIndexAtlassianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianResponse, error) {
	rsp, err := c.GetIndexAtlassian(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianResponse(rsp)
}

// GetIndexAtlassianVulnsWithBodyWithResponse request with arbitrary body returning *GetIndexAtlassianVulnsResponse
func (c *ClientWithResponses) GetIndexAtlassianVulnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error) {
	rsp, err := c.GetIndexAtlassianVulnsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianVulnsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAtlassianVulnsWithResponse(ctx context.Context, body GetIndexAtlassianVulnsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtlassianVulnsResponse, error) {
	rsp, err := c.GetIndexAtlassianVulns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtlassianVulnsResponse(rsp)
}

// GetIndexAtredisWithBodyWithResponse request with arbitrary body returning *GetIndexAtredisResponse
func (c *ClientWithResponses) GetIndexAtredisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error) {
	rsp, err := c.GetIndexAtredisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtredisResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAtredisWithResponse(ctx context.Context, body GetIndexAtredisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAtredisResponse, error) {
	rsp, err := c.GetIndexAtredis(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAtredisResponse(rsp)
}

// GetIndexAuscertWithBodyWithResponse request with arbitrary body returning *GetIndexAuscertResponse
func (c *ClientWithResponses) GetIndexAuscertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error) {
	rsp, err := c.GetIndexAuscertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAuscertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAuscertWithResponse(ctx context.Context, body GetIndexAuscertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAuscertResponse, error) {
	rsp, err := c.GetIndexAuscert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAuscertResponse(rsp)
}

// GetIndexAutodeskWithBodyWithResponse request with arbitrary body returning *GetIndexAutodeskResponse
func (c *ClientWithResponses) GetIndexAutodeskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error) {
	rsp, err := c.GetIndexAutodeskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAutodeskResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAutodeskWithResponse(ctx context.Context, body GetIndexAutodeskJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAutodeskResponse, error) {
	rsp, err := c.GetIndexAutodesk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAutodeskResponse(rsp)
}

// GetIndexAvayaWithBodyWithResponse request with arbitrary body returning *GetIndexAvayaResponse
func (c *ClientWithResponses) GetIndexAvayaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error) {
	rsp, err := c.GetIndexAvayaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvayaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAvayaWithResponse(ctx context.Context, body GetIndexAvayaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvayaResponse, error) {
	rsp, err := c.GetIndexAvaya(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvayaResponse(rsp)
}

// GetIndexAvevaWithBodyWithResponse request with arbitrary body returning *GetIndexAvevaResponse
func (c *ClientWithResponses) GetIndexAvevaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error) {
	rsp, err := c.GetIndexAvevaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvevaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAvevaWithResponse(ctx context.Context, body GetIndexAvevaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvevaResponse, error) {
	rsp, err := c.GetIndexAveva(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvevaResponse(rsp)
}

// GetIndexAvigilonWithBodyWithResponse request with arbitrary body returning *GetIndexAvigilonResponse
func (c *ClientWithResponses) GetIndexAvigilonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error) {
	rsp, err := c.GetIndexAvigilonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvigilonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAvigilonWithResponse(ctx context.Context, body GetIndexAvigilonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAvigilonResponse, error) {
	rsp, err := c.GetIndexAvigilon(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAvigilonResponse(rsp)
}

// GetIndexAwsWithBodyWithResponse request with arbitrary body returning *GetIndexAwsResponse
func (c *ClientWithResponses) GetIndexAwsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error) {
	rsp, err := c.GetIndexAwsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAwsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAwsWithResponse(ctx context.Context, body GetIndexAwsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAwsResponse, error) {
	rsp, err := c.GetIndexAws(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAwsResponse(rsp)
}

// GetIndexAxisWithBodyWithResponse request with arbitrary body returning *GetIndexAxisResponse
func (c *ClientWithResponses) GetIndexAxisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error) {
	rsp, err := c.GetIndexAxisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAxisResponse(rsp)
}

func (c *ClientWithResponses) GetIndexAxisWithResponse(ctx context.Context, body GetIndexAxisJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexAxisResponse, error) {
	rsp, err := c.GetIndexAxis(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexAxisResponse(rsp)
}

// GetIndexBandrWithBodyWithResponse request with arbitrary body returning *GetIndexBandrResponse
func (c *ClientWithResponses) GetIndexBandrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error) {
	rsp, err := c.GetIndexBandrWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBandrResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBandrWithResponse(ctx context.Context, body GetIndexBandrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBandrResponse, error) {
	rsp, err := c.GetIndexBandr(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBandrResponse(rsp)
}

// GetIndexBaxterWithBodyWithResponse request with arbitrary body returning *GetIndexBaxterResponse
func (c *ClientWithResponses) GetIndexBaxterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error) {
	rsp, err := c.GetIndexBaxterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBaxterResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBaxterWithResponse(ctx context.Context, body GetIndexBaxterJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBaxterResponse, error) {
	rsp, err := c.GetIndexBaxter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBaxterResponse(rsp)
}

// GetIndexBbraunWithBodyWithResponse request with arbitrary body returning *GetIndexBbraunResponse
func (c *ClientWithResponses) GetIndexBbraunWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error) {
	rsp, err := c.GetIndexBbraunWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBbraunResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBbraunWithResponse(ctx context.Context, body GetIndexBbraunJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBbraunResponse, error) {
	rsp, err := c.GetIndexBbraun(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBbraunResponse(rsp)
}

// GetIndexBdWithBodyWithResponse request with arbitrary body returning *GetIndexBdResponse
func (c *ClientWithResponses) GetIndexBdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error) {
	rsp, err := c.GetIndexBdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBdWithResponse(ctx context.Context, body GetIndexBdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBdResponse, error) {
	rsp, err := c.GetIndexBd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBdResponse(rsp)
}

// GetIndexBduWithBodyWithResponse request with arbitrary body returning *GetIndexBduResponse
func (c *ClientWithResponses) GetIndexBduWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error) {
	rsp, err := c.GetIndexBduWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBduResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBduWithResponse(ctx context.Context, body GetIndexBduJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBduResponse, error) {
	rsp, err := c.GetIndexBdu(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBduResponse(rsp)
}

// GetIndexBeckhoffWithBodyWithResponse request with arbitrary body returning *GetIndexBeckhoffResponse
func (c *ClientWithResponses) GetIndexBeckhoffWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error) {
	rsp, err := c.GetIndexBeckhoffWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeckhoffResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBeckhoffWithResponse(ctx context.Context, body GetIndexBeckhoffJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeckhoffResponse, error) {
	rsp, err := c.GetIndexBeckhoff(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeckhoffResponse(rsp)
}

// GetIndexBeldenWithBodyWithResponse request with arbitrary body returning *GetIndexBeldenResponse
func (c *ClientWithResponses) GetIndexBeldenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error) {
	rsp, err := c.GetIndexBeldenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeldenResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBeldenWithResponse(ctx context.Context, body GetIndexBeldenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeldenResponse, error) {
	rsp, err := c.GetIndexBelden(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeldenResponse(rsp)
}

// GetIndexBeyondTrustWithBodyWithResponse request with arbitrary body returning *GetIndexBeyondTrustResponse
func (c *ClientWithResponses) GetIndexBeyondTrustWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error) {
	rsp, err := c.GetIndexBeyondTrustWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeyondTrustResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBeyondTrustWithResponse(ctx context.Context, body GetIndexBeyondTrustJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBeyondTrustResponse, error) {
	rsp, err := c.GetIndexBeyondTrust(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBeyondTrustResponse(rsp)
}

// GetIndexBinarlyWithBodyWithResponse request with arbitrary body returning *GetIndexBinarlyResponse
func (c *ClientWithResponses) GetIndexBinarlyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error) {
	rsp, err := c.GetIndexBinarlyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBinarlyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBinarlyWithResponse(ctx context.Context, body GetIndexBinarlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBinarlyResponse, error) {
	rsp, err := c.GetIndexBinarly(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBinarlyResponse(rsp)
}

// GetIndexBitdefenderWithBodyWithResponse request with arbitrary body returning *GetIndexBitdefenderResponse
func (c *ClientWithResponses) GetIndexBitdefenderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error) {
	rsp, err := c.GetIndexBitdefenderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBitdefenderResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBitdefenderWithResponse(ctx context.Context, body GetIndexBitdefenderJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBitdefenderResponse, error) {
	rsp, err := c.GetIndexBitdefender(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBitdefenderResponse(rsp)
}

// GetIndexBlackberryWithBodyWithResponse request with arbitrary body returning *GetIndexBlackberryResponse
func (c *ClientWithResponses) GetIndexBlackberryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error) {
	rsp, err := c.GetIndexBlackberryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlackberryResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBlackberryWithResponse(ctx context.Context, body GetIndexBlackberryJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlackberryResponse, error) {
	rsp, err := c.GetIndexBlackberry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlackberryResponse(rsp)
}

// GetIndexBlsWithBodyWithResponse request with arbitrary body returning *GetIndexBlsResponse
func (c *ClientWithResponses) GetIndexBlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error) {
	rsp, err := c.GetIndexBlsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBlsWithResponse(ctx context.Context, body GetIndexBlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBlsResponse, error) {
	rsp, err := c.GetIndexBls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBlsResponse(rsp)
}

// GetIndexBoschWithBodyWithResponse request with arbitrary body returning *GetIndexBoschResponse
func (c *ClientWithResponses) GetIndexBoschWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error) {
	rsp, err := c.GetIndexBoschWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBoschResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBoschWithResponse(ctx context.Context, body GetIndexBoschJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBoschResponse, error) {
	rsp, err := c.GetIndexBosch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBoschResponse(rsp)
}

// GetIndexBostonScientificWithBodyWithResponse request with arbitrary body returning *GetIndexBostonScientificResponse
func (c *ClientWithResponses) GetIndexBostonScientificWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error) {
	rsp, err := c.GetIndexBostonScientificWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBostonScientificResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBostonScientificWithResponse(ctx context.Context, body GetIndexBostonScientificJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBostonScientificResponse, error) {
	rsp, err := c.GetIndexBostonScientific(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBostonScientificResponse(rsp)
}

// GetIndexBotnetsWithBodyWithResponse request with arbitrary body returning *GetIndexBotnetsResponse
func (c *ClientWithResponses) GetIndexBotnetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error) {
	rsp, err := c.GetIndexBotnetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBotnetsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexBotnetsWithResponse(ctx context.Context, body GetIndexBotnetsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexBotnetsResponse, error) {
	rsp, err := c.GetIndexBotnets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexBotnetsResponse(rsp)
}

// GetIndexCaCyberCentreWithBodyWithResponse request with arbitrary body returning *GetIndexCaCyberCentreResponse
func (c *ClientWithResponses) GetIndexCaCyberCentreWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error) {
	rsp, err := c.GetIndexCaCyberCentreWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCaCyberCentreResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCaCyberCentreWithResponse(ctx context.Context, body GetIndexCaCyberCentreJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCaCyberCentreResponse, error) {
	rsp, err := c.GetIndexCaCyberCentre(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCaCyberCentreResponse(rsp)
}

// GetIndexCanvasWithBodyWithResponse request with arbitrary body returning *GetIndexCanvasResponse
func (c *ClientWithResponses) GetIndexCanvasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error) {
	rsp, err := c.GetIndexCanvasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCanvasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCanvasWithResponse(ctx context.Context, body GetIndexCanvasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCanvasResponse, error) {
	rsp, err := c.GetIndexCanvas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCanvasResponse(rsp)
}

// GetIndexCarestreamWithBodyWithResponse request with arbitrary body returning *GetIndexCarestreamResponse
func (c *ClientWithResponses) GetIndexCarestreamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error) {
	rsp, err := c.GetIndexCarestreamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarestreamResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCarestreamWithResponse(ctx context.Context, body GetIndexCarestreamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarestreamResponse, error) {
	rsp, err := c.GetIndexCarestream(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarestreamResponse(rsp)
}

// GetIndexCargoWithBodyWithResponse request with arbitrary body returning *GetIndexCargoResponse
func (c *ClientWithResponses) GetIndexCargoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error) {
	rsp, err := c.GetIndexCargoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCargoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCargoWithResponse(ctx context.Context, body GetIndexCargoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCargoResponse, error) {
	rsp, err := c.GetIndexCargo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCargoResponse(rsp)
}

// GetIndexCarrierWithBodyWithResponse request with arbitrary body returning *GetIndexCarrierResponse
func (c *ClientWithResponses) GetIndexCarrierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error) {
	rsp, err := c.GetIndexCarrierWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarrierResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCarrierWithResponse(ctx context.Context, body GetIndexCarrierJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCarrierResponse, error) {
	rsp, err := c.GetIndexCarrier(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCarrierResponse(rsp)
}

// GetIndexCblMarinerWithBodyWithResponse request with arbitrary body returning *GetIndexCblMarinerResponse
func (c *ClientWithResponses) GetIndexCblMarinerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error) {
	rsp, err := c.GetIndexCblMarinerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCblMarinerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCblMarinerWithResponse(ctx context.Context, body GetIndexCblMarinerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCblMarinerResponse, error) {
	rsp, err := c.GetIndexCblMariner(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCblMarinerResponse(rsp)
}

// GetIndexCentosWithBodyWithResponse request with arbitrary body returning *GetIndexCentosResponse
func (c *ClientWithResponses) GetIndexCentosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error) {
	rsp, err := c.GetIndexCentosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCentosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCentosWithResponse(ctx context.Context, body GetIndexCentosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCentosResponse, error) {
	rsp, err := c.GetIndexCentos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCentosResponse(rsp)
}

// GetIndexCertBeWithBodyWithResponse request with arbitrary body returning *GetIndexCertBeResponse
func (c *ClientWithResponses) GetIndexCertBeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error) {
	rsp, err := c.GetIndexCertBeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertBeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertBeWithResponse(ctx context.Context, body GetIndexCertBeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertBeResponse, error) {
	rsp, err := c.GetIndexCertBe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertBeResponse(rsp)
}

// GetIndexCertUaWithBodyWithResponse request with arbitrary body returning *GetIndexCertUaResponse
func (c *ClientWithResponses) GetIndexCertUaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error) {
	rsp, err := c.GetIndexCertUaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertUaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertUaWithResponse(ctx context.Context, body GetIndexCertUaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertUaResponse, error) {
	rsp, err := c.GetIndexCertUa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertUaResponse(rsp)
}

// GetIndexCerteuWithBodyWithResponse request with arbitrary body returning *GetIndexCerteuResponse
func (c *ClientWithResponses) GetIndexCerteuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error) {
	rsp, err := c.GetIndexCerteuWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCerteuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCerteuWithResponse(ctx context.Context, body GetIndexCerteuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCerteuResponse, error) {
	rsp, err := c.GetIndexCerteu(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCerteuResponse(rsp)
}

// GetIndexCertfrWithBodyWithResponse request with arbitrary body returning *GetIndexCertfrResponse
func (c *ClientWithResponses) GetIndexCertfrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error) {
	rsp, err := c.GetIndexCertfrWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertfrResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCertfrWithResponse(ctx context.Context, body GetIndexCertfrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCertfrResponse, error) {
	rsp, err := c.GetIndexCertfr(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCertfrResponse(rsp)
}

// GetIndexChainguardWithBodyWithResponse request with arbitrary body returning *GetIndexChainguardResponse
func (c *ClientWithResponses) GetIndexChainguardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error) {
	rsp, err := c.GetIndexChainguardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChainguardResponse(rsp)
}

func (c *ClientWithResponses) GetIndexChainguardWithResponse(ctx context.Context, body GetIndexChainguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChainguardResponse, error) {
	rsp, err := c.GetIndexChainguard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChainguardResponse(rsp)
}

// GetIndexCheckpointWithBodyWithResponse request with arbitrary body returning *GetIndexCheckpointResponse
func (c *ClientWithResponses) GetIndexCheckpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error) {
	rsp, err := c.GetIndexCheckpointWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCheckpointResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCheckpointWithResponse(ctx context.Context, body GetIndexCheckpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCheckpointResponse, error) {
	rsp, err := c.GetIndexCheckpoint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCheckpointResponse(rsp)
}

// GetIndexChromeWithBodyWithResponse request with arbitrary body returning *GetIndexChromeResponse
func (c *ClientWithResponses) GetIndexChromeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error) {
	rsp, err := c.GetIndexChromeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChromeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexChromeWithResponse(ctx context.Context, body GetIndexChromeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexChromeResponse, error) {
	rsp, err := c.GetIndexChrome(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexChromeResponse(rsp)
}

// GetIndexCisaAlertsWithBodyWithResponse request with arbitrary body returning *GetIndexCisaAlertsResponse
func (c *ClientWithResponses) GetIndexCisaAlertsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error) {
	rsp, err := c.GetIndexCisaAlertsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaAlertsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCisaAlertsWithResponse(ctx context.Context, body GetIndexCisaAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaAlertsResponse, error) {
	rsp, err := c.GetIndexCisaAlerts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaAlertsResponse(rsp)
}

// GetIndexCisaKevWithBodyWithResponse request with arbitrary body returning *GetIndexCisaKevResponse
func (c *ClientWithResponses) GetIndexCisaKevWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error) {
	rsp, err := c.GetIndexCisaKevWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaKevResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCisaKevWithResponse(ctx context.Context, body GetIndexCisaKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCisaKevResponse, error) {
	rsp, err := c.GetIndexCisaKev(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCisaKevResponse(rsp)
}

// GetIndexCiscoWithBodyWithResponse request with arbitrary body returning *GetIndexCiscoResponse
func (c *ClientWithResponses) GetIndexCiscoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error) {
	rsp, err := c.GetIndexCiscoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCiscoWithResponse(ctx context.Context, body GetIndexCiscoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoResponse, error) {
	rsp, err := c.GetIndexCisco(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoResponse(rsp)
}

// GetIndexCiscoTalosWithBodyWithResponse request with arbitrary body returning *GetIndexCiscoTalosResponse
func (c *ClientWithResponses) GetIndexCiscoTalosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error) {
	rsp, err := c.GetIndexCiscoTalosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoTalosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCiscoTalosWithResponse(ctx context.Context, body GetIndexCiscoTalosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCiscoTalosResponse, error) {
	rsp, err := c.GetIndexCiscoTalos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCiscoTalosResponse(rsp)
}

// GetIndexCitrixWithBodyWithResponse request with arbitrary body returning *GetIndexCitrixResponse
func (c *ClientWithResponses) GetIndexCitrixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error) {
	rsp, err := c.GetIndexCitrixWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCitrixResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCitrixWithResponse(ctx context.Context, body GetIndexCitrixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCitrixResponse, error) {
	rsp, err := c.GetIndexCitrix(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCitrixResponse(rsp)
}

// GetIndexClarotyWithBodyWithResponse request with arbitrary body returning *GetIndexClarotyResponse
func (c *ClientWithResponses) GetIndexClarotyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error) {
	rsp, err := c.GetIndexClarotyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexClarotyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexClarotyWithResponse(ctx context.Context, body GetIndexClarotyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexClarotyResponse, error) {
	rsp, err := c.GetIndexClaroty(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexClarotyResponse(rsp)
}

// GetIndexCloudbeesWithBodyWithResponse request with arbitrary body returning *GetIndexCloudbeesResponse
func (c *ClientWithResponses) GetIndexCloudbeesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error) {
	rsp, err := c.GetIndexCloudbeesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudbeesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCloudbeesWithResponse(ctx context.Context, body GetIndexCloudbeesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudbeesResponse, error) {
	rsp, err := c.GetIndexCloudbees(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudbeesResponse(rsp)
}

// GetIndexCloudvulndbWithBodyWithResponse request with arbitrary body returning *GetIndexCloudvulndbResponse
func (c *ClientWithResponses) GetIndexCloudvulndbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error) {
	rsp, err := c.GetIndexCloudvulndbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudvulndbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCloudvulndbWithResponse(ctx context.Context, body GetIndexCloudvulndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCloudvulndbResponse, error) {
	rsp, err := c.GetIndexCloudvulndb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCloudvulndbResponse(rsp)
}

// GetIndexCnaCveCountWithBodyWithResponse request with arbitrary body returning *GetIndexCnaCveCountResponse
func (c *ClientWithResponses) GetIndexCnaCveCountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnaCveCountResponse, error) {
	rsp, err := c.GetIndexCnaCveCountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnaCveCountResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnaCveCountWithResponse(ctx context.Context, body GetIndexCnaCveCountJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnaCveCountResponse, error) {
	rsp, err := c.GetIndexCnaCveCount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnaCveCountResponse(rsp)
}

// GetIndexCnnvdWithBodyWithResponse request with arbitrary body returning *GetIndexCnnvdResponse
func (c *ClientWithResponses) GetIndexCnnvdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error) {
	rsp, err := c.GetIndexCnnvdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnnvdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnnvdWithResponse(ctx context.Context, body GetIndexCnnvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnnvdResponse, error) {
	rsp, err := c.GetIndexCnnvd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnnvdResponse(rsp)
}

// GetIndexCnvdBulletinsWithBodyWithResponse request with arbitrary body returning *GetIndexCnvdBulletinsResponse
func (c *ClientWithResponses) GetIndexCnvdBulletinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error) {
	rsp, err := c.GetIndexCnvdBulletinsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdBulletinsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnvdBulletinsWithResponse(ctx context.Context, body GetIndexCnvdBulletinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdBulletinsResponse, error) {
	rsp, err := c.GetIndexCnvdBulletins(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdBulletinsResponse(rsp)
}

// GetIndexCnvdFlawsWithBodyWithResponse request with arbitrary body returning *GetIndexCnvdFlawsResponse
func (c *ClientWithResponses) GetIndexCnvdFlawsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error) {
	rsp, err := c.GetIndexCnvdFlawsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdFlawsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCnvdFlawsWithResponse(ctx context.Context, body GetIndexCnvdFlawsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCnvdFlawsResponse, error) {
	rsp, err := c.GetIndexCnvdFlaws(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCnvdFlawsResponse(rsp)
}

// GetIndexCocoapodsWithBodyWithResponse request with arbitrary body returning *GetIndexCocoapodsResponse
func (c *ClientWithResponses) GetIndexCocoapodsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error) {
	rsp, err := c.GetIndexCocoapodsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCocoapodsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCocoapodsWithResponse(ctx context.Context, body GetIndexCocoapodsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCocoapodsResponse, error) {
	rsp, err := c.GetIndexCocoapods(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCocoapodsResponse(rsp)
}

// GetIndexCodesysWithBodyWithResponse request with arbitrary body returning *GetIndexCodesysResponse
func (c *ClientWithResponses) GetIndexCodesysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error) {
	rsp, err := c.GetIndexCodesysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCodesysResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCodesysWithResponse(ctx context.Context, body GetIndexCodesysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCodesysResponse, error) {
	rsp, err := c.GetIndexCodesys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCodesysResponse(rsp)
}

// GetIndexCompassSecurityWithBodyWithResponse request with arbitrary body returning *GetIndexCompassSecurityResponse
func (c *ClientWithResponses) GetIndexCompassSecurityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error) {
	rsp, err := c.GetIndexCompassSecurityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCompassSecurityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCompassSecurityWithResponse(ctx context.Context, body GetIndexCompassSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCompassSecurityResponse, error) {
	rsp, err := c.GetIndexCompassSecurity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCompassSecurityResponse(rsp)
}

// GetIndexComposerWithBodyWithResponse request with arbitrary body returning *GetIndexComposerResponse
func (c *ClientWithResponses) GetIndexComposerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error) {
	rsp, err := c.GetIndexComposerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexComposerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexComposerWithResponse(ctx context.Context, body GetIndexComposerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexComposerResponse, error) {
	rsp, err := c.GetIndexComposer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexComposerResponse(rsp)
}

// GetIndexConanWithBodyWithResponse request with arbitrary body returning *GetIndexConanResponse
func (c *ClientWithResponses) GetIndexConanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error) {
	rsp, err := c.GetIndexConanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexConanResponse(rsp)
}

func (c *ClientWithResponses) GetIndexConanWithResponse(ctx context.Context, body GetIndexConanJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexConanResponse, error) {
	rsp, err := c.GetIndexConan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexConanResponse(rsp)
}

// GetIndexCrestronWithBodyWithResponse request with arbitrary body returning *GetIndexCrestronResponse
func (c *ClientWithResponses) GetIndexCrestronWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error) {
	rsp, err := c.GetIndexCrestronWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCrestronResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCrestronWithResponse(ctx context.Context, body GetIndexCrestronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCrestronResponse, error) {
	rsp, err := c.GetIndexCrestron(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCrestronResponse(rsp)
}

// GetIndexCurlWithBodyWithResponse request with arbitrary body returning *GetIndexCurlResponse
func (c *ClientWithResponses) GetIndexCurlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error) {
	rsp, err := c.GetIndexCurlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCurlResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCurlWithResponse(ctx context.Context, body GetIndexCurlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCurlResponse, error) {
	rsp, err := c.GetIndexCurl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCurlResponse(rsp)
}

// GetIndexCweWithBodyWithResponse request with arbitrary body returning *GetIndexCweResponse
func (c *ClientWithResponses) GetIndexCweWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error) {
	rsp, err := c.GetIndexCweWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCweResponse(rsp)
}

func (c *ClientWithResponses) GetIndexCweWithResponse(ctx context.Context, body GetIndexCweJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexCweResponse, error) {
	rsp, err := c.GetIndexCwe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexCweResponse(rsp)
}

// GetIndexDahuaWithBodyWithResponse request with arbitrary body returning *GetIndexDahuaResponse
func (c *ClientWithResponses) GetIndexDahuaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error) {
	rsp, err := c.GetIndexDahuaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDahuaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDahuaWithResponse(ctx context.Context, body GetIndexDahuaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDahuaResponse, error) {
	rsp, err := c.GetIndexDahua(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDahuaResponse(rsp)
}

// GetIndexDassaultWithBodyWithResponse request with arbitrary body returning *GetIndexDassaultResponse
func (c *ClientWithResponses) GetIndexDassaultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error) {
	rsp, err := c.GetIndexDassaultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDassaultResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDassaultWithResponse(ctx context.Context, body GetIndexDassaultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDassaultResponse, error) {
	rsp, err := c.GetIndexDassault(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDassaultResponse(rsp)
}

// GetIndexDebianWithBodyWithResponse request with arbitrary body returning *GetIndexDebianResponse
func (c *ClientWithResponses) GetIndexDebianWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error) {
	rsp, err := c.GetIndexDebianWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDebianWithResponse(ctx context.Context, body GetIndexDebianJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianResponse, error) {
	rsp, err := c.GetIndexDebian(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianResponse(rsp)
}

// GetIndexDebianDsaWithBodyWithResponse request with arbitrary body returning *GetIndexDebianDsaResponse
func (c *ClientWithResponses) GetIndexDebianDsaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error) {
	rsp, err := c.GetIndexDebianDsaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianDsaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDebianDsaWithResponse(ctx context.Context, body GetIndexDebianDsaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDebianDsaResponse, error) {
	rsp, err := c.GetIndexDebianDsa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDebianDsaResponse(rsp)
}

// GetIndexDellWithBodyWithResponse request with arbitrary body returning *GetIndexDellResponse
func (c *ClientWithResponses) GetIndexDellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error) {
	rsp, err := c.GetIndexDellWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDellResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDellWithResponse(ctx context.Context, body GetIndexDellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDellResponse, error) {
	rsp, err := c.GetIndexDell(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDellResponse(rsp)
}

// GetIndexDeltaWithBodyWithResponse request with arbitrary body returning *GetIndexDeltaResponse
func (c *ClientWithResponses) GetIndexDeltaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error) {
	rsp, err := c.GetIndexDeltaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDeltaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDeltaWithResponse(ctx context.Context, body GetIndexDeltaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDeltaResponse, error) {
	rsp, err := c.GetIndexDelta(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDeltaResponse(rsp)
}

// GetIndexDotcmsWithBodyWithResponse request with arbitrary body returning *GetIndexDotcmsResponse
func (c *ClientWithResponses) GetIndexDotcmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error) {
	rsp, err := c.GetIndexDotcmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDotcmsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDotcmsWithResponse(ctx context.Context, body GetIndexDotcmsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDotcmsResponse, error) {
	rsp, err := c.GetIndexDotcms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDotcmsResponse(rsp)
}

// GetIndexDragosWithBodyWithResponse request with arbitrary body returning *GetIndexDragosResponse
func (c *ClientWithResponses) GetIndexDragosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error) {
	rsp, err := c.GetIndexDragosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDragosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDragosWithResponse(ctx context.Context, body GetIndexDragosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDragosResponse, error) {
	rsp, err := c.GetIndexDragos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDragosResponse(rsp)
}

// GetIndexDraytekWithBodyWithResponse request with arbitrary body returning *GetIndexDraytekResponse
func (c *ClientWithResponses) GetIndexDraytekWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error) {
	rsp, err := c.GetIndexDraytekWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDraytekResponse(rsp)
}

func (c *ClientWithResponses) GetIndexDraytekWithResponse(ctx context.Context, body GetIndexDraytekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexDraytekResponse, error) {
	rsp, err := c.GetIndexDraytek(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexDraytekResponse(rsp)
}

// GetIndexEatonWithBodyWithResponse request with arbitrary body returning *GetIndexEatonResponse
func (c *ClientWithResponses) GetIndexEatonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error) {
	rsp, err := c.GetIndexEatonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEatonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEatonWithResponse(ctx context.Context, body GetIndexEatonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEatonResponse, error) {
	rsp, err := c.GetIndexEaton(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEatonResponse(rsp)
}

// GetIndexElasticWithBodyWithResponse request with arbitrary body returning *GetIndexElasticResponse
func (c *ClientWithResponses) GetIndexElasticWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error) {
	rsp, err := c.GetIndexElasticWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElasticResponse(rsp)
}

func (c *ClientWithResponses) GetIndexElasticWithResponse(ctx context.Context, body GetIndexElasticJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElasticResponse, error) {
	rsp, err := c.GetIndexElastic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElasticResponse(rsp)
}

// GetIndexElspecWithBodyWithResponse request with arbitrary body returning *GetIndexElspecResponse
func (c *ClientWithResponses) GetIndexElspecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error) {
	rsp, err := c.GetIndexElspecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElspecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexElspecWithResponse(ctx context.Context, body GetIndexElspecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexElspecResponse, error) {
	rsp, err := c.GetIndexElspec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexElspecResponse(rsp)
}

// GetIndexEmersonWithBodyWithResponse request with arbitrary body returning *GetIndexEmersonResponse
func (c *ClientWithResponses) GetIndexEmersonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error) {
	rsp, err := c.GetIndexEmersonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEmersonResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEmersonWithResponse(ctx context.Context, body GetIndexEmersonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEmersonResponse, error) {
	rsp, err := c.GetIndexEmerson(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEmersonResponse(rsp)
}

// GetIndexEolWithBodyWithResponse request with arbitrary body returning *GetIndexEolResponse
func (c *ClientWithResponses) GetIndexEolWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error) {
	rsp, err := c.GetIndexEolWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEolResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEolWithResponse(ctx context.Context, body GetIndexEolJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEolResponse, error) {
	rsp, err := c.GetIndexEol(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEolResponse(rsp)
}

// GetIndexEpssWithBodyWithResponse request with arbitrary body returning *GetIndexEpssResponse
func (c *ClientWithResponses) GetIndexEpssWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error) {
	rsp, err := c.GetIndexEpssWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEpssResponse(rsp)
}

func (c *ClientWithResponses) GetIndexEpssWithResponse(ctx context.Context, body GetIndexEpssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexEpssResponse, error) {
	rsp, err := c.GetIndexEpss(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexEpssResponse(rsp)
}

// GetIndexExodusIntelWithBodyWithResponse request with arbitrary body returning *GetIndexExodusIntelResponse
func (c *ClientWithResponses) GetIndexExodusIntelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error) {
	rsp, err := c.GetIndexExodusIntelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExodusIntelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExodusIntelWithResponse(ctx context.Context, body GetIndexExodusIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExodusIntelResponse, error) {
	rsp, err := c.GetIndexExodusIntel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExodusIntelResponse(rsp)
}

// GetIndexExploitChainsWithBodyWithResponse request with arbitrary body returning *GetIndexExploitChainsResponse
func (c *ClientWithResponses) GetIndexExploitChainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error) {
	rsp, err := c.GetIndexExploitChainsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitChainsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitChainsWithResponse(ctx context.Context, body GetIndexExploitChainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitChainsResponse, error) {
	rsp, err := c.GetIndexExploitChains(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitChainsResponse(rsp)
}

// GetIndexExploitdbWithBodyWithResponse request with arbitrary body returning *GetIndexExploitdbResponse
func (c *ClientWithResponses) GetIndexExploitdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error) {
	rsp, err := c.GetIndexExploitdbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitdbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitdbWithResponse(ctx context.Context, body GetIndexExploitdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitdbResponse, error) {
	rsp, err := c.GetIndexExploitdb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitdbResponse(rsp)
}

// GetIndexExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexExploitsResponse
func (c *ClientWithResponses) GetIndexExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error) {
	rsp, err := c.GetIndexExploitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexExploitsWithResponse(ctx context.Context, body GetIndexExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexExploitsResponse, error) {
	rsp, err := c.GetIndexExploits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexExploitsResponse(rsp)
}

// GetIndexFSecureWithBodyWithResponse request with arbitrary body returning *GetIndexFSecureResponse
func (c *ClientWithResponses) GetIndexFSecureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error) {
	rsp, err := c.GetIndexFSecureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFSecureResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFSecureWithResponse(ctx context.Context, body GetIndexFSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFSecureResponse, error) {
	rsp, err := c.GetIndexFSecure(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFSecureResponse(rsp)
}

// GetIndexFastlyWithBodyWithResponse request with arbitrary body returning *GetIndexFastlyResponse
func (c *ClientWithResponses) GetIndexFastlyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error) {
	rsp, err := c.GetIndexFastlyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFastlyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFastlyWithResponse(ctx context.Context, body GetIndexFastlyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFastlyResponse, error) {
	rsp, err := c.GetIndexFastly(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFastlyResponse(rsp)
}

// GetIndexFedoraWithBodyWithResponse request with arbitrary body returning *GetIndexFedoraResponse
func (c *ClientWithResponses) GetIndexFedoraWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error) {
	rsp, err := c.GetIndexFedoraWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFedoraResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFedoraWithResponse(ctx context.Context, body GetIndexFedoraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFedoraResponse, error) {
	rsp, err := c.GetIndexFedora(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFedoraResponse(rsp)
}

// GetIndexFilecloudWithBodyWithResponse request with arbitrary body returning *GetIndexFilecloudResponse
func (c *ClientWithResponses) GetIndexFilecloudWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error) {
	rsp, err := c.GetIndexFilecloudWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFilecloudResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFilecloudWithResponse(ctx context.Context, body GetIndexFilecloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFilecloudResponse, error) {
	rsp, err := c.GetIndexFilecloud(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFilecloudResponse(rsp)
}

// GetIndexForgerockWithBodyWithResponse request with arbitrary body returning *GetIndexForgerockResponse
func (c *ClientWithResponses) GetIndexForgerockWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error) {
	rsp, err := c.GetIndexForgerockWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexForgerockResponse(rsp)
}

func (c *ClientWithResponses) GetIndexForgerockWithResponse(ctx context.Context, body GetIndexForgerockJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexForgerockResponse, error) {
	rsp, err := c.GetIndexForgerock(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexForgerockResponse(rsp)
}

// GetIndexFortinetWithBodyWithResponse request with arbitrary body returning *GetIndexFortinetResponse
func (c *ClientWithResponses) GetIndexFortinetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error) {
	rsp, err := c.GetIndexFortinetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFortinetResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFortinetWithResponse(ctx context.Context, body GetIndexFortinetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFortinetResponse, error) {
	rsp, err := c.GetIndexFortinet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFortinetResponse(rsp)
}

// GetIndexFreebsdWithBodyWithResponse request with arbitrary body returning *GetIndexFreebsdResponse
func (c *ClientWithResponses) GetIndexFreebsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error) {
	rsp, err := c.GetIndexFreebsdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFreebsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexFreebsdWithResponse(ctx context.Context, body GetIndexFreebsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexFreebsdResponse, error) {
	rsp, err := c.GetIndexFreebsd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexFreebsdResponse(rsp)
}

// GetIndexGallagherWithBodyWithResponse request with arbitrary body returning *GetIndexGallagherResponse
func (c *ClientWithResponses) GetIndexGallagherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error) {
	rsp, err := c.GetIndexGallagherWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGallagherResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGallagherWithResponse(ctx context.Context, body GetIndexGallagherJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGallagherResponse, error) {
	rsp, err := c.GetIndexGallagher(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGallagherResponse(rsp)
}

// GetIndexGcpWithBodyWithResponse request with arbitrary body returning *GetIndexGcpResponse
func (c *ClientWithResponses) GetIndexGcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error) {
	rsp, err := c.GetIndexGcpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGcpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGcpWithResponse(ctx context.Context, body GetIndexGcpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGcpResponse, error) {
	rsp, err := c.GetIndexGcp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGcpResponse(rsp)
}

// GetIndexGeGasWithBodyWithResponse request with arbitrary body returning *GetIndexGeGasResponse
func (c *ClientWithResponses) GetIndexGeGasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error) {
	rsp, err := c.GetIndexGeGasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeGasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGeGasWithResponse(ctx context.Context, body GetIndexGeGasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeGasResponse, error) {
	rsp, err := c.GetIndexGeGas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeGasResponse(rsp)
}

// GetIndexGeHealthcareWithBodyWithResponse request with arbitrary body returning *GetIndexGeHealthcareResponse
func (c *ClientWithResponses) GetIndexGeHealthcareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error) {
	rsp, err := c.GetIndexGeHealthcareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeHealthcareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGeHealthcareWithResponse(ctx context.Context, body GetIndexGeHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGeHealthcareResponse, error) {
	rsp, err := c.GetIndexGeHealthcare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGeHealthcareResponse(rsp)
}

// GetIndexGemWithBodyWithResponse request with arbitrary body returning *GetIndexGemResponse
func (c *ClientWithResponses) GetIndexGemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error) {
	rsp, err := c.GetIndexGemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGemResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGemWithResponse(ctx context.Context, body GetIndexGemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGemResponse, error) {
	rsp, err := c.GetIndexGem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGemResponse(rsp)
}

// GetIndexGenetecWithBodyWithResponse request with arbitrary body returning *GetIndexGenetecResponse
func (c *ClientWithResponses) GetIndexGenetecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error) {
	rsp, err := c.GetIndexGenetecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGenetecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGenetecWithResponse(ctx context.Context, body GetIndexGenetecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGenetecResponse, error) {
	rsp, err := c.GetIndexGenetec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGenetecResponse(rsp)
}

// GetIndexGigabyteWithBodyWithResponse request with arbitrary body returning *GetIndexGigabyteResponse
func (c *ClientWithResponses) GetIndexGigabyteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error) {
	rsp, err := c.GetIndexGigabyteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGigabyteResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGigabyteWithResponse(ctx context.Context, body GetIndexGigabyteJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGigabyteResponse, error) {
	rsp, err := c.GetIndexGigabyte(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGigabyteResponse(rsp)
}

// GetIndexGiteeExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexGiteeExploitsResponse
func (c *ClientWithResponses) GetIndexGiteeExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error) {
	rsp, err := c.GetIndexGiteeExploitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGiteeExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGiteeExploitsWithResponse(ctx context.Context, body GetIndexGiteeExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGiteeExploitsResponse, error) {
	rsp, err := c.GetIndexGiteeExploits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGiteeExploitsResponse(rsp)
}

// GetIndexGithubExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexGithubExploitsResponse
func (c *ClientWithResponses) GetIndexGithubExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error) {
	rsp, err := c.GetIndexGithubExploitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGithubExploitsWithResponse(ctx context.Context, body GetIndexGithubExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubExploitsResponse, error) {
	rsp, err := c.GetIndexGithubExploits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubExploitsResponse(rsp)
}

// GetIndexGithubSecurityAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexGithubSecurityAdvisoriesResponse
func (c *ClientWithResponses) GetIndexGithubSecurityAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error) {
	rsp, err := c.GetIndexGithubSecurityAdvisoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubSecurityAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGithubSecurityAdvisoriesWithResponse(ctx context.Context, body GetIndexGithubSecurityAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGithubSecurityAdvisoriesResponse, error) {
	rsp, err := c.GetIndexGithubSecurityAdvisories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGithubSecurityAdvisoriesResponse(rsp)
}

// GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse request with arbitrary body returning *GetIndexGitlabAdvisoriesCommunityResponse
func (c *ClientWithResponses) GetIndexGitlabAdvisoriesCommunityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error) {
	rsp, err := c.GetIndexGitlabAdvisoriesCommunityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabAdvisoriesCommunityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGitlabAdvisoriesCommunityWithResponse(ctx context.Context, body GetIndexGitlabAdvisoriesCommunityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabAdvisoriesCommunityResponse, error) {
	rsp, err := c.GetIndexGitlabAdvisoriesCommunity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabAdvisoriesCommunityResponse(rsp)
}

// GetIndexGitlabExploitsWithBodyWithResponse request with arbitrary body returning *GetIndexGitlabExploitsResponse
func (c *ClientWithResponses) GetIndexGitlabExploitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error) {
	rsp, err := c.GetIndexGitlabExploitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabExploitsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGitlabExploitsWithResponse(ctx context.Context, body GetIndexGitlabExploitsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGitlabExploitsResponse, error) {
	rsp, err := c.GetIndexGitlabExploits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGitlabExploitsResponse(rsp)
}

// GetIndexGnutlsWithBodyWithResponse request with arbitrary body returning *GetIndexGnutlsResponse
func (c *ClientWithResponses) GetIndexGnutlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error) {
	rsp, err := c.GetIndexGnutlsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGnutlsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGnutlsWithResponse(ctx context.Context, body GetIndexGnutlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGnutlsResponse, error) {
	rsp, err := c.GetIndexGnutls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGnutlsResponse(rsp)
}

// GetIndexGolangWithBodyWithResponse request with arbitrary body returning *GetIndexGolangResponse
func (c *ClientWithResponses) GetIndexGolangWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error) {
	rsp, err := c.GetIndexGolangWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGolangResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGolangWithResponse(ctx context.Context, body GetIndexGolangJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGolangResponse, error) {
	rsp, err := c.GetIndexGolang(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGolangResponse(rsp)
}

// GetIndexGoogle0dayItwWithBodyWithResponse request with arbitrary body returning *GetIndexGoogle0dayItwResponse
func (c *ClientWithResponses) GetIndexGoogle0dayItwWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error) {
	rsp, err := c.GetIndexGoogle0dayItwWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogle0dayItwResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGoogle0dayItwWithResponse(ctx context.Context, body GetIndexGoogle0dayItwJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogle0dayItwResponse, error) {
	rsp, err := c.GetIndexGoogle0dayItw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogle0dayItwResponse(rsp)
}

// GetIndexGoogleContainerOptimizedOsWithBodyWithResponse request with arbitrary body returning *GetIndexGoogleContainerOptimizedOsResponse
func (c *ClientWithResponses) GetIndexGoogleContainerOptimizedOsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error) {
	rsp, err := c.GetIndexGoogleContainerOptimizedOsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogleContainerOptimizedOsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGoogleContainerOptimizedOsWithResponse(ctx context.Context, body GetIndexGoogleContainerOptimizedOsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGoogleContainerOptimizedOsResponse, error) {
	rsp, err := c.GetIndexGoogleContainerOptimizedOs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGoogleContainerOptimizedOsResponse(rsp)
}

// GetIndexGrafanaWithBodyWithResponse request with arbitrary body returning *GetIndexGrafanaResponse
func (c *ClientWithResponses) GetIndexGrafanaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error) {
	rsp, err := c.GetIndexGrafanaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGrafanaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGrafanaWithResponse(ctx context.Context, body GetIndexGrafanaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGrafanaResponse, error) {
	rsp, err := c.GetIndexGrafana(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGrafanaResponse(rsp)
}

// GetIndexGreynoiseMetadataWithBodyWithResponse request with arbitrary body returning *GetIndexGreynoiseMetadataResponse
func (c *ClientWithResponses) GetIndexGreynoiseMetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error) {
	rsp, err := c.GetIndexGreynoiseMetadataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGreynoiseMetadataResponse(rsp)
}

func (c *ClientWithResponses) GetIndexGreynoiseMetadataWithResponse(ctx context.Context, body GetIndexGreynoiseMetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexGreynoiseMetadataResponse, error) {
	rsp, err := c.GetIndexGreynoiseMetadata(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexGreynoiseMetadataResponse(rsp)
}

// GetIndexHackageWithBodyWithResponse request with arbitrary body returning *GetIndexHackageResponse
func (c *ClientWithResponses) GetIndexHackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error) {
	rsp, err := c.GetIndexHackageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHackageResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHackageWithResponse(ctx context.Context, body GetIndexHackageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHackageResponse, error) {
	rsp, err := c.GetIndexHackage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHackageResponse(rsp)
}

// GetIndexHarmonyosWithBodyWithResponse request with arbitrary body returning *GetIndexHarmonyosResponse
func (c *ClientWithResponses) GetIndexHarmonyosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error) {
	rsp, err := c.GetIndexHarmonyosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHarmonyosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHarmonyosWithResponse(ctx context.Context, body GetIndexHarmonyosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHarmonyosResponse, error) {
	rsp, err := c.GetIndexHarmonyos(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHarmonyosResponse(rsp)
}

// GetIndexHashicorpWithBodyWithResponse request with arbitrary body returning *GetIndexHashicorpResponse
func (c *ClientWithResponses) GetIndexHashicorpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error) {
	rsp, err := c.GetIndexHashicorpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHashicorpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHashicorpWithResponse(ctx context.Context, body GetIndexHashicorpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHashicorpResponse, error) {
	rsp, err := c.GetIndexHashicorp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHashicorpResponse(rsp)
}

// GetIndexHaskellSadbWithBodyWithResponse request with arbitrary body returning *GetIndexHaskellSadbResponse
func (c *ClientWithResponses) GetIndexHaskellSadbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error) {
	rsp, err := c.GetIndexHaskellSadbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHaskellSadbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHaskellSadbWithResponse(ctx context.Context, body GetIndexHaskellSadbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHaskellSadbResponse, error) {
	rsp, err := c.GetIndexHaskellSadb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHaskellSadbResponse(rsp)
}

// GetIndexHclWithBodyWithResponse request with arbitrary body returning *GetIndexHclResponse
func (c *ClientWithResponses) GetIndexHclWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error) {
	rsp, err := c.GetIndexHclWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHclResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHclWithResponse(ctx context.Context, body GetIndexHclJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHclResponse, error) {
	rsp, err := c.GetIndexHcl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHclResponse(rsp)
}

// GetIndexHexWithBodyWithResponse request with arbitrary body returning *GetIndexHexResponse
func (c *ClientWithResponses) GetIndexHexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error) {
	rsp, err := c.GetIndexHexWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHexResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHexWithResponse(ctx context.Context, body GetIndexHexJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHexResponse, error) {
	rsp, err := c.GetIndexHex(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHexResponse(rsp)
}

// GetIndexHikvisionWithBodyWithResponse request with arbitrary body returning *GetIndexHikvisionResponse
func (c *ClientWithResponses) GetIndexHikvisionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error) {
	rsp, err := c.GetIndexHikvisionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHikvisionResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHikvisionWithResponse(ctx context.Context, body GetIndexHikvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHikvisionResponse, error) {
	rsp, err := c.GetIndexHikvision(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHikvisionResponse(rsp)
}

// GetIndexHillromWithBodyWithResponse request with arbitrary body returning *GetIndexHillromResponse
func (c *ClientWithResponses) GetIndexHillromWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error) {
	rsp, err := c.GetIndexHillromWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHillromResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHillromWithResponse(ctx context.Context, body GetIndexHillromJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHillromResponse, error) {
	rsp, err := c.GetIndexHillrom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHillromResponse(rsp)
}

// GetIndexHitachiWithBodyWithResponse request with arbitrary body returning *GetIndexHitachiResponse
func (c *ClientWithResponses) GetIndexHitachiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error) {
	rsp, err := c.GetIndexHitachiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHitachiWithResponse(ctx context.Context, body GetIndexHitachiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiResponse, error) {
	rsp, err := c.GetIndexHitachi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiResponse(rsp)
}

// GetIndexHitachiEnergyWithBodyWithResponse request with arbitrary body returning *GetIndexHitachiEnergyResponse
func (c *ClientWithResponses) GetIndexHitachiEnergyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error) {
	rsp, err := c.GetIndexHitachiEnergyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiEnergyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHitachiEnergyWithResponse(ctx context.Context, body GetIndexHitachiEnergyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHitachiEnergyResponse, error) {
	rsp, err := c.GetIndexHitachiEnergy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHitachiEnergyResponse(rsp)
}

// GetIndexHkcertWithBodyWithResponse request with arbitrary body returning *GetIndexHkcertResponse
func (c *ClientWithResponses) GetIndexHkcertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error) {
	rsp, err := c.GetIndexHkcertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHkcertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHkcertWithResponse(ctx context.Context, body GetIndexHkcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHkcertResponse, error) {
	rsp, err := c.GetIndexHkcert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHkcertResponse(rsp)
}

// GetIndexHoneywellWithBodyWithResponse request with arbitrary body returning *GetIndexHoneywellResponse
func (c *ClientWithResponses) GetIndexHoneywellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error) {
	rsp, err := c.GetIndexHoneywellWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHoneywellResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHoneywellWithResponse(ctx context.Context, body GetIndexHoneywellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHoneywellResponse, error) {
	rsp, err := c.GetIndexHoneywell(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHoneywellResponse(rsp)
}

// GetIndexHpWithBodyWithResponse request with arbitrary body returning *GetIndexHpResponse
func (c *ClientWithResponses) GetIndexHpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error) {
	rsp, err := c.GetIndexHpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHpResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHpWithResponse(ctx context.Context, body GetIndexHpJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHpResponse, error) {
	rsp, err := c.GetIndexHp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHpResponse(rsp)
}

// GetIndexHuaweiEulerosWithBodyWithResponse request with arbitrary body returning *GetIndexHuaweiEulerosResponse
func (c *ClientWithResponses) GetIndexHuaweiEulerosWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error) {
	rsp, err := c.GetIndexHuaweiEulerosWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiEulerosResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHuaweiEulerosWithResponse(ctx context.Context, body GetIndexHuaweiEulerosJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiEulerosResponse, error) {
	rsp, err := c.GetIndexHuaweiEuleros(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiEulerosResponse(rsp)
}

// GetIndexHuaweiIpsWithBodyWithResponse request with arbitrary body returning *GetIndexHuaweiIpsResponse
func (c *ClientWithResponses) GetIndexHuaweiIpsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error) {
	rsp, err := c.GetIndexHuaweiIpsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiIpsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHuaweiIpsWithResponse(ctx context.Context, body GetIndexHuaweiIpsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiIpsResponse, error) {
	rsp, err := c.GetIndexHuaweiIps(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiIpsResponse(rsp)
}

// GetIndexHuaweiPsirtWithBodyWithResponse request with arbitrary body returning *GetIndexHuaweiPsirtResponse
func (c *ClientWithResponses) GetIndexHuaweiPsirtWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error) {
	rsp, err := c.GetIndexHuaweiPsirtWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiPsirtResponse(rsp)
}

func (c *ClientWithResponses) GetIndexHuaweiPsirtWithResponse(ctx context.Context, body GetIndexHuaweiPsirtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexHuaweiPsirtResponse, error) {
	rsp, err := c.GetIndexHuaweiPsirt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexHuaweiPsirtResponse(rsp)
}

// GetIndexIavaWithBodyWithResponse request with arbitrary body returning *GetIndexIavaResponse
func (c *ClientWithResponses) GetIndexIavaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error) {
	rsp, err := c.GetIndexIavaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIavaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIavaWithResponse(ctx context.Context, body GetIndexIavaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIavaResponse, error) {
	rsp, err := c.GetIndexIava(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIavaResponse(rsp)
}

// GetIndexIbmWithBodyWithResponse request with arbitrary body returning *GetIndexIbmResponse
func (c *ClientWithResponses) GetIndexIbmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error) {
	rsp, err := c.GetIndexIbmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIbmResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIbmWithResponse(ctx context.Context, body GetIndexIbmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIbmResponse, error) {
	rsp, err := c.GetIndexIbm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIbmResponse(rsp)
}

// GetIndexIdemiaWithBodyWithResponse request with arbitrary body returning *GetIndexIdemiaResponse
func (c *ClientWithResponses) GetIndexIdemiaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error) {
	rsp, err := c.GetIndexIdemiaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIdemiaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIdemiaWithResponse(ctx context.Context, body GetIndexIdemiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIdemiaResponse, error) {
	rsp, err := c.GetIndexIdemia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIdemiaResponse(rsp)
}

// GetIndexIlAlertsWithBodyWithResponse request with arbitrary body returning *GetIndexIlAlertsResponse
func (c *ClientWithResponses) GetIndexIlAlertsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error) {
	rsp, err := c.GetIndexIlAlertsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlAlertsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIlAlertsWithResponse(ctx context.Context, body GetIndexIlAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlAlertsResponse, error) {
	rsp, err := c.GetIndexIlAlerts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlAlertsResponse(rsp)
}

// GetIndexIlVulnerabilitiesWithBodyWithResponse request with arbitrary body returning *GetIndexIlVulnerabilitiesResponse
func (c *ClientWithResponses) GetIndexIlVulnerabilitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexIlVulnerabilitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlVulnerabilitiesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIlVulnerabilitiesWithResponse(ctx context.Context, body GetIndexIlVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIlVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexIlVulnerabilities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIlVulnerabilitiesResponse(rsp)
}

// GetIndexIncibeWithBodyWithResponse request with arbitrary body returning *GetIndexIncibeResponse
func (c *ClientWithResponses) GetIndexIncibeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error) {
	rsp, err := c.GetIndexIncibeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIncibeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIncibeWithResponse(ctx context.Context, body GetIndexIncibeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIncibeResponse, error) {
	rsp, err := c.GetIndexIncibe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIncibeResponse(rsp)
}

// GetIndexInitialAccessWithBodyWithResponse request with arbitrary body returning *GetIndexInitialAccessResponse
func (c *ClientWithResponses) GetIndexInitialAccessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error) {
	rsp, err := c.GetIndexInitialAccessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessResponse(rsp)
}

func (c *ClientWithResponses) GetIndexInitialAccessWithResponse(ctx context.Context, body GetIndexInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessResponse, error) {
	rsp, err := c.GetIndexInitialAccess(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessResponse(rsp)
}

// GetIndexInitialAccessGitWithBodyWithResponse request with arbitrary body returning *GetIndexInitialAccessGitResponse
func (c *ClientWithResponses) GetIndexInitialAccessGitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error) {
	rsp, err := c.GetIndexInitialAccessGitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessGitResponse(rsp)
}

func (c *ClientWithResponses) GetIndexInitialAccessGitWithResponse(ctx context.Context, body GetIndexInitialAccessGitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexInitialAccessGitResponse, error) {
	rsp, err := c.GetIndexInitialAccessGit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexInitialAccessGitResponse(rsp)
}

// GetIndexIntelWithBodyWithResponse request with arbitrary body returning *GetIndexIntelResponse
func (c *ClientWithResponses) GetIndexIntelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error) {
	rsp, err := c.GetIndexIntelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIntelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIntelWithResponse(ctx context.Context, body GetIndexIntelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIntelResponse, error) {
	rsp, err := c.GetIndexIntel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIntelResponse(rsp)
}

// GetIndexIpintel10dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel10dResponse
func (c *ClientWithResponses) GetIndexIpintel10dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error) {
	rsp, err := c.GetIndexIpintel10dWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel10dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel10dWithResponse(ctx context.Context, body GetIndexIpintel10dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel10dResponse, error) {
	rsp, err := c.GetIndexIpintel10d(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel10dResponse(rsp)
}

// GetIndexIpintel30dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel30dResponse
func (c *ClientWithResponses) GetIndexIpintel30dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error) {
	rsp, err := c.GetIndexIpintel30dWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel30dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel30dWithResponse(ctx context.Context, body GetIndexIpintel30dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel30dResponse, error) {
	rsp, err := c.GetIndexIpintel30d(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel30dResponse(rsp)
}

// GetIndexIpintel3dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel3dResponse
func (c *ClientWithResponses) GetIndexIpintel3dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error) {
	rsp, err := c.GetIndexIpintel3dWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel3dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel3dWithResponse(ctx context.Context, body GetIndexIpintel3dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel3dResponse, error) {
	rsp, err := c.GetIndexIpintel3d(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel3dResponse(rsp)
}

// GetIndexIpintel90dWithBodyWithResponse request with arbitrary body returning *GetIndexIpintel90dResponse
func (c *ClientWithResponses) GetIndexIpintel90dWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error) {
	rsp, err := c.GetIndexIpintel90dWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel90dResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIpintel90dWithResponse(ctx context.Context, body GetIndexIpintel90dJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIpintel90dResponse, error) {
	rsp, err := c.GetIndexIpintel90d(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIpintel90dResponse(rsp)
}

// GetIndexIstioWithBodyWithResponse request with arbitrary body returning *GetIndexIstioResponse
func (c *ClientWithResponses) GetIndexIstioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error) {
	rsp, err := c.GetIndexIstioWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIstioResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIstioWithResponse(ctx context.Context, body GetIndexIstioJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIstioResponse, error) {
	rsp, err := c.GetIndexIstio(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIstioResponse(rsp)
}

// GetIndexIvantiWithBodyWithResponse request with arbitrary body returning *GetIndexIvantiResponse
func (c *ClientWithResponses) GetIndexIvantiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error) {
	rsp, err := c.GetIndexIvantiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIvantiWithResponse(ctx context.Context, body GetIndexIvantiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiResponse, error) {
	rsp, err := c.GetIndexIvanti(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiResponse(rsp)
}

// GetIndexIvantiRssWithBodyWithResponse request with arbitrary body returning *GetIndexIvantiRssResponse
func (c *ClientWithResponses) GetIndexIvantiRssWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error) {
	rsp, err := c.GetIndexIvantiRssWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiRssResponse(rsp)
}

func (c *ClientWithResponses) GetIndexIvantiRssWithResponse(ctx context.Context, body GetIndexIvantiRssJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexIvantiRssResponse, error) {
	rsp, err := c.GetIndexIvantiRss(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexIvantiRssResponse(rsp)
}

// GetIndexJenkinsWithBodyWithResponse request with arbitrary body returning *GetIndexJenkinsResponse
func (c *ClientWithResponses) GetIndexJenkinsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error) {
	rsp, err := c.GetIndexJenkinsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJenkinsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJenkinsWithResponse(ctx context.Context, body GetIndexJenkinsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJenkinsResponse, error) {
	rsp, err := c.GetIndexJenkins(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJenkinsResponse(rsp)
}

// GetIndexJetbrainsWithBodyWithResponse request with arbitrary body returning *GetIndexJetbrainsResponse
func (c *ClientWithResponses) GetIndexJetbrainsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error) {
	rsp, err := c.GetIndexJetbrainsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJetbrainsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJetbrainsWithResponse(ctx context.Context, body GetIndexJetbrainsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJetbrainsResponse, error) {
	rsp, err := c.GetIndexJetbrains(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJetbrainsResponse(rsp)
}

// GetIndexJfrogWithBodyWithResponse request with arbitrary body returning *GetIndexJfrogResponse
func (c *ClientWithResponses) GetIndexJfrogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error) {
	rsp, err := c.GetIndexJfrogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJfrogResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJfrogWithResponse(ctx context.Context, body GetIndexJfrogJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJfrogResponse, error) {
	rsp, err := c.GetIndexJfrog(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJfrogResponse(rsp)
}

// GetIndexJnjWithBodyWithResponse request with arbitrary body returning *GetIndexJnjResponse
func (c *ClientWithResponses) GetIndexJnjWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error) {
	rsp, err := c.GetIndexJnjWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJnjResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJnjWithResponse(ctx context.Context, body GetIndexJnjJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJnjResponse, error) {
	rsp, err := c.GetIndexJnj(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJnjResponse(rsp)
}

// GetIndexJvndbWithBodyWithResponse request with arbitrary body returning *GetIndexJvndbResponse
func (c *ClientWithResponses) GetIndexJvndbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error) {
	rsp, err := c.GetIndexJvndbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJvndbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexJvndbWithResponse(ctx context.Context, body GetIndexJvndbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexJvndbResponse, error) {
	rsp, err := c.GetIndexJvndb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexJvndbResponse(rsp)
}

// GetIndexKasperskyIcsCertWithBodyWithResponse request with arbitrary body returning *GetIndexKasperskyIcsCertResponse
func (c *ClientWithResponses) GetIndexKasperskyIcsCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error) {
	rsp, err := c.GetIndexKasperskyIcsCertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKasperskyIcsCertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKasperskyIcsCertWithResponse(ctx context.Context, body GetIndexKasperskyIcsCertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKasperskyIcsCertResponse, error) {
	rsp, err := c.GetIndexKasperskyIcsCert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKasperskyIcsCertResponse(rsp)
}

// GetIndexKrcertSecurityNoticesWithBodyWithResponse request with arbitrary body returning *GetIndexKrcertSecurityNoticesResponse
func (c *ClientWithResponses) GetIndexKrcertSecurityNoticesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error) {
	rsp, err := c.GetIndexKrcertSecurityNoticesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertSecurityNoticesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKrcertSecurityNoticesWithResponse(ctx context.Context, body GetIndexKrcertSecurityNoticesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertSecurityNoticesResponse, error) {
	rsp, err := c.GetIndexKrcertSecurityNotices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertSecurityNoticesResponse(rsp)
}

// GetIndexKrcertVulnerabilitiesWithBodyWithResponse request with arbitrary body returning *GetIndexKrcertVulnerabilitiesResponse
func (c *ClientWithResponses) GetIndexKrcertVulnerabilitiesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexKrcertVulnerabilitiesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertVulnerabilitiesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKrcertVulnerabilitiesWithResponse(ctx context.Context, body GetIndexKrcertVulnerabilitiesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKrcertVulnerabilitiesResponse, error) {
	rsp, err := c.GetIndexKrcertVulnerabilities(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKrcertVulnerabilitiesResponse(rsp)
}

// GetIndexKubernetesWithBodyWithResponse request with arbitrary body returning *GetIndexKubernetesResponse
func (c *ClientWithResponses) GetIndexKubernetesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error) {
	rsp, err := c.GetIndexKubernetesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKubernetesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexKubernetesWithResponse(ctx context.Context, body GetIndexKubernetesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexKubernetesResponse, error) {
	rsp, err := c.GetIndexKubernetes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexKubernetesResponse(rsp)
}

// GetIndexLenovoWithBodyWithResponse request with arbitrary body returning *GetIndexLenovoResponse
func (c *ClientWithResponses) GetIndexLenovoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error) {
	rsp, err := c.GetIndexLenovoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLenovoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLenovoWithResponse(ctx context.Context, body GetIndexLenovoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLenovoResponse, error) {
	rsp, err := c.GetIndexLenovo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLenovoResponse(rsp)
}

// GetIndexLexmarkWithBodyWithResponse request with arbitrary body returning *GetIndexLexmarkResponse
func (c *ClientWithResponses) GetIndexLexmarkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error) {
	rsp, err := c.GetIndexLexmarkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLexmarkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLexmarkWithResponse(ctx context.Context, body GetIndexLexmarkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLexmarkResponse, error) {
	rsp, err := c.GetIndexLexmark(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLexmarkResponse(rsp)
}

// GetIndexLgWithBodyWithResponse request with arbitrary body returning *GetIndexLgResponse
func (c *ClientWithResponses) GetIndexLgWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error) {
	rsp, err := c.GetIndexLgWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLgResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLgWithResponse(ctx context.Context, body GetIndexLgJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLgResponse, error) {
	rsp, err := c.GetIndexLg(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLgResponse(rsp)
}

// GetIndexLibreOfficeWithBodyWithResponse request with arbitrary body returning *GetIndexLibreOfficeResponse
func (c *ClientWithResponses) GetIndexLibreOfficeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error) {
	rsp, err := c.GetIndexLibreOfficeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLibreOfficeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLibreOfficeWithResponse(ctx context.Context, body GetIndexLibreOfficeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLibreOfficeResponse, error) {
	rsp, err := c.GetIndexLibreOffice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLibreOfficeResponse(rsp)
}

// GetIndexLinuxWithBodyWithResponse request with arbitrary body returning *GetIndexLinuxResponse
func (c *ClientWithResponses) GetIndexLinuxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error) {
	rsp, err := c.GetIndexLinuxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLinuxResponse(rsp)
}

func (c *ClientWithResponses) GetIndexLinuxWithResponse(ctx context.Context, body GetIndexLinuxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexLinuxResponse, error) {
	rsp, err := c.GetIndexLinux(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexLinuxResponse(rsp)
}

// GetIndexMFilesWithBodyWithResponse request with arbitrary body returning *GetIndexMFilesResponse
func (c *ClientWithResponses) GetIndexMFilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error) {
	rsp, err := c.GetIndexMFilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMFilesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMFilesWithResponse(ctx context.Context, body GetIndexMFilesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMFilesResponse, error) {
	rsp, err := c.GetIndexMFiles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMFilesResponse(rsp)
}

// GetIndexMacertWithBodyWithResponse request with arbitrary body returning *GetIndexMacertResponse
func (c *ClientWithResponses) GetIndexMacertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error) {
	rsp, err := c.GetIndexMacertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMacertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMacertWithResponse(ctx context.Context, body GetIndexMacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMacertResponse, error) {
	rsp, err := c.GetIndexMacert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMacertResponse(rsp)
}

// GetIndexManageengineWithBodyWithResponse request with arbitrary body returning *GetIndexManageengineResponse
func (c *ClientWithResponses) GetIndexManageengineWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error) {
	rsp, err := c.GetIndexManageengineWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexManageengineResponse(rsp)
}

func (c *ClientWithResponses) GetIndexManageengineWithResponse(ctx context.Context, body GetIndexManageengineJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexManageengineResponse, error) {
	rsp, err := c.GetIndexManageengine(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexManageengineResponse(rsp)
}

// GetIndexMavenWithBodyWithResponse request with arbitrary body returning *GetIndexMavenResponse
func (c *ClientWithResponses) GetIndexMavenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error) {
	rsp, err := c.GetIndexMavenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMavenResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMavenWithResponse(ctx context.Context, body GetIndexMavenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMavenResponse, error) {
	rsp, err := c.GetIndexMaven(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMavenResponse(rsp)
}

// GetIndexMbedTlsWithBodyWithResponse request with arbitrary body returning *GetIndexMbedTlsResponse
func (c *ClientWithResponses) GetIndexMbedTlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error) {
	rsp, err := c.GetIndexMbedTlsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMbedTlsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMbedTlsWithResponse(ctx context.Context, body GetIndexMbedTlsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMbedTlsResponse, error) {
	rsp, err := c.GetIndexMbedTls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMbedTlsResponse(rsp)
}

// GetIndexMediatekWithBodyWithResponse request with arbitrary body returning *GetIndexMediatekResponse
func (c *ClientWithResponses) GetIndexMediatekWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error) {
	rsp, err := c.GetIndexMediatekWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMediatekResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMediatekWithResponse(ctx context.Context, body GetIndexMediatekJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMediatekResponse, error) {
	rsp, err := c.GetIndexMediatek(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMediatekResponse(rsp)
}

// GetIndexMedtronicWithBodyWithResponse request with arbitrary body returning *GetIndexMedtronicResponse
func (c *ClientWithResponses) GetIndexMedtronicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error) {
	rsp, err := c.GetIndexMedtronicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMedtronicResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMedtronicWithResponse(ctx context.Context, body GetIndexMedtronicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMedtronicResponse, error) {
	rsp, err := c.GetIndexMedtronic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMedtronicResponse(rsp)
}

// GetIndexMendixWithBodyWithResponse request with arbitrary body returning *GetIndexMendixResponse
func (c *ClientWithResponses) GetIndexMendixWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error) {
	rsp, err := c.GetIndexMendixWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMendixResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMendixWithResponse(ctx context.Context, body GetIndexMendixJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMendixResponse, error) {
	rsp, err := c.GetIndexMendix(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMendixResponse(rsp)
}

// GetIndexMetasploitWithBodyWithResponse request with arbitrary body returning *GetIndexMetasploitResponse
func (c *ClientWithResponses) GetIndexMetasploitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error) {
	rsp, err := c.GetIndexMetasploitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMetasploitResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMetasploitWithResponse(ctx context.Context, body GetIndexMetasploitJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMetasploitResponse, error) {
	rsp, err := c.GetIndexMetasploit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMetasploitResponse(rsp)
}

// GetIndexMicrosoftCvrfWithBodyWithResponse request with arbitrary body returning *GetIndexMicrosoftCvrfResponse
func (c *ClientWithResponses) GetIndexMicrosoftCvrfWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error) {
	rsp, err := c.GetIndexMicrosoftCvrfWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftCvrfResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMicrosoftCvrfWithResponse(ctx context.Context, body GetIndexMicrosoftCvrfJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftCvrfResponse, error) {
	rsp, err := c.GetIndexMicrosoftCvrf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftCvrfResponse(rsp)
}

// GetIndexMicrosoftKbWithBodyWithResponse request with arbitrary body returning *GetIndexMicrosoftKbResponse
func (c *ClientWithResponses) GetIndexMicrosoftKbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error) {
	rsp, err := c.GetIndexMicrosoftKbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftKbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMicrosoftKbWithResponse(ctx context.Context, body GetIndexMicrosoftKbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMicrosoftKbResponse, error) {
	rsp, err := c.GetIndexMicrosoftKb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMicrosoftKbResponse(rsp)
}

// GetIndexMikrotikWithBodyWithResponse request with arbitrary body returning *GetIndexMikrotikResponse
func (c *ClientWithResponses) GetIndexMikrotikWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error) {
	rsp, err := c.GetIndexMikrotikWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMikrotikResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMikrotikWithResponse(ctx context.Context, body GetIndexMikrotikJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMikrotikResponse, error) {
	rsp, err := c.GetIndexMikrotik(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMikrotikResponse(rsp)
}

// GetIndexMindrayWithBodyWithResponse request with arbitrary body returning *GetIndexMindrayResponse
func (c *ClientWithResponses) GetIndexMindrayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error) {
	rsp, err := c.GetIndexMindrayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMindrayResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMindrayWithResponse(ctx context.Context, body GetIndexMindrayJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMindrayResponse, error) {
	rsp, err := c.GetIndexMindray(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMindrayResponse(rsp)
}

// GetIndexMispThreatActorsWithBodyWithResponse request with arbitrary body returning *GetIndexMispThreatActorsResponse
func (c *ClientWithResponses) GetIndexMispThreatActorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error) {
	rsp, err := c.GetIndexMispThreatActorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMispThreatActorsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMispThreatActorsWithResponse(ctx context.Context, body GetIndexMispThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMispThreatActorsResponse, error) {
	rsp, err := c.GetIndexMispThreatActors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMispThreatActorsResponse(rsp)
}

// GetIndexMitelWithBodyWithResponse request with arbitrary body returning *GetIndexMitelResponse
func (c *ClientWithResponses) GetIndexMitelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error) {
	rsp, err := c.GetIndexMitelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitelWithResponse(ctx context.Context, body GetIndexMitelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitelResponse, error) {
	rsp, err := c.GetIndexMitel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitelResponse(rsp)
}

// GetIndexMitreAttackCveWithBodyWithResponse request with arbitrary body returning *GetIndexMitreAttackCveResponse
func (c *ClientWithResponses) GetIndexMitreAttackCveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error) {
	rsp, err := c.GetIndexMitreAttackCveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreAttackCveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitreAttackCveWithResponse(ctx context.Context, body GetIndexMitreAttackCveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreAttackCveResponse, error) {
	rsp, err := c.GetIndexMitreAttackCve(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreAttackCveResponse(rsp)
}

// GetIndexMitreCveWithBodyWithResponse request with arbitrary body returning *GetIndexMitreCveResponse
func (c *ClientWithResponses) GetIndexMitreCveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitreCveResponse, error) {
	rsp, err := c.GetIndexMitreCveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreCveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitreCveWithResponse(ctx context.Context, body GetIndexMitreCveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitreCveResponse, error) {
	rsp, err := c.GetIndexMitreCve(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitreCveResponse(rsp)
}

// GetIndexMitsubishiElectricWithBodyWithResponse request with arbitrary body returning *GetIndexMitsubishiElectricResponse
func (c *ClientWithResponses) GetIndexMitsubishiElectricWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error) {
	rsp, err := c.GetIndexMitsubishiElectricWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitsubishiElectricResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMitsubishiElectricWithResponse(ctx context.Context, body GetIndexMitsubishiElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMitsubishiElectricResponse, error) {
	rsp, err := c.GetIndexMitsubishiElectric(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMitsubishiElectricResponse(rsp)
}

// GetIndexMongodbWithBodyWithResponse request with arbitrary body returning *GetIndexMongodbResponse
func (c *ClientWithResponses) GetIndexMongodbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error) {
	rsp, err := c.GetIndexMongodbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMongodbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMongodbWithResponse(ctx context.Context, body GetIndexMongodbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMongodbResponse, error) {
	rsp, err := c.GetIndexMongodb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMongodbResponse(rsp)
}

// GetIndexMoxaWithBodyWithResponse request with arbitrary body returning *GetIndexMoxaResponse
func (c *ClientWithResponses) GetIndexMoxaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error) {
	rsp, err := c.GetIndexMoxaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMoxaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMoxaWithResponse(ctx context.Context, body GetIndexMoxaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMoxaResponse, error) {
	rsp, err := c.GetIndexMoxa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMoxaResponse(rsp)
}

// GetIndexMozillaWithBodyWithResponse request with arbitrary body returning *GetIndexMozillaResponse
func (c *ClientWithResponses) GetIndexMozillaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error) {
	rsp, err := c.GetIndexMozillaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMozillaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexMozillaWithResponse(ctx context.Context, body GetIndexMozillaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexMozillaResponse, error) {
	rsp, err := c.GetIndexMozilla(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexMozillaResponse(rsp)
}

// GetIndexNaverWithBodyWithResponse request with arbitrary body returning *GetIndexNaverResponse
func (c *ClientWithResponses) GetIndexNaverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error) {
	rsp, err := c.GetIndexNaverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNaverResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNaverWithResponse(ctx context.Context, body GetIndexNaverJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNaverResponse, error) {
	rsp, err := c.GetIndexNaver(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNaverResponse(rsp)
}

// GetIndexNecWithBodyWithResponse request with arbitrary body returning *GetIndexNecResponse
func (c *ClientWithResponses) GetIndexNecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error) {
	rsp, err := c.GetIndexNecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNecWithResponse(ctx context.Context, body GetIndexNecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNecResponse, error) {
	rsp, err := c.GetIndexNec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNecResponse(rsp)
}

// GetIndexNetappWithBodyWithResponse request with arbitrary body returning *GetIndexNetappResponse
func (c *ClientWithResponses) GetIndexNetappWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error) {
	rsp, err := c.GetIndexNetappWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetappResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetappWithResponse(ctx context.Context, body GetIndexNetappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetappResponse, error) {
	rsp, err := c.GetIndexNetapp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetappResponse(rsp)
}

// GetIndexNetgateWithBodyWithResponse request with arbitrary body returning *GetIndexNetgateResponse
func (c *ClientWithResponses) GetIndexNetgateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error) {
	rsp, err := c.GetIndexNetgateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgateResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetgateWithResponse(ctx context.Context, body GetIndexNetgateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgateResponse, error) {
	rsp, err := c.GetIndexNetgate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgateResponse(rsp)
}

// GetIndexNetgearWithBodyWithResponse request with arbitrary body returning *GetIndexNetgearResponse
func (c *ClientWithResponses) GetIndexNetgearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error) {
	rsp, err := c.GetIndexNetgearWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgearResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetgearWithResponse(ctx context.Context, body GetIndexNetgearJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetgearResponse, error) {
	rsp, err := c.GetIndexNetgear(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetgearResponse(rsp)
}

// GetIndexNetskopeWithBodyWithResponse request with arbitrary body returning *GetIndexNetskopeResponse
func (c *ClientWithResponses) GetIndexNetskopeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error) {
	rsp, err := c.GetIndexNetskopeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetskopeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNetskopeWithResponse(ctx context.Context, body GetIndexNetskopeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNetskopeResponse, error) {
	rsp, err := c.GetIndexNetskope(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNetskopeResponse(rsp)
}

// GetIndexNginxWithBodyWithResponse request with arbitrary body returning *GetIndexNginxResponse
func (c *ClientWithResponses) GetIndexNginxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error) {
	rsp, err := c.GetIndexNginxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNginxResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNginxWithResponse(ctx context.Context, body GetIndexNginxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNginxResponse, error) {
	rsp, err := c.GetIndexNginx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNginxResponse(rsp)
}

// GetIndexNhsWithBodyWithResponse request with arbitrary body returning *GetIndexNhsResponse
func (c *ClientWithResponses) GetIndexNhsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error) {
	rsp, err := c.GetIndexNhsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNhsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNhsWithResponse(ctx context.Context, body GetIndexNhsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNhsResponse, error) {
	rsp, err := c.GetIndexNhs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNhsResponse(rsp)
}

// GetIndexNiWithBodyWithResponse request with arbitrary body returning *GetIndexNiResponse
func (c *ClientWithResponses) GetIndexNiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error) {
	rsp, err := c.GetIndexNiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNiWithResponse(ctx context.Context, body GetIndexNiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNiResponse, error) {
	rsp, err := c.GetIndexNi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNiResponse(rsp)
}

// GetIndexNistNvdWithBodyWithResponse request with arbitrary body returning *GetIndexNistNvdResponse
func (c *ClientWithResponses) GetIndexNistNvdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error) {
	rsp, err := c.GetIndexNistNvdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNistNvdWithResponse(ctx context.Context, body GetIndexNistNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvdResponse, error) {
	rsp, err := c.GetIndexNistNvd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvdResponse(rsp)
}

// GetIndexNistNvd2WithBodyWithResponse request with arbitrary body returning *GetIndexNistNvd2Response
func (c *ClientWithResponses) GetIndexNistNvd2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error) {
	rsp, err := c.GetIndexNistNvd2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2Response(rsp)
}

func (c *ClientWithResponses) GetIndexNistNvd2WithResponse(ctx context.Context, body GetIndexNistNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2Response, error) {
	rsp, err := c.GetIndexNistNvd2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2Response(rsp)
}

// GetIndexNistNvd2CpematchWithBodyWithResponse request with arbitrary body returning *GetIndexNistNvd2CpematchResponse
func (c *ClientWithResponses) GetIndexNistNvd2CpematchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error) {
	rsp, err := c.GetIndexNistNvd2CpematchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2CpematchResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNistNvd2CpematchWithResponse(ctx context.Context, body GetIndexNistNvd2CpematchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNistNvd2CpematchResponse, error) {
	rsp, err := c.GetIndexNistNvd2Cpematch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNistNvd2CpematchResponse(rsp)
}

// GetIndexNodeSecurityWithBodyWithResponse request with arbitrary body returning *GetIndexNodeSecurityResponse
func (c *ClientWithResponses) GetIndexNodeSecurityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error) {
	rsp, err := c.GetIndexNodeSecurityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodeSecurityResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNodeSecurityWithResponse(ctx context.Context, body GetIndexNodeSecurityJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodeSecurityResponse, error) {
	rsp, err := c.GetIndexNodeSecurity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodeSecurityResponse(rsp)
}

// GetIndexNodejsWithBodyWithResponse request with arbitrary body returning *GetIndexNodejsResponse
func (c *ClientWithResponses) GetIndexNodejsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error) {
	rsp, err := c.GetIndexNodejsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodejsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNodejsWithResponse(ctx context.Context, body GetIndexNodejsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNodejsResponse, error) {
	rsp, err := c.GetIndexNodejs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNodejsResponse(rsp)
}

// GetIndexNokiaWithBodyWithResponse request with arbitrary body returning *GetIndexNokiaResponse
func (c *ClientWithResponses) GetIndexNokiaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error) {
	rsp, err := c.GetIndexNokiaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNokiaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNokiaWithResponse(ctx context.Context, body GetIndexNokiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNokiaResponse, error) {
	rsp, err := c.GetIndexNokia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNokiaResponse(rsp)
}

// GetIndexNozomiWithBodyWithResponse request with arbitrary body returning *GetIndexNozomiResponse
func (c *ClientWithResponses) GetIndexNozomiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error) {
	rsp, err := c.GetIndexNozomiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNozomiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNozomiWithResponse(ctx context.Context, body GetIndexNozomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNozomiResponse, error) {
	rsp, err := c.GetIndexNozomi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNozomiResponse(rsp)
}

// GetIndexNpmWithBodyWithResponse request with arbitrary body returning *GetIndexNpmResponse
func (c *ClientWithResponses) GetIndexNpmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error) {
	rsp, err := c.GetIndexNpmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNpmResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNpmWithResponse(ctx context.Context, body GetIndexNpmJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNpmResponse, error) {
	rsp, err := c.GetIndexNpm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNpmResponse(rsp)
}

// GetIndexNugetWithBodyWithResponse request with arbitrary body returning *GetIndexNugetResponse
func (c *ClientWithResponses) GetIndexNugetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error) {
	rsp, err := c.GetIndexNugetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNugetResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNugetWithResponse(ctx context.Context, body GetIndexNugetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNugetResponse, error) {
	rsp, err := c.GetIndexNuget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNugetResponse(rsp)
}

// GetIndexNvidiaWithBodyWithResponse request with arbitrary body returning *GetIndexNvidiaResponse
func (c *ClientWithResponses) GetIndexNvidiaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error) {
	rsp, err := c.GetIndexNvidiaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNvidiaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNvidiaWithResponse(ctx context.Context, body GetIndexNvidiaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNvidiaResponse, error) {
	rsp, err := c.GetIndexNvidia(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNvidiaResponse(rsp)
}

// GetIndexNzAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexNzAdvisoriesResponse
func (c *ClientWithResponses) GetIndexNzAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error) {
	rsp, err := c.GetIndexNzAdvisoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNzAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexNzAdvisoriesWithResponse(ctx context.Context, body GetIndexNzAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexNzAdvisoriesResponse, error) {
	rsp, err := c.GetIndexNzAdvisories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexNzAdvisoriesResponse(rsp)
}

// GetIndexOctopusDeployWithBodyWithResponse request with arbitrary body returning *GetIndexOctopusDeployResponse
func (c *ClientWithResponses) GetIndexOctopusDeployWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error) {
	rsp, err := c.GetIndexOctopusDeployWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOctopusDeployResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOctopusDeployWithResponse(ctx context.Context, body GetIndexOctopusDeployJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOctopusDeployResponse, error) {
	rsp, err := c.GetIndexOctopusDeploy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOctopusDeployResponse(rsp)
}

// GetIndexOktaWithBodyWithResponse request with arbitrary body returning *GetIndexOktaResponse
func (c *ClientWithResponses) GetIndexOktaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error) {
	rsp, err := c.GetIndexOktaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOktaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOktaWithResponse(ctx context.Context, body GetIndexOktaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOktaResponse, error) {
	rsp, err := c.GetIndexOkta(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOktaResponse(rsp)
}

// GetIndexOmronWithBodyWithResponse request with arbitrary body returning *GetIndexOmronResponse
func (c *ClientWithResponses) GetIndexOmronWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error) {
	rsp, err := c.GetIndexOmronWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOmronResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOmronWithResponse(ctx context.Context, body GetIndexOmronJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOmronResponse, error) {
	rsp, err := c.GetIndexOmron(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOmronResponse(rsp)
}

// GetIndexOneEWithBodyWithResponse request with arbitrary body returning *GetIndexOneEResponse
func (c *ClientWithResponses) GetIndexOneEWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error) {
	rsp, err := c.GetIndexOneEWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOneEResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOneEWithResponse(ctx context.Context, body GetIndexOneEJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOneEResponse, error) {
	rsp, err := c.GetIndexOneE(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOneEResponse(rsp)
}

// GetIndexOpamWithBodyWithResponse request with arbitrary body returning *GetIndexOpamResponse
func (c *ClientWithResponses) GetIndexOpamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error) {
	rsp, err := c.GetIndexOpamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpamResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpamWithResponse(ctx context.Context, body GetIndexOpamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpamResponse, error) {
	rsp, err := c.GetIndexOpam(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpamResponse(rsp)
}

// GetIndexOpenCvdbWithBodyWithResponse request with arbitrary body returning *GetIndexOpenCvdbResponse
func (c *ClientWithResponses) GetIndexOpenCvdbWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error) {
	rsp, err := c.GetIndexOpenCvdbWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenCvdbResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenCvdbWithResponse(ctx context.Context, body GetIndexOpenCvdbJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenCvdbResponse, error) {
	rsp, err := c.GetIndexOpenCvdb(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenCvdbResponse(rsp)
}

// GetIndexOpenbsdWithBodyWithResponse request with arbitrary body returning *GetIndexOpenbsdResponse
func (c *ClientWithResponses) GetIndexOpenbsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error) {
	rsp, err := c.GetIndexOpenbsdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenbsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenbsdWithResponse(ctx context.Context, body GetIndexOpenbsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenbsdResponse, error) {
	rsp, err := c.GetIndexOpenbsd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenbsdResponse(rsp)
}

// GetIndexOpensshWithBodyWithResponse request with arbitrary body returning *GetIndexOpensshResponse
func (c *ClientWithResponses) GetIndexOpensshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error) {
	rsp, err := c.GetIndexOpensshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensshResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpensshWithResponse(ctx context.Context, body GetIndexOpensshJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensshResponse, error) {
	rsp, err := c.GetIndexOpenssh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensshResponse(rsp)
}

// GetIndexOpensslSecadvWithBodyWithResponse request with arbitrary body returning *GetIndexOpensslSecadvResponse
func (c *ClientWithResponses) GetIndexOpensslSecadvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error) {
	rsp, err := c.GetIndexOpensslSecadvWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensslSecadvResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpensslSecadvWithResponse(ctx context.Context, body GetIndexOpensslSecadvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpensslSecadvResponse, error) {
	rsp, err := c.GetIndexOpensslSecadv(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpensslSecadvResponse(rsp)
}

// GetIndexOpenstackWithBodyWithResponse request with arbitrary body returning *GetIndexOpenstackResponse
func (c *ClientWithResponses) GetIndexOpenstackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error) {
	rsp, err := c.GetIndexOpenstackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenstackResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenstackWithResponse(ctx context.Context, body GetIndexOpenstackJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenstackResponse, error) {
	rsp, err := c.GetIndexOpenstack(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenstackResponse(rsp)
}

// GetIndexOpenwrtWithBodyWithResponse request with arbitrary body returning *GetIndexOpenwrtResponse
func (c *ClientWithResponses) GetIndexOpenwrtWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error) {
	rsp, err := c.GetIndexOpenwrtWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenwrtResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOpenwrtWithResponse(ctx context.Context, body GetIndexOpenwrtJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOpenwrtResponse, error) {
	rsp, err := c.GetIndexOpenwrt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOpenwrtResponse(rsp)
}

// GetIndexOracleWithBodyWithResponse request with arbitrary body returning *GetIndexOracleResponse
func (c *ClientWithResponses) GetIndexOracleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error) {
	rsp, err := c.GetIndexOracleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOracleWithResponse(ctx context.Context, body GetIndexOracleJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleResponse, error) {
	rsp, err := c.GetIndexOracle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleResponse(rsp)
}

// GetIndexOracleCpuWithBodyWithResponse request with arbitrary body returning *GetIndexOracleCpuResponse
func (c *ClientWithResponses) GetIndexOracleCpuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error) {
	rsp, err := c.GetIndexOracleCpuWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOracleCpuWithResponse(ctx context.Context, body GetIndexOracleCpuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuResponse, error) {
	rsp, err := c.GetIndexOracleCpu(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuResponse(rsp)
}

// GetIndexOracleCpuCsafWithBodyWithResponse request with arbitrary body returning *GetIndexOracleCpuCsafResponse
func (c *ClientWithResponses) GetIndexOracleCpuCsafWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error) {
	rsp, err := c.GetIndexOracleCpuCsafWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuCsafResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOracleCpuCsafWithResponse(ctx context.Context, body GetIndexOracleCpuCsafJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOracleCpuCsafResponse, error) {
	rsp, err := c.GetIndexOracleCpuCsaf(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOracleCpuCsafResponse(rsp)
}

// GetIndexOsvWithBodyWithResponse request with arbitrary body returning *GetIndexOsvResponse
func (c *ClientWithResponses) GetIndexOsvWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error) {
	rsp, err := c.GetIndexOsvWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOsvResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOsvWithResponse(ctx context.Context, body GetIndexOsvJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOsvResponse, error) {
	rsp, err := c.GetIndexOsv(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOsvResponse(rsp)
}

// GetIndexOtrsWithBodyWithResponse request with arbitrary body returning *GetIndexOtrsResponse
func (c *ClientWithResponses) GetIndexOtrsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error) {
	rsp, err := c.GetIndexOtrsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOtrsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOtrsWithResponse(ctx context.Context, body GetIndexOtrsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOtrsResponse, error) {
	rsp, err := c.GetIndexOtrs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOtrsResponse(rsp)
}

// GetIndexOwncloudWithBodyWithResponse request with arbitrary body returning *GetIndexOwncloudResponse
func (c *ClientWithResponses) GetIndexOwncloudWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error) {
	rsp, err := c.GetIndexOwncloudWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOwncloudResponse(rsp)
}

func (c *ClientWithResponses) GetIndexOwncloudWithResponse(ctx context.Context, body GetIndexOwncloudJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexOwncloudResponse, error) {
	rsp, err := c.GetIndexOwncloud(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexOwncloudResponse(rsp)
}

// GetIndexPalantirWithBodyWithResponse request with arbitrary body returning *GetIndexPalantirResponse
func (c *ClientWithResponses) GetIndexPalantirWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error) {
	rsp, err := c.GetIndexPalantirWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPalantirResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPalantirWithResponse(ctx context.Context, body GetIndexPalantirJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPalantirResponse, error) {
	rsp, err := c.GetIndexPalantir(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPalantirResponse(rsp)
}

// GetIndexPaloAltoWithBodyWithResponse request with arbitrary body returning *GetIndexPaloAltoResponse
func (c *ClientWithResponses) GetIndexPaloAltoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error) {
	rsp, err := c.GetIndexPaloAltoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPaloAltoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPaloAltoWithResponse(ctx context.Context, body GetIndexPaloAltoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPaloAltoResponse, error) {
	rsp, err := c.GetIndexPaloAlto(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPaloAltoResponse(rsp)
}

// GetIndexPanasonicWithBodyWithResponse request with arbitrary body returning *GetIndexPanasonicResponse
func (c *ClientWithResponses) GetIndexPanasonicWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error) {
	rsp, err := c.GetIndexPanasonicWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPanasonicResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPanasonicWithResponse(ctx context.Context, body GetIndexPanasonicJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPanasonicResponse, error) {
	rsp, err := c.GetIndexPanasonic(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPanasonicResponse(rsp)
}

// GetIndexPapercutWithBodyWithResponse request with arbitrary body returning *GetIndexPapercutResponse
func (c *ClientWithResponses) GetIndexPapercutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error) {
	rsp, err := c.GetIndexPapercutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPapercutResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPapercutWithResponse(ctx context.Context, body GetIndexPapercutJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPapercutResponse, error) {
	rsp, err := c.GetIndexPapercut(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPapercutResponse(rsp)
}

// GetIndexPegaWithBodyWithResponse request with arbitrary body returning *GetIndexPegaResponse
func (c *ClientWithResponses) GetIndexPegaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error) {
	rsp, err := c.GetIndexPegaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPegaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPegaWithResponse(ctx context.Context, body GetIndexPegaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPegaResponse, error) {
	rsp, err := c.GetIndexPega(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPegaResponse(rsp)
}

// GetIndexPhilipsWithBodyWithResponse request with arbitrary body returning *GetIndexPhilipsResponse
func (c *ClientWithResponses) GetIndexPhilipsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error) {
	rsp, err := c.GetIndexPhilipsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhilipsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPhilipsWithResponse(ctx context.Context, body GetIndexPhilipsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhilipsResponse, error) {
	rsp, err := c.GetIndexPhilips(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhilipsResponse(rsp)
}

// GetIndexPhoenixContactWithBodyWithResponse request with arbitrary body returning *GetIndexPhoenixContactResponse
func (c *ClientWithResponses) GetIndexPhoenixContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error) {
	rsp, err := c.GetIndexPhoenixContactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhoenixContactResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPhoenixContactWithResponse(ctx context.Context, body GetIndexPhoenixContactJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPhoenixContactResponse, error) {
	rsp, err := c.GetIndexPhoenixContact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPhoenixContactResponse(rsp)
}

// GetIndexPostgressqlWithBodyWithResponse request with arbitrary body returning *GetIndexPostgressqlResponse
func (c *ClientWithResponses) GetIndexPostgressqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error) {
	rsp, err := c.GetIndexPostgressqlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPostgressqlResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPostgressqlWithResponse(ctx context.Context, body GetIndexPostgressqlJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPostgressqlResponse, error) {
	rsp, err := c.GetIndexPostgressql(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPostgressqlResponse(rsp)
}

// GetIndexProgressWithBodyWithResponse request with arbitrary body returning *GetIndexProgressResponse
func (c *ClientWithResponses) GetIndexProgressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error) {
	rsp, err := c.GetIndexProgressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProgressResponse(rsp)
}

func (c *ClientWithResponses) GetIndexProgressWithResponse(ctx context.Context, body GetIndexProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProgressResponse, error) {
	rsp, err := c.GetIndexProgress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProgressResponse(rsp)
}

// GetIndexProofpointWithBodyWithResponse request with arbitrary body returning *GetIndexProofpointResponse
func (c *ClientWithResponses) GetIndexProofpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error) {
	rsp, err := c.GetIndexProofpointWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProofpointResponse(rsp)
}

func (c *ClientWithResponses) GetIndexProofpointWithResponse(ctx context.Context, body GetIndexProofpointJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexProofpointResponse, error) {
	rsp, err := c.GetIndexProofpoint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexProofpointResponse(rsp)
}

// GetIndexPubWithBodyWithResponse request with arbitrary body returning *GetIndexPubResponse
func (c *ClientWithResponses) GetIndexPubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error) {
	rsp, err := c.GetIndexPubWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPubResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPubWithResponse(ctx context.Context, body GetIndexPubJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPubResponse, error) {
	rsp, err := c.GetIndexPub(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPubResponse(rsp)
}

// GetIndexPureStorageWithBodyWithResponse request with arbitrary body returning *GetIndexPureStorageResponse
func (c *ClientWithResponses) GetIndexPureStorageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error) {
	rsp, err := c.GetIndexPureStorageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPureStorageResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPureStorageWithResponse(ctx context.Context, body GetIndexPureStorageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPureStorageResponse, error) {
	rsp, err := c.GetIndexPureStorage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPureStorageResponse(rsp)
}

// GetIndexPypaAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexPypaAdvisoriesResponse
func (c *ClientWithResponses) GetIndexPypaAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error) {
	rsp, err := c.GetIndexPypaAdvisoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypaAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPypaAdvisoriesWithResponse(ctx context.Context, body GetIndexPypaAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypaAdvisoriesResponse, error) {
	rsp, err := c.GetIndexPypaAdvisories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypaAdvisoriesResponse(rsp)
}

// GetIndexPypiWithBodyWithResponse request with arbitrary body returning *GetIndexPypiResponse
func (c *ClientWithResponses) GetIndexPypiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error) {
	rsp, err := c.GetIndexPypiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexPypiWithResponse(ctx context.Context, body GetIndexPypiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexPypiResponse, error) {
	rsp, err := c.GetIndexPypi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexPypiResponse(rsp)
}

// GetIndexQnapWithBodyWithResponse request with arbitrary body returning *GetIndexQnapResponse
func (c *ClientWithResponses) GetIndexQnapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error) {
	rsp, err := c.GetIndexQnapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQnapResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQnapWithResponse(ctx context.Context, body GetIndexQnapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQnapResponse, error) {
	rsp, err := c.GetIndexQnap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQnapResponse(rsp)
}

// GetIndexQualcommWithBodyWithResponse request with arbitrary body returning *GetIndexQualcommResponse
func (c *ClientWithResponses) GetIndexQualcommWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error) {
	rsp, err := c.GetIndexQualcommWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualcommResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQualcommWithResponse(ctx context.Context, body GetIndexQualcommJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualcommResponse, error) {
	rsp, err := c.GetIndexQualcomm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualcommResponse(rsp)
}

// GetIndexQualysWithBodyWithResponse request with arbitrary body returning *GetIndexQualysResponse
func (c *ClientWithResponses) GetIndexQualysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error) {
	rsp, err := c.GetIndexQualysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualysResponse(rsp)
}

func (c *ClientWithResponses) GetIndexQualysWithResponse(ctx context.Context, body GetIndexQualysJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexQualysResponse, error) {
	rsp, err := c.GetIndexQualys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexQualysResponse(rsp)
}

// GetIndexRansomwareWithBodyWithResponse request with arbitrary body returning *GetIndexRansomwareResponse
func (c *ClientWithResponses) GetIndexRansomwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error) {
	rsp, err := c.GetIndexRansomwareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRansomwareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRansomwareWithResponse(ctx context.Context, body GetIndexRansomwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRansomwareResponse, error) {
	rsp, err := c.GetIndexRansomware(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRansomwareResponse(rsp)
}

// GetIndexRedhatWithBodyWithResponse request with arbitrary body returning *GetIndexRedhatResponse
func (c *ClientWithResponses) GetIndexRedhatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error) {
	rsp, err := c.GetIndexRedhatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRedhatResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRedhatWithResponse(ctx context.Context, body GetIndexRedhatJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRedhatResponse, error) {
	rsp, err := c.GetIndexRedhat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRedhatResponse(rsp)
}

// GetIndexRenesasWithBodyWithResponse request with arbitrary body returning *GetIndexRenesasResponse
func (c *ClientWithResponses) GetIndexRenesasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error) {
	rsp, err := c.GetIndexRenesasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRenesasResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRenesasWithResponse(ctx context.Context, body GetIndexRenesasJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRenesasResponse, error) {
	rsp, err := c.GetIndexRenesas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRenesasResponse(rsp)
}

// GetIndexReviveWithBodyWithResponse request with arbitrary body returning *GetIndexReviveResponse
func (c *ClientWithResponses) GetIndexReviveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error) {
	rsp, err := c.GetIndexReviveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexReviveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexReviveWithResponse(ctx context.Context, body GetIndexReviveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexReviveResponse, error) {
	rsp, err := c.GetIndexRevive(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexReviveResponse(rsp)
}

// GetIndexRockwellWithBodyWithResponse request with arbitrary body returning *GetIndexRockwellResponse
func (c *ClientWithResponses) GetIndexRockwellWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error) {
	rsp, err := c.GetIndexRockwellWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockwellResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRockwellWithResponse(ctx context.Context, body GetIndexRockwellJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockwellResponse, error) {
	rsp, err := c.GetIndexRockwell(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockwellResponse(rsp)
}

// GetIndexRockyWithBodyWithResponse request with arbitrary body returning *GetIndexRockyResponse
func (c *ClientWithResponses) GetIndexRockyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error) {
	rsp, err := c.GetIndexRockyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRockyWithResponse(ctx context.Context, body GetIndexRockyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRockyResponse, error) {
	rsp, err := c.GetIndexRocky(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRockyResponse(rsp)
}

// GetIndexRuckusWithBodyWithResponse request with arbitrary body returning *GetIndexRuckusResponse
func (c *ClientWithResponses) GetIndexRuckusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error) {
	rsp, err := c.GetIndexRuckusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRuckusResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRuckusWithResponse(ctx context.Context, body GetIndexRuckusJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRuckusResponse, error) {
	rsp, err := c.GetIndexRuckus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRuckusResponse(rsp)
}

// GetIndexRustsecAdvisoriesWithBodyWithResponse request with arbitrary body returning *GetIndexRustsecAdvisoriesResponse
func (c *ClientWithResponses) GetIndexRustsecAdvisoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error) {
	rsp, err := c.GetIndexRustsecAdvisoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRustsecAdvisoriesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexRustsecAdvisoriesWithResponse(ctx context.Context, body GetIndexRustsecAdvisoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexRustsecAdvisoriesResponse, error) {
	rsp, err := c.GetIndexRustsecAdvisories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexRustsecAdvisoriesResponse(rsp)
}

// GetIndexSacertWithBodyWithResponse request with arbitrary body returning *GetIndexSacertResponse
func (c *ClientWithResponses) GetIndexSacertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error) {
	rsp, err := c.GetIndexSacertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSacertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSacertWithResponse(ctx context.Context, body GetIndexSacertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSacertResponse, error) {
	rsp, err := c.GetIndexSacert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSacertResponse(rsp)
}

// GetIndexSaintWithBodyWithResponse request with arbitrary body returning *GetIndexSaintResponse
func (c *ClientWithResponses) GetIndexSaintWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error) {
	rsp, err := c.GetIndexSaintWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSaintResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSaintWithResponse(ctx context.Context, body GetIndexSaintJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSaintResponse, error) {
	rsp, err := c.GetIndexSaint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSaintResponse(rsp)
}

// GetIndexSalesforceWithBodyWithResponse request with arbitrary body returning *GetIndexSalesforceResponse
func (c *ClientWithResponses) GetIndexSalesforceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error) {
	rsp, err := c.GetIndexSalesforceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSalesforceResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSalesforceWithResponse(ctx context.Context, body GetIndexSalesforceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSalesforceResponse, error) {
	rsp, err := c.GetIndexSalesforce(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSalesforceResponse(rsp)
}

// GetIndexSambaWithBodyWithResponse request with arbitrary body returning *GetIndexSambaResponse
func (c *ClientWithResponses) GetIndexSambaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error) {
	rsp, err := c.GetIndexSambaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSambaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSambaWithResponse(ctx context.Context, body GetIndexSambaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSambaResponse, error) {
	rsp, err := c.GetIndexSamba(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSambaResponse(rsp)
}

// GetIndexSapWithBodyWithResponse request with arbitrary body returning *GetIndexSapResponse
func (c *ClientWithResponses) GetIndexSapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error) {
	rsp, err := c.GetIndexSapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSapResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSapWithResponse(ctx context.Context, body GetIndexSapJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSapResponse, error) {
	rsp, err := c.GetIndexSap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSapResponse(rsp)
}

// GetIndexSchneiderElectricWithBodyWithResponse request with arbitrary body returning *GetIndexSchneiderElectricResponse
func (c *ClientWithResponses) GetIndexSchneiderElectricWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error) {
	rsp, err := c.GetIndexSchneiderElectricWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSchneiderElectricResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSchneiderElectricWithResponse(ctx context.Context, body GetIndexSchneiderElectricJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSchneiderElectricResponse, error) {
	rsp, err := c.GetIndexSchneiderElectric(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSchneiderElectricResponse(rsp)
}

// GetIndexSecConsultWithBodyWithResponse request with arbitrary body returning *GetIndexSecConsultResponse
func (c *ClientWithResponses) GetIndexSecConsultWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error) {
	rsp, err := c.GetIndexSecConsultWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSecConsultResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSecConsultWithResponse(ctx context.Context, body GetIndexSecConsultJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSecConsultResponse, error) {
	rsp, err := c.GetIndexSecConsult(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSecConsultResponse(rsp)
}

// GetIndexSelWithBodyWithResponse request with arbitrary body returning *GetIndexSelResponse
func (c *ClientWithResponses) GetIndexSelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error) {
	rsp, err := c.GetIndexSelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSelWithResponse(ctx context.Context, body GetIndexSelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSelResponse, error) {
	rsp, err := c.GetIndexSel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSelResponse(rsp)
}

// GetIndexSentineloneWithBodyWithResponse request with arbitrary body returning *GetIndexSentineloneResponse
func (c *ClientWithResponses) GetIndexSentineloneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error) {
	rsp, err := c.GetIndexSentineloneWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSentineloneResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSentineloneWithResponse(ctx context.Context, body GetIndexSentineloneJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSentineloneResponse, error) {
	rsp, err := c.GetIndexSentinelone(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSentineloneResponse(rsp)
}

// GetIndexServicenowWithBodyWithResponse request with arbitrary body returning *GetIndexServicenowResponse
func (c *ClientWithResponses) GetIndexServicenowWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error) {
	rsp, err := c.GetIndexServicenowWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexServicenowResponse(rsp)
}

func (c *ClientWithResponses) GetIndexServicenowWithResponse(ctx context.Context, body GetIndexServicenowJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexServicenowResponse, error) {
	rsp, err := c.GetIndexServicenow(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexServicenowResponse(rsp)
}

// GetIndexShadowserverExploitedWithBodyWithResponse request with arbitrary body returning *GetIndexShadowserverExploitedResponse
func (c *ClientWithResponses) GetIndexShadowserverExploitedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error) {
	rsp, err := c.GetIndexShadowserverExploitedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexShadowserverExploitedResponse(rsp)
}

func (c *ClientWithResponses) GetIndexShadowserverExploitedWithResponse(ctx context.Context, body GetIndexShadowserverExploitedJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexShadowserverExploitedResponse, error) {
	rsp, err := c.GetIndexShadowserverExploited(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexShadowserverExploitedResponse(rsp)
}

// GetIndexSickWithBodyWithResponse request with arbitrary body returning *GetIndexSickResponse
func (c *ClientWithResponses) GetIndexSickWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error) {
	rsp, err := c.GetIndexSickWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSickResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSickWithResponse(ctx context.Context, body GetIndexSickJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSickResponse, error) {
	rsp, err := c.GetIndexSick(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSickResponse(rsp)
}

// GetIndexSiemensWithBodyWithResponse request with arbitrary body returning *GetIndexSiemensResponse
func (c *ClientWithResponses) GetIndexSiemensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error) {
	rsp, err := c.GetIndexSiemensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSiemensResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSiemensWithResponse(ctx context.Context, body GetIndexSiemensJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSiemensResponse, error) {
	rsp, err := c.GetIndexSiemens(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSiemensResponse(rsp)
}

// GetIndexSierraWirelessWithBodyWithResponse request with arbitrary body returning *GetIndexSierraWirelessResponse
func (c *ClientWithResponses) GetIndexSierraWirelessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error) {
	rsp, err := c.GetIndexSierraWirelessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSierraWirelessResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSierraWirelessWithResponse(ctx context.Context, body GetIndexSierraWirelessJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSierraWirelessResponse, error) {
	rsp, err := c.GetIndexSierraWireless(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSierraWirelessResponse(rsp)
}

// GetIndexSingcertWithBodyWithResponse request with arbitrary body returning *GetIndexSingcertResponse
func (c *ClientWithResponses) GetIndexSingcertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error) {
	rsp, err := c.GetIndexSingcertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSingcertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSingcertWithResponse(ctx context.Context, body GetIndexSingcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSingcertResponse, error) {
	rsp, err := c.GetIndexSingcert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSingcertResponse(rsp)
}

// GetIndexSlackwareWithBodyWithResponse request with arbitrary body returning *GetIndexSlackwareResponse
func (c *ClientWithResponses) GetIndexSlackwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error) {
	rsp, err := c.GetIndexSlackwareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSlackwareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSlackwareWithResponse(ctx context.Context, body GetIndexSlackwareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSlackwareResponse, error) {
	rsp, err := c.GetIndexSlackware(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSlackwareResponse(rsp)
}

// GetIndexSolarwindsWithBodyWithResponse request with arbitrary body returning *GetIndexSolarwindsResponse
func (c *ClientWithResponses) GetIndexSolarwindsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error) {
	rsp, err := c.GetIndexSolarwindsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolarwindsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSolarwindsWithResponse(ctx context.Context, body GetIndexSolarwindsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolarwindsResponse, error) {
	rsp, err := c.GetIndexSolarwinds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolarwindsResponse(rsp)
}

// GetIndexSolrWithBodyWithResponse request with arbitrary body returning *GetIndexSolrResponse
func (c *ClientWithResponses) GetIndexSolrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error) {
	rsp, err := c.GetIndexSolrWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolrResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSolrWithResponse(ctx context.Context, body GetIndexSolrJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSolrResponse, error) {
	rsp, err := c.GetIndexSolr(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSolrResponse(rsp)
}

// GetIndexSonicwallWithBodyWithResponse request with arbitrary body returning *GetIndexSonicwallResponse
func (c *ClientWithResponses) GetIndexSonicwallWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error) {
	rsp, err := c.GetIndexSonicwallWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSonicwallResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSonicwallWithResponse(ctx context.Context, body GetIndexSonicwallJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSonicwallResponse, error) {
	rsp, err := c.GetIndexSonicwall(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSonicwallResponse(rsp)
}

// GetIndexSpacelabsHealthcareWithBodyWithResponse request with arbitrary body returning *GetIndexSpacelabsHealthcareResponse
func (c *ClientWithResponses) GetIndexSpacelabsHealthcareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error) {
	rsp, err := c.GetIndexSpacelabsHealthcareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpacelabsHealthcareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSpacelabsHealthcareWithResponse(ctx context.Context, body GetIndexSpacelabsHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpacelabsHealthcareResponse, error) {
	rsp, err := c.GetIndexSpacelabsHealthcare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpacelabsHealthcareResponse(rsp)
}

// GetIndexSpringWithBodyWithResponse request with arbitrary body returning *GetIndexSpringResponse
func (c *ClientWithResponses) GetIndexSpringWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error) {
	rsp, err := c.GetIndexSpringWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpringResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSpringWithResponse(ctx context.Context, body GetIndexSpringJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSpringResponse, error) {
	rsp, err := c.GetIndexSpring(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSpringResponse(rsp)
}

// GetIndexSsdWithBodyWithResponse request with arbitrary body returning *GetIndexSsdResponse
func (c *ClientWithResponses) GetIndexSsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error) {
	rsp, err := c.GetIndexSsdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSsdWithResponse(ctx context.Context, body GetIndexSsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSsdResponse, error) {
	rsp, err := c.GetIndexSsd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSsdResponse(rsp)
}

// GetIndexStormshieldWithBodyWithResponse request with arbitrary body returning *GetIndexStormshieldResponse
func (c *ClientWithResponses) GetIndexStormshieldWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error) {
	rsp, err := c.GetIndexStormshieldWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStormshieldResponse(rsp)
}

func (c *ClientWithResponses) GetIndexStormshieldWithResponse(ctx context.Context, body GetIndexStormshieldJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStormshieldResponse, error) {
	rsp, err := c.GetIndexStormshield(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStormshieldResponse(rsp)
}

// GetIndexStrykerWithBodyWithResponse request with arbitrary body returning *GetIndexStrykerResponse
func (c *ClientWithResponses) GetIndexStrykerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error) {
	rsp, err := c.GetIndexStrykerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStrykerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexStrykerWithResponse(ctx context.Context, body GetIndexStrykerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexStrykerResponse, error) {
	rsp, err := c.GetIndexStryker(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexStrykerResponse(rsp)
}

// GetIndexSudoWithBodyWithResponse request with arbitrary body returning *GetIndexSudoResponse
func (c *ClientWithResponses) GetIndexSudoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error) {
	rsp, err := c.GetIndexSudoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSudoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSudoWithResponse(ctx context.Context, body GetIndexSudoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSudoResponse, error) {
	rsp, err := c.GetIndexSudo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSudoResponse(rsp)
}

// GetIndexSuseWithBodyWithResponse request with arbitrary body returning *GetIndexSuseResponse
func (c *ClientWithResponses) GetIndexSuseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error) {
	rsp, err := c.GetIndexSuseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSuseResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSuseWithResponse(ctx context.Context, body GetIndexSuseJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSuseResponse, error) {
	rsp, err := c.GetIndexSuse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSuseResponse(rsp)
}

// GetIndexSwiftWithBodyWithResponse request with arbitrary body returning *GetIndexSwiftResponse
func (c *ClientWithResponses) GetIndexSwiftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error) {
	rsp, err := c.GetIndexSwiftWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwiftResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSwiftWithResponse(ctx context.Context, body GetIndexSwiftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwiftResponse, error) {
	rsp, err := c.GetIndexSwift(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwiftResponse(rsp)
}

// GetIndexSwisslogHealthcareWithBodyWithResponse request with arbitrary body returning *GetIndexSwisslogHealthcareResponse
func (c *ClientWithResponses) GetIndexSwisslogHealthcareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error) {
	rsp, err := c.GetIndexSwisslogHealthcareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwisslogHealthcareResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSwisslogHealthcareWithResponse(ctx context.Context, body GetIndexSwisslogHealthcareJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSwisslogHealthcareResponse, error) {
	rsp, err := c.GetIndexSwisslogHealthcare(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSwisslogHealthcareResponse(rsp)
}

// GetIndexSymfonyWithBodyWithResponse request with arbitrary body returning *GetIndexSymfonyResponse
func (c *ClientWithResponses) GetIndexSymfonyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error) {
	rsp, err := c.GetIndexSymfonyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSymfonyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSymfonyWithResponse(ctx context.Context, body GetIndexSymfonyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSymfonyResponse, error) {
	rsp, err := c.GetIndexSymfony(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSymfonyResponse(rsp)
}

// GetIndexSyncrosoftWithBodyWithResponse request with arbitrary body returning *GetIndexSyncrosoftResponse
func (c *ClientWithResponses) GetIndexSyncrosoftWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error) {
	rsp, err := c.GetIndexSyncrosoftWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSyncrosoftResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSyncrosoftWithResponse(ctx context.Context, body GetIndexSyncrosoftJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSyncrosoftResponse, error) {
	rsp, err := c.GetIndexSyncrosoft(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSyncrosoftResponse(rsp)
}

// GetIndexSynologyWithBodyWithResponse request with arbitrary body returning *GetIndexSynologyResponse
func (c *ClientWithResponses) GetIndexSynologyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error) {
	rsp, err := c.GetIndexSynologyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSynologyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexSynologyWithResponse(ctx context.Context, body GetIndexSynologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexSynologyResponse, error) {
	rsp, err := c.GetIndexSynology(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexSynologyResponse(rsp)
}

// GetIndexTeamviewerWithBodyWithResponse request with arbitrary body returning *GetIndexTeamviewerResponse
func (c *ClientWithResponses) GetIndexTeamviewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error) {
	rsp, err := c.GetIndexTeamviewerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTeamviewerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTeamviewerWithResponse(ctx context.Context, body GetIndexTeamviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTeamviewerResponse, error) {
	rsp, err := c.GetIndexTeamviewer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTeamviewerResponse(rsp)
}

// GetIndexTencentWithBodyWithResponse request with arbitrary body returning *GetIndexTencentResponse
func (c *ClientWithResponses) GetIndexTencentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error) {
	rsp, err := c.GetIndexTencentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTencentResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTencentWithResponse(ctx context.Context, body GetIndexTencentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTencentResponse, error) {
	rsp, err := c.GetIndexTencent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTencentResponse(rsp)
}

// GetIndexThalesWithBodyWithResponse request with arbitrary body returning *GetIndexThalesResponse
func (c *ClientWithResponses) GetIndexThalesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error) {
	rsp, err := c.GetIndexThalesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThalesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexThalesWithResponse(ctx context.Context, body GetIndexThalesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThalesResponse, error) {
	rsp, err := c.GetIndexThales(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThalesResponse(rsp)
}

// GetIndexThemissinglinkWithBodyWithResponse request with arbitrary body returning *GetIndexThemissinglinkResponse
func (c *ClientWithResponses) GetIndexThemissinglinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error) {
	rsp, err := c.GetIndexThemissinglinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThemissinglinkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexThemissinglinkWithResponse(ctx context.Context, body GetIndexThemissinglinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThemissinglinkResponse, error) {
	rsp, err := c.GetIndexThemissinglink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThemissinglinkResponse(rsp)
}

// GetIndexThreatActorsWithBodyWithResponse request with arbitrary body returning *GetIndexThreatActorsResponse
func (c *ClientWithResponses) GetIndexThreatActorsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error) {
	rsp, err := c.GetIndexThreatActorsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThreatActorsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexThreatActorsWithResponse(ctx context.Context, body GetIndexThreatActorsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexThreatActorsResponse, error) {
	rsp, err := c.GetIndexThreatActors(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexThreatActorsResponse(rsp)
}

// GetIndexTiWithBodyWithResponse request with arbitrary body returning *GetIndexTiResponse
func (c *ClientWithResponses) GetIndexTiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error) {
	rsp, err := c.GetIndexTiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTiWithResponse(ctx context.Context, body GetIndexTiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTiResponse, error) {
	rsp, err := c.GetIndexTi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTiResponse(rsp)
}

// GetIndexTibcoWithBodyWithResponse request with arbitrary body returning *GetIndexTibcoResponse
func (c *ClientWithResponses) GetIndexTibcoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error) {
	rsp, err := c.GetIndexTibcoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTibcoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTibcoWithResponse(ctx context.Context, body GetIndexTibcoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTibcoResponse, error) {
	rsp, err := c.GetIndexTibco(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTibcoResponse(rsp)
}

// GetIndexTpLinkWithBodyWithResponse request with arbitrary body returning *GetIndexTpLinkResponse
func (c *ClientWithResponses) GetIndexTpLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error) {
	rsp, err := c.GetIndexTpLinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTpLinkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTpLinkWithResponse(ctx context.Context, body GetIndexTpLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTpLinkResponse, error) {
	rsp, err := c.GetIndexTpLink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTpLinkResponse(rsp)
}

// GetIndexTraneTechnologyWithBodyWithResponse request with arbitrary body returning *GetIndexTraneTechnologyResponse
func (c *ClientWithResponses) GetIndexTraneTechnologyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error) {
	rsp, err := c.GetIndexTraneTechnologyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTraneTechnologyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTraneTechnologyWithResponse(ctx context.Context, body GetIndexTraneTechnologyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTraneTechnologyResponse, error) {
	rsp, err := c.GetIndexTraneTechnology(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTraneTechnologyResponse(rsp)
}

// GetIndexTrendmicroWithBodyWithResponse request with arbitrary body returning *GetIndexTrendmicroResponse
func (c *ClientWithResponses) GetIndexTrendmicroWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error) {
	rsp, err := c.GetIndexTrendmicroWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrendmicroResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTrendmicroWithResponse(ctx context.Context, body GetIndexTrendmicroJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrendmicroResponse, error) {
	rsp, err := c.GetIndexTrendmicro(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrendmicroResponse(rsp)
}

// GetIndexTrustwaveWithBodyWithResponse request with arbitrary body returning *GetIndexTrustwaveResponse
func (c *ClientWithResponses) GetIndexTrustwaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error) {
	rsp, err := c.GetIndexTrustwaveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrustwaveResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTrustwaveWithResponse(ctx context.Context, body GetIndexTrustwaveJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTrustwaveResponse, error) {
	rsp, err := c.GetIndexTrustwave(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTrustwaveResponse(rsp)
}

// GetIndexTwcertWithBodyWithResponse request with arbitrary body returning *GetIndexTwcertResponse
func (c *ClientWithResponses) GetIndexTwcertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error) {
	rsp, err := c.GetIndexTwcertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTwcertResponse(rsp)
}

func (c *ClientWithResponses) GetIndexTwcertWithResponse(ctx context.Context, body GetIndexTwcertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexTwcertResponse, error) {
	rsp, err := c.GetIndexTwcert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexTwcertResponse(rsp)
}

// GetIndexUbiquitiWithBodyWithResponse request with arbitrary body returning *GetIndexUbiquitiResponse
func (c *ClientWithResponses) GetIndexUbiquitiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error) {
	rsp, err := c.GetIndexUbiquitiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbiquitiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUbiquitiWithResponse(ctx context.Context, body GetIndexUbiquitiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbiquitiResponse, error) {
	rsp, err := c.GetIndexUbiquiti(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbiquitiResponse(rsp)
}

// GetIndexUbuntuWithBodyWithResponse request with arbitrary body returning *GetIndexUbuntuResponse
func (c *ClientWithResponses) GetIndexUbuntuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error) {
	rsp, err := c.GetIndexUbuntuWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbuntuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUbuntuWithResponse(ctx context.Context, body GetIndexUbuntuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUbuntuResponse, error) {
	rsp, err := c.GetIndexUbuntu(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUbuntuResponse(rsp)
}

// GetIndexUnifyWithBodyWithResponse request with arbitrary body returning *GetIndexUnifyResponse
func (c *ClientWithResponses) GetIndexUnifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error) {
	rsp, err := c.GetIndexUnifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnifyResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUnifyWithResponse(ctx context.Context, body GetIndexUnifyJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnifyResponse, error) {
	rsp, err := c.GetIndexUnify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnifyResponse(rsp)
}

// GetIndexUnisocWithBodyWithResponse request with arbitrary body returning *GetIndexUnisocResponse
func (c *ClientWithResponses) GetIndexUnisocWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error) {
	rsp, err := c.GetIndexUnisocWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnisocResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUnisocWithResponse(ctx context.Context, body GetIndexUnisocJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUnisocResponse, error) {
	rsp, err := c.GetIndexUnisoc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUnisocResponse(rsp)
}

// GetIndexUsdWithBodyWithResponse request with arbitrary body returning *GetIndexUsdResponse
func (c *ClientWithResponses) GetIndexUsdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error) {
	rsp, err := c.GetIndexUsdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUsdWithResponse(ctx context.Context, body GetIndexUsdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsdResponse, error) {
	rsp, err := c.GetIndexUsd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsdResponse(rsp)
}

// GetIndexUsomWithBodyWithResponse request with arbitrary body returning *GetIndexUsomResponse
func (c *ClientWithResponses) GetIndexUsomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error) {
	rsp, err := c.GetIndexUsomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsomResponse(rsp)
}

func (c *ClientWithResponses) GetIndexUsomWithResponse(ctx context.Context, body GetIndexUsomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexUsomResponse, error) {
	rsp, err := c.GetIndexUsom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexUsomResponse(rsp)
}

// GetIndexVandykeWithBodyWithResponse request with arbitrary body returning *GetIndexVandykeResponse
func (c *ClientWithResponses) GetIndexVandykeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error) {
	rsp, err := c.GetIndexVandykeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVandykeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVandykeWithResponse(ctx context.Context, body GetIndexVandykeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVandykeResponse, error) {
	rsp, err := c.GetIndexVandyke(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVandykeResponse(rsp)
}

// GetIndexVapidlabsWithBodyWithResponse request with arbitrary body returning *GetIndexVapidlabsResponse
func (c *ClientWithResponses) GetIndexVapidlabsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error) {
	rsp, err := c.GetIndexVapidlabsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVapidlabsResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVapidlabsWithResponse(ctx context.Context, body GetIndexVapidlabsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVapidlabsResponse, error) {
	rsp, err := c.GetIndexVapidlabs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVapidlabsResponse(rsp)
}

// GetIndexVdeWithBodyWithResponse request with arbitrary body returning *GetIndexVdeResponse
func (c *ClientWithResponses) GetIndexVdeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error) {
	rsp, err := c.GetIndexVdeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVdeResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVdeWithResponse(ctx context.Context, body GetIndexVdeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVdeResponse, error) {
	rsp, err := c.GetIndexVde(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVdeResponse(rsp)
}

// GetIndexVeeamWithBodyWithResponse request with arbitrary body returning *GetIndexVeeamResponse
func (c *ClientWithResponses) GetIndexVeeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error) {
	rsp, err := c.GetIndexVeeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVeeamResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVeeamWithResponse(ctx context.Context, body GetIndexVeeamJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVeeamResponse, error) {
	rsp, err := c.GetIndexVeeam(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVeeamResponse(rsp)
}

// GetIndexVoidsecWithBodyWithResponse request with arbitrary body returning *GetIndexVoidsecResponse
func (c *ClientWithResponses) GetIndexVoidsecWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error) {
	rsp, err := c.GetIndexVoidsecWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVoidsecResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVoidsecWithResponse(ctx context.Context, body GetIndexVoidsecJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVoidsecResponse, error) {
	rsp, err := c.GetIndexVoidsec(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVoidsecResponse(rsp)
}

// GetIndexVulncheckConfigWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckConfigResponse
func (c *ClientWithResponses) GetIndexVulncheckConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error) {
	rsp, err := c.GetIndexVulncheckConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckConfigResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckConfigWithResponse(ctx context.Context, body GetIndexVulncheckConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckConfigResponse, error) {
	rsp, err := c.GetIndexVulncheckConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckConfigResponse(rsp)
}

// GetIndexVulncheckKevWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckKevResponse
func (c *ClientWithResponses) GetIndexVulncheckKevWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error) {
	rsp, err := c.GetIndexVulncheckKevWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckKevResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckKevWithResponse(ctx context.Context, body GetIndexVulncheckKevJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckKevResponse, error) {
	rsp, err := c.GetIndexVulncheckKev(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckKevResponse(rsp)
}

// GetIndexVulncheckNvdWithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckNvdResponse
func (c *ClientWithResponses) GetIndexVulncheckNvdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error) {
	rsp, err := c.GetIndexVulncheckNvdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvdResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckNvdWithResponse(ctx context.Context, body GetIndexVulncheckNvdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvdResponse, error) {
	rsp, err := c.GetIndexVulncheckNvd(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvdResponse(rsp)
}

// GetIndexVulncheckNvd2WithBodyWithResponse request with arbitrary body returning *GetIndexVulncheckNvd2Response
func (c *ClientWithResponses) GetIndexVulncheckNvd2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error) {
	rsp, err := c.GetIndexVulncheckNvd2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvd2Response(rsp)
}

func (c *ClientWithResponses) GetIndexVulncheckNvd2WithResponse(ctx context.Context, body GetIndexVulncheckNvd2JSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulncheckNvd2Response, error) {
	rsp, err := c.GetIndexVulncheckNvd2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulncheckNvd2Response(rsp)
}

// GetIndexVulnerabilityAliasesWithBodyWithResponse request with arbitrary body returning *GetIndexVulnerabilityAliasesResponse
func (c *ClientWithResponses) GetIndexVulnerabilityAliasesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error) {
	rsp, err := c.GetIndexVulnerabilityAliasesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulnerabilityAliasesResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVulnerabilityAliasesWithResponse(ctx context.Context, body GetIndexVulnerabilityAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVulnerabilityAliasesResponse, error) {
	rsp, err := c.GetIndexVulnerabilityAliases(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVulnerabilityAliasesResponse(rsp)
}

// GetIndexVyaireWithBodyWithResponse request with arbitrary body returning *GetIndexVyaireResponse
func (c *ClientWithResponses) GetIndexVyaireWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error) {
	rsp, err := c.GetIndexVyaireWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVyaireResponse(rsp)
}

func (c *ClientWithResponses) GetIndexVyaireWithResponse(ctx context.Context, body GetIndexVyaireJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexVyaireResponse, error) {
	rsp, err := c.GetIndexVyaire(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexVyaireResponse(rsp)
}

// GetIndexWatchguardWithBodyWithResponse request with arbitrary body returning *GetIndexWatchguardResponse
func (c *ClientWithResponses) GetIndexWatchguardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error) {
	rsp, err := c.GetIndexWatchguardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWatchguardResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWatchguardWithResponse(ctx context.Context, body GetIndexWatchguardJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWatchguardResponse, error) {
	rsp, err := c.GetIndexWatchguard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWatchguardResponse(rsp)
}

// GetIndexWhatsappWithBodyWithResponse request with arbitrary body returning *GetIndexWhatsappResponse
func (c *ClientWithResponses) GetIndexWhatsappWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error) {
	rsp, err := c.GetIndexWhatsappWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWhatsappResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWhatsappWithResponse(ctx context.Context, body GetIndexWhatsappJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWhatsappResponse, error) {
	rsp, err := c.GetIndexWhatsapp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWhatsappResponse(rsp)
}

// GetIndexWibuWithBodyWithResponse request with arbitrary body returning *GetIndexWibuResponse
func (c *ClientWithResponses) GetIndexWibuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error) {
	rsp, err := c.GetIndexWibuWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWibuResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWibuWithResponse(ctx context.Context, body GetIndexWibuJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWibuResponse, error) {
	rsp, err := c.GetIndexWibu(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWibuResponse(rsp)
}

// GetIndexWiresharkWithBodyWithResponse request with arbitrary body returning *GetIndexWiresharkResponse
func (c *ClientWithResponses) GetIndexWiresharkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error) {
	rsp, err := c.GetIndexWiresharkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWiresharkResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWiresharkWithResponse(ctx context.Context, body GetIndexWiresharkJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWiresharkResponse, error) {
	rsp, err := c.GetIndexWireshark(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWiresharkResponse(rsp)
}

// GetIndexWithSecureWithBodyWithResponse request with arbitrary body returning *GetIndexWithSecureResponse
func (c *ClientWithResponses) GetIndexWithSecureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error) {
	rsp, err := c.GetIndexWithSecureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWithSecureResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWithSecureWithResponse(ctx context.Context, body GetIndexWithSecureJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWithSecureResponse, error) {
	rsp, err := c.GetIndexWithSecure(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWithSecureResponse(rsp)
}

// GetIndexWolfiWithBodyWithResponse request with arbitrary body returning *GetIndexWolfiResponse
func (c *ClientWithResponses) GetIndexWolfiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error) {
	rsp, err := c.GetIndexWolfiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWolfiWithResponse(ctx context.Context, body GetIndexWolfiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfiResponse, error) {
	rsp, err := c.GetIndexWolfi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfiResponse(rsp)
}

// GetIndexWolfsslWithBodyWithResponse request with arbitrary body returning *GetIndexWolfsslResponse
func (c *ClientWithResponses) GetIndexWolfsslWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error) {
	rsp, err := c.GetIndexWolfsslWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfsslResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWolfsslWithResponse(ctx context.Context, body GetIndexWolfsslJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWolfsslResponse, error) {
	rsp, err := c.GetIndexWolfssl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWolfsslResponse(rsp)
}

// GetIndexWordfenceWithBodyWithResponse request with arbitrary body returning *GetIndexWordfenceResponse
func (c *ClientWithResponses) GetIndexWordfenceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error) {
	rsp, err := c.GetIndexWordfenceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWordfenceResponse(rsp)
}

func (c *ClientWithResponses) GetIndexWordfenceWithResponse(ctx context.Context, body GetIndexWordfenceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexWordfenceResponse, error) {
	rsp, err := c.GetIndexWordfence(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexWordfenceResponse(rsp)
}

// GetIndexXenWithBodyWithResponse request with arbitrary body returning *GetIndexXenResponse
func (c *ClientWithResponses) GetIndexXenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error) {
	rsp, err := c.GetIndexXenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXenResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXenWithResponse(ctx context.Context, body GetIndexXenJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXenResponse, error) {
	rsp, err := c.GetIndexXen(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXenResponse(rsp)
}

// GetIndexXeroxWithBodyWithResponse request with arbitrary body returning *GetIndexXeroxResponse
func (c *ClientWithResponses) GetIndexXeroxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error) {
	rsp, err := c.GetIndexXeroxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXeroxResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXeroxWithResponse(ctx context.Context, body GetIndexXeroxJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXeroxResponse, error) {
	rsp, err := c.GetIndexXerox(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXeroxResponse(rsp)
}

// GetIndexXiaomiWithBodyWithResponse request with arbitrary body returning *GetIndexXiaomiResponse
func (c *ClientWithResponses) GetIndexXiaomiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error) {
	rsp, err := c.GetIndexXiaomiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXiaomiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXiaomiWithResponse(ctx context.Context, body GetIndexXiaomiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXiaomiResponse, error) {
	rsp, err := c.GetIndexXiaomi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXiaomiResponse(rsp)
}

// GetIndexXylemWithBodyWithResponse request with arbitrary body returning *GetIndexXylemResponse
func (c *ClientWithResponses) GetIndexXylemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error) {
	rsp, err := c.GetIndexXylemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXylemResponse(rsp)
}

func (c *ClientWithResponses) GetIndexXylemWithResponse(ctx context.Context, body GetIndexXylemJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexXylemResponse, error) {
	rsp, err := c.GetIndexXylem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexXylemResponse(rsp)
}

// GetIndexYokogawaWithBodyWithResponse request with arbitrary body returning *GetIndexYokogawaResponse
func (c *ClientWithResponses) GetIndexYokogawaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error) {
	rsp, err := c.GetIndexYokogawaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYokogawaResponse(rsp)
}

func (c *ClientWithResponses) GetIndexYokogawaWithResponse(ctx context.Context, body GetIndexYokogawaJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYokogawaResponse, error) {
	rsp, err := c.GetIndexYokogawa(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYokogawaResponse(rsp)
}

// GetIndexYubicoWithBodyWithResponse request with arbitrary body returning *GetIndexYubicoResponse
func (c *ClientWithResponses) GetIndexYubicoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error) {
	rsp, err := c.GetIndexYubicoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYubicoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexYubicoWithResponse(ctx context.Context, body GetIndexYubicoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexYubicoResponse, error) {
	rsp, err := c.GetIndexYubico(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexYubicoResponse(rsp)
}

// GetIndexZdiWithBodyWithResponse request with arbitrary body returning *GetIndexZdiResponse
func (c *ClientWithResponses) GetIndexZdiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error) {
	rsp, err := c.GetIndexZdiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZdiResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZdiWithResponse(ctx context.Context, body GetIndexZdiJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZdiResponse, error) {
	rsp, err := c.GetIndexZdi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZdiResponse(rsp)
}

// GetIndexZeroscienceWithBodyWithResponse request with arbitrary body returning *GetIndexZeroscienceResponse
func (c *ClientWithResponses) GetIndexZeroscienceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error) {
	rsp, err := c.GetIndexZeroscienceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZeroscienceResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZeroscienceWithResponse(ctx context.Context, body GetIndexZeroscienceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZeroscienceResponse, error) {
	rsp, err := c.GetIndexZeroscience(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZeroscienceResponse(rsp)
}

// GetIndexZimbraWithBodyWithResponse request with arbitrary body returning *GetIndexZimbraResponse
func (c *ClientWithResponses) GetIndexZimbraWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error) {
	rsp, err := c.GetIndexZimbraWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZimbraResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZimbraWithResponse(ctx context.Context, body GetIndexZimbraJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZimbraResponse, error) {
	rsp, err := c.GetIndexZimbra(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZimbraResponse(rsp)
}

// GetIndexZoomWithBodyWithResponse request with arbitrary body returning *GetIndexZoomResponse
func (c *ClientWithResponses) GetIndexZoomWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error) {
	rsp, err := c.GetIndexZoomWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZoomResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZoomWithResponse(ctx context.Context, body GetIndexZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZoomResponse, error) {
	rsp, err := c.GetIndexZoom(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZoomResponse(rsp)
}

// GetIndexZscalerWithBodyWithResponse request with arbitrary body returning *GetIndexZscalerResponse
func (c *ClientWithResponses) GetIndexZscalerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error) {
	rsp, err := c.GetIndexZscalerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZscalerResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZscalerWithResponse(ctx context.Context, body GetIndexZscalerJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZscalerResponse, error) {
	rsp, err := c.GetIndexZscaler(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZscalerResponse(rsp)
}

// GetIndexZusoWithBodyWithResponse request with arbitrary body returning *GetIndexZusoResponse
func (c *ClientWithResponses) GetIndexZusoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error) {
	rsp, err := c.GetIndexZusoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZusoResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZusoWithResponse(ctx context.Context, body GetIndexZusoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZusoResponse, error) {
	rsp, err := c.GetIndexZuso(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZusoResponse(rsp)
}

// GetIndexZyxelWithBodyWithResponse request with arbitrary body returning *GetIndexZyxelResponse
func (c *ClientWithResponses) GetIndexZyxelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error) {
	rsp, err := c.GetIndexZyxelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZyxelResponse(rsp)
}

func (c *ClientWithResponses) GetIndexZyxelWithResponse(ctx context.Context, body GetIndexZyxelJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIndexZyxelResponse, error) {
	rsp, err := c.GetIndexZyxel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexZyxelResponse(rsp)
}

// GetOpenapiWithResponse request returning *GetOpenapiResponse
func (c *ClientWithResponses) GetOpenapiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiResponse, error) {
	rsp, err := c.GetOpenapi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiResponse(rsp)
}

// GetPurlWithResponse request returning *GetPurlResponse
func (c *ClientWithResponses) GetPurlWithResponse(ctx context.Context, params *GetPurlParams, reqEditors ...RequestEditorFn) (*GetPurlResponse, error) {
	rsp, err := c.GetPurl(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPurlResponse(rsp)
}

// GetTagsVulncheckC2WithResponse request returning *GetTagsVulncheckC2Response
func (c *ClientWithResponses) GetTagsVulncheckC2WithResponse(ctx context.Context, params *GetTagsVulncheckC2Params, reqEditors ...RequestEditorFn) (*GetTagsVulncheckC2Response, error) {
	rsp, err := c.GetTagsVulncheckC2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsVulncheckC2Response(rsp)
}

// ParseGetBackupIndexResponse parses an HTTP response from a GetBackupIndexWithResponse call
func ParseGetBackupIndexResponse(rsp *http.Response) (*GetBackupIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackupIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseV3controllersBackupResponseDataV3controllersBackupResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCpeResponse parses an HTTP response from a GetCpeWithResponse call
func ParseGetCpeResponse(rsp *http.Response) (*GetCpeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCpeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseArrayStringV3controllersResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexResponse parses an HTTP response from a GetIndexWithResponse call
func ParseGetIndexResponse(rsp *http.Response) (*GetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V3controllersListIndexesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexA10Response parses an HTTP response from a GetIndexA10WithResponse call
func ParseGetIndexA10Response(rsp *http.Response) (*GetIndexA10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexA10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryA10PaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAbbResponse parses an HTTP response from a GetIndexAbbWithResponse call
func ParseGetIndexAbbResponse(rsp *http.Response) (*GetIndexAbbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAbbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryABBAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAbbottResponse parses an HTTP response from a GetIndexAbbottWithResponse call
func ParseGetIndexAbbottResponse(rsp *http.Response) (*GetIndexAbbottResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAbbottResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAbbottPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAbsoluteResponse parses an HTTP response from a GetIndexAbsoluteWithResponse call
func ParseGetIndexAbsoluteResponse(rsp *http.Response) (*GetIndexAbsoluteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAbsoluteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAbsolutePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAcronisResponse parses an HTTP response from a GetIndexAcronisWithResponse call
func ParseGetIndexAcronisResponse(rsp *http.Response) (*GetIndexAcronisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAcronisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAcronisPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAdobeResponse parses an HTTP response from a GetIndexAdobeWithResponse call
func ParseGetIndexAdobeResponse(rsp *http.Response) (*GetIndexAdobeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAdobeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAdobeAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAdvisoriesResponse parses an HTTP response from a GetIndexAdvisoriesWithResponse call
func ParseGetIndexAdvisoriesResponse(rsp *http.Response) (*GetIndexAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAdvisoryRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAlephResearchResponse parses an HTTP response from a GetIndexAlephResearchWithResponse call
func ParseGetIndexAlephResearchResponse(rsp *http.Response) (*GetIndexAlephResearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAlephResearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAlephResearchPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAlmaResponse parses an HTTP response from a GetIndexAlmaWithResponse call
func ParseGetIndexAlmaResponse(rsp *http.Response) (*GetIndexAlmaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAlmaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAlmaLinuxUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAlpineResponse parses an HTTP response from a GetIndexAlpineWithResponse call
func ParseGetIndexAlpineResponse(rsp *http.Response) (*GetIndexAlpineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAlpineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAlpineLinuxSecDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAmazonResponse parses an HTTP response from a GetIndexAmazonWithResponse call
func ParseGetIndexAmazonResponse(rsp *http.Response) (*GetIndexAmazonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAmazonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAmdResponse parses an HTTP response from a GetIndexAmdWithResponse call
func ParseGetIndexAmdResponse(rsp *http.Response) (*GetIndexAmdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAmdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAMDPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAmiResponse parses an HTTP response from a GetIndexAmiWithResponse call
func ParseGetIndexAmiResponse(rsp *http.Response) (*GetIndexAmiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAmiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAMIPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAnchoreNvdOverrideResponse parses an HTTP response from a GetIndexAnchoreNvdOverrideWithResponse call
func ParseGetIndexAnchoreNvdOverrideResponse(rsp *http.Response) (*GetIndexAnchoreNvdOverrideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAnchoreNvdOverrideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAnchoreNVDOverridePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAndroidResponse parses an HTTP response from a GetIndexAndroidWithResponse call
func ParseGetIndexAndroidResponse(rsp *http.Response) (*GetIndexAndroidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAndroidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAndroidAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheActivemqResponse parses an HTTP response from a GetIndexApacheActivemqWithResponse call
func ParseGetIndexApacheActivemqResponse(rsp *http.Response) (*GetIndexApacheActivemqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheActivemqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheActiveMQPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheArchivaResponse parses an HTTP response from a GetIndexApacheArchivaWithResponse call
func ParseGetIndexApacheArchivaResponse(rsp *http.Response) (*GetIndexApacheArchivaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheArchivaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheArchivaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheArrowResponse parses an HTTP response from a GetIndexApacheArrowWithResponse call
func ParseGetIndexApacheArrowResponse(rsp *http.Response) (*GetIndexApacheArrowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheArrowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheArrowPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheCamelResponse parses an HTTP response from a GetIndexApacheCamelWithResponse call
func ParseGetIndexApacheCamelResponse(rsp *http.Response) (*GetIndexApacheCamelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheCamelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheCamelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheCommonsResponse parses an HTTP response from a GetIndexApacheCommonsWithResponse call
func ParseGetIndexApacheCommonsResponse(rsp *http.Response) (*GetIndexApacheCommonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheCommonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheCommonsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheCouchdbResponse parses an HTTP response from a GetIndexApacheCouchdbWithResponse call
func ParseGetIndexApacheCouchdbResponse(rsp *http.Response) (*GetIndexApacheCouchdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheCouchdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheCouchDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheFlinkResponse parses an HTTP response from a GetIndexApacheFlinkWithResponse call
func ParseGetIndexApacheFlinkResponse(rsp *http.Response) (*GetIndexApacheFlinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheFlinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheFlinkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheGuacamoleResponse parses an HTTP response from a GetIndexApacheGuacamoleWithResponse call
func ParseGetIndexApacheGuacamoleResponse(rsp *http.Response) (*GetIndexApacheGuacamoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheGuacamoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheGuacamolePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheHadoopResponse parses an HTTP response from a GetIndexApacheHadoopWithResponse call
func ParseGetIndexApacheHadoopResponse(rsp *http.Response) (*GetIndexApacheHadoopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheHadoopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheHadoopPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheHttpResponse parses an HTTP response from a GetIndexApacheHttpWithResponse call
func ParseGetIndexApacheHttpResponse(rsp *http.Response) (*GetIndexApacheHttpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheHttpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheHTTPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheJspwikiResponse parses an HTTP response from a GetIndexApacheJspwikiWithResponse call
func ParseGetIndexApacheJspwikiResponse(rsp *http.Response) (*GetIndexApacheJspwikiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheJspwikiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheJSPWikiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheKafkaResponse parses an HTTP response from a GetIndexApacheKafkaWithResponse call
func ParseGetIndexApacheKafkaResponse(rsp *http.Response) (*GetIndexApacheKafkaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheKafkaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheKafkaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheLoggingservicesResponse parses an HTTP response from a GetIndexApacheLoggingservicesWithResponse call
func ParseGetIndexApacheLoggingservicesResponse(rsp *http.Response) (*GetIndexApacheLoggingservicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheLoggingservicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheLoggingServicesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheNifiResponse parses an HTTP response from a GetIndexApacheNifiWithResponse call
func ParseGetIndexApacheNifiResponse(rsp *http.Response) (*GetIndexApacheNifiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheNifiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheNiFiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheOfbizResponse parses an HTTP response from a GetIndexApacheOfbizWithResponse call
func ParseGetIndexApacheOfbizResponse(rsp *http.Response) (*GetIndexApacheOfbizResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheOfbizResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheOFBizPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheOpenmeetingsResponse parses an HTTP response from a GetIndexApacheOpenmeetingsWithResponse call
func ParseGetIndexApacheOpenmeetingsResponse(rsp *http.Response) (*GetIndexApacheOpenmeetingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheOpenmeetingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheOpenMeetingsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheOpenofficeResponse parses an HTTP response from a GetIndexApacheOpenofficeWithResponse call
func ParseGetIndexApacheOpenofficeResponse(rsp *http.Response) (*GetIndexApacheOpenofficeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheOpenofficeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheOpenOfficePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApachePulsarResponse parses an HTTP response from a GetIndexApachePulsarWithResponse call
func ParseGetIndexApachePulsarResponse(rsp *http.Response) (*GetIndexApachePulsarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApachePulsarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApachePulsarPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheShiroResponse parses an HTTP response from a GetIndexApacheShiroWithResponse call
func ParseGetIndexApacheShiroResponse(rsp *http.Response) (*GetIndexApacheShiroResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheShiroResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheShiroPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheSparkResponse parses an HTTP response from a GetIndexApacheSparkWithResponse call
func ParseGetIndexApacheSparkResponse(rsp *http.Response) (*GetIndexApacheSparkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheSparkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheSparkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheStrutsResponse parses an HTTP response from a GetIndexApacheStrutsWithResponse call
func ParseGetIndexApacheStrutsResponse(rsp *http.Response) (*GetIndexApacheStrutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheStrutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheStrutsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheSubversionResponse parses an HTTP response from a GetIndexApacheSubversionWithResponse call
func ParseGetIndexApacheSubversionResponse(rsp *http.Response) (*GetIndexApacheSubversionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheSubversionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheSubversionPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheSupersetResponse parses an HTTP response from a GetIndexApacheSupersetWithResponse call
func ParseGetIndexApacheSupersetResponse(rsp *http.Response) (*GetIndexApacheSupersetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheSupersetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheSupersetPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheTomcatResponse parses an HTTP response from a GetIndexApacheTomcatWithResponse call
func ParseGetIndexApacheTomcatResponse(rsp *http.Response) (*GetIndexApacheTomcatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheTomcatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheTomcatPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexApacheZookeeperResponse parses an HTTP response from a GetIndexApacheZookeeperWithResponse call
func ParseGetIndexApacheZookeeperResponse(rsp *http.Response) (*GetIndexApacheZookeeperResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexApacheZookeeperResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryApacheZooKeeperPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAppcheckResponse parses an HTTP response from a GetIndexAppcheckWithResponse call
func ParseGetIndexAppcheckResponse(rsp *http.Response) (*GetIndexAppcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAppcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAppCheckPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAppgateResponse parses an HTTP response from a GetIndexAppgateWithResponse call
func ParseGetIndexAppgateResponse(rsp *http.Response) (*GetIndexAppgateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAppgateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAppgatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAppleResponse parses an HTTP response from a GetIndexAppleWithResponse call
func ParseGetIndexAppleResponse(rsp *http.Response) (*GetIndexAppleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAppleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAppleAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexArchResponse parses an HTTP response from a GetIndexArchWithResponse call
func ParseGetIndexArchResponse(rsp *http.Response) (*GetIndexArchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexArchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryArchIssuePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAristaResponse parses an HTTP response from a GetIndexAristaWithResponse call
func ParseGetIndexAristaResponse(rsp *http.Response) (*GetIndexAristaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAristaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAristaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexArubaResponse parses an HTTP response from a GetIndexArubaWithResponse call
func ParseGetIndexArubaResponse(rsp *http.Response) (*GetIndexArubaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexArubaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryArubaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAsrgResponse parses an HTTP response from a GetIndexAsrgWithResponse call
func ParseGetIndexAsrgResponse(rsp *http.Response) (*GetIndexAsrgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAsrgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryASRGPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAssetnoteResponse parses an HTTP response from a GetIndexAssetnoteWithResponse call
func ParseGetIndexAssetnoteResponse(rsp *http.Response) (*GetIndexAssetnoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAssetnoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAssetNotePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAsteriskResponse parses an HTTP response from a GetIndexAsteriskWithResponse call
func ParseGetIndexAsteriskResponse(rsp *http.Response) (*GetIndexAsteriskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAsteriskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAsteriskPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAsusResponse parses an HTTP response from a GetIndexAsusWithResponse call
func ParseGetIndexAsusResponse(rsp *http.Response) (*GetIndexAsusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAsusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAsusPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAtlassianResponse parses an HTTP response from a GetIndexAtlassianWithResponse call
func ParseGetIndexAtlassianResponse(rsp *http.Response) (*GetIndexAtlassianResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAtlassianResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAtlassianAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAtlassianVulnsResponse parses an HTTP response from a GetIndexAtlassianVulnsWithResponse call
func ParseGetIndexAtlassianVulnsResponse(rsp *http.Response) (*GetIndexAtlassianVulnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAtlassianVulnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAtlassianVulnPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAtredisResponse parses an HTTP response from a GetIndexAtredisWithResponse call
func ParseGetIndexAtredisResponse(rsp *http.Response) (*GetIndexAtredisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAtredisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAtredisPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAuscertResponse parses an HTTP response from a GetIndexAuscertWithResponse call
func ParseGetIndexAuscertResponse(rsp *http.Response) (*GetIndexAuscertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAuscertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAusCertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAutodeskResponse parses an HTTP response from a GetIndexAutodeskWithResponse call
func ParseGetIndexAutodeskResponse(rsp *http.Response) (*GetIndexAutodeskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAutodeskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAutodeskPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAvayaResponse parses an HTTP response from a GetIndexAvayaWithResponse call
func ParseGetIndexAvayaResponse(rsp *http.Response) (*GetIndexAvayaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAvayaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAvayaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAvevaResponse parses an HTTP response from a GetIndexAvevaWithResponse call
func ParseGetIndexAvevaResponse(rsp *http.Response) (*GetIndexAvevaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAvevaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAVEVAAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAvigilonResponse parses an HTTP response from a GetIndexAvigilonWithResponse call
func ParseGetIndexAvigilonResponse(rsp *http.Response) (*GetIndexAvigilonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAvigilonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAvigilonPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAwsResponse parses an HTTP response from a GetIndexAwsWithResponse call
func ParseGetIndexAwsResponse(rsp *http.Response) (*GetIndexAwsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAwsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAWSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexAxisResponse parses an HTTP response from a GetIndexAxisWithResponse call
func ParseGetIndexAxisResponse(rsp *http.Response) (*GetIndexAxisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexAxisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAxisPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBandrResponse parses an HTTP response from a GetIndexBandrWithResponse call
func ParseGetIndexBandrResponse(rsp *http.Response) (*GetIndexBandrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBandrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBandrPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBaxterResponse parses an HTTP response from a GetIndexBaxterWithResponse call
func ParseGetIndexBaxterResponse(rsp *http.Response) (*GetIndexBaxterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBaxterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBaxterAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBbraunResponse parses an HTTP response from a GetIndexBbraunWithResponse call
func ParseGetIndexBbraunResponse(rsp *http.Response) (*GetIndexBbraunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBbraunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBBraunAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBdResponse parses an HTTP response from a GetIndexBdWithResponse call
func ParseGetIndexBdResponse(rsp *http.Response) (*GetIndexBdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBectonDickinsonAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBduResponse parses an HTTP response from a GetIndexBduWithResponse call
func ParseGetIndexBduResponse(rsp *http.Response) (*GetIndexBduResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBduResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBDUAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBeckhoffResponse parses an HTTP response from a GetIndexBeckhoffWithResponse call
func ParseGetIndexBeckhoffResponse(rsp *http.Response) (*GetIndexBeckhoffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBeckhoffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBeckhoffAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBeldenResponse parses an HTTP response from a GetIndexBeldenWithResponse call
func ParseGetIndexBeldenResponse(rsp *http.Response) (*GetIndexBeldenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBeldenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBeldenAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBeyondTrustResponse parses an HTTP response from a GetIndexBeyondTrustWithResponse call
func ParseGetIndexBeyondTrustResponse(rsp *http.Response) (*GetIndexBeyondTrustResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBeyondTrustResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBeyondTrustPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBinarlyResponse parses an HTTP response from a GetIndexBinarlyWithResponse call
func ParseGetIndexBinarlyResponse(rsp *http.Response) (*GetIndexBinarlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBinarlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBinarlyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBitdefenderResponse parses an HTTP response from a GetIndexBitdefenderWithResponse call
func ParseGetIndexBitdefenderResponse(rsp *http.Response) (*GetIndexBitdefenderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBitdefenderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBitDefenderPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBlackberryResponse parses an HTTP response from a GetIndexBlackberryWithResponse call
func ParseGetIndexBlackberryResponse(rsp *http.Response) (*GetIndexBlackberryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBlackberryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBlackBerryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBlsResponse parses an HTTP response from a GetIndexBlsWithResponse call
func ParseGetIndexBlsResponse(rsp *http.Response) (*GetIndexBlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBLSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBoschResponse parses an HTTP response from a GetIndexBoschWithResponse call
func ParseGetIndexBoschResponse(rsp *http.Response) (*GetIndexBoschResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBoschResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBoschAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBostonScientificResponse parses an HTTP response from a GetIndexBostonScientificWithResponse call
func ParseGetIndexBostonScientificResponse(rsp *http.Response) (*GetIndexBostonScientificResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBostonScientificResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBostonScientificAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexBotnetsResponse parses an HTTP response from a GetIndexBotnetsWithResponse call
func ParseGetIndexBotnetsResponse(rsp *http.Response) (*GetIndexBotnetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexBotnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryBotnetPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCaCyberCentreResponse parses an HTTP response from a GetIndexCaCyberCentreWithResponse call
func ParseGetIndexCaCyberCentreResponse(rsp *http.Response) (*GetIndexCaCyberCentreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCaCyberCentreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCACyberCentreAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCanvasResponse parses an HTTP response from a GetIndexCanvasWithResponse call
func ParseGetIndexCanvasResponse(rsp *http.Response) (*GetIndexCanvasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCanvasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCanvasExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCarestreamResponse parses an HTTP response from a GetIndexCarestreamWithResponse call
func ParseGetIndexCarestreamResponse(rsp *http.Response) (*GetIndexCarestreamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCarestreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCarestreamAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCargoResponse parses an HTTP response from a GetIndexCargoWithResponse call
func ParseGetIndexCargoResponse(rsp *http.Response) (*GetIndexCargoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCargoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCarrierResponse parses an HTTP response from a GetIndexCarrierWithResponse call
func ParseGetIndexCarrierResponse(rsp *http.Response) (*GetIndexCarrierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCarrierPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCblMarinerResponse parses an HTTP response from a GetIndexCblMarinerWithResponse call
func ParseGetIndexCblMarinerResponse(rsp *http.Response) (*GetIndexCblMarinerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCblMarinerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCBLMarinerPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCentosResponse parses an HTTP response from a GetIndexCentosWithResponse call
func ParseGetIndexCentosResponse(rsp *http.Response) (*GetIndexCentosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCentosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCESAPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertBeResponse parses an HTTP response from a GetIndexCertBeWithResponse call
func ParseGetIndexCertBeResponse(rsp *http.Response) (*GetIndexCertBeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertBeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCertBEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertUaResponse parses an HTTP response from a GetIndexCertUaWithResponse call
func ParseGetIndexCertUaResponse(rsp *http.Response) (*GetIndexCertUaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertUaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCertUAPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCerteuResponse parses an HTTP response from a GetIndexCerteuWithResponse call
func ParseGetIndexCerteuResponse(rsp *http.Response) (*GetIndexCerteuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCerteuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCERTEUAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCertfrResponse parses an HTTP response from a GetIndexCertfrWithResponse call
func ParseGetIndexCertfrResponse(rsp *http.Response) (*GetIndexCertfrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCertfrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCertFRAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexChainguardResponse parses an HTTP response from a GetIndexChainguardWithResponse call
func ParseGetIndexChainguardResponse(rsp *http.Response) (*GetIndexChainguardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexChainguardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryChainGuardPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCheckpointResponse parses an HTTP response from a GetIndexCheckpointWithResponse call
func ParseGetIndexCheckpointResponse(rsp *http.Response) (*GetIndexCheckpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCheckpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCheckPointPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexChromeResponse parses an HTTP response from a GetIndexChromeWithResponse call
func ParseGetIndexChromeResponse(rsp *http.Response) (*GetIndexChromeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexChromeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryChromePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCisaAlertsResponse parses an HTTP response from a GetIndexCisaAlertsWithResponse call
func ParseGetIndexCisaAlertsResponse(rsp *http.Response) (*GetIndexCisaAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCisaAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCISAAlertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCisaKevResponse parses an HTTP response from a GetIndexCisaKevWithResponse call
func ParseGetIndexCisaKevResponse(rsp *http.Response) (*GetIndexCisaKevResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCisaKevResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryKEVCatalogVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCiscoResponse parses an HTTP response from a GetIndexCiscoWithResponse call
func ParseGetIndexCiscoResponse(rsp *http.Response) (*GetIndexCiscoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCiscoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCiscoAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCiscoTalosResponse parses an HTTP response from a GetIndexCiscoTalosWithResponse call
func ParseGetIndexCiscoTalosResponse(rsp *http.Response) (*GetIndexCiscoTalosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCiscoTalosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTalosAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCitrixResponse parses an HTTP response from a GetIndexCitrixWithResponse call
func ParseGetIndexCitrixResponse(rsp *http.Response) (*GetIndexCitrixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCitrixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCitrixAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexClarotyResponse parses an HTTP response from a GetIndexClarotyWithResponse call
func ParseGetIndexClarotyResponse(rsp *http.Response) (*GetIndexClarotyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexClarotyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryClarotyVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCloudbeesResponse parses an HTTP response from a GetIndexCloudbeesWithResponse call
func ParseGetIndexCloudbeesResponse(rsp *http.Response) (*GetIndexCloudbeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCloudbeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCloudBeesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCloudvulndbResponse parses an HTTP response from a GetIndexCloudvulndbWithResponse call
func ParseGetIndexCloudvulndbResponse(rsp *http.Response) (*GetIndexCloudvulndbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCloudvulndbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCloudVulnDBAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnaCveCountResponse parses an HTTP response from a GetIndexCnaCveCountWithResponse call
func ParseGetIndexCnaCveCountResponse(rsp *http.Response) (*GetIndexCnaCveCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnaCveCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseV3controllersDefaultIndexResponsePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnnvdResponse parses an HTTP response from a GetIndexCnnvdWithResponse call
func ParseGetIndexCnnvdResponse(rsp *http.Response) (*GetIndexCnnvdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnnvdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCNNVDEntryJSONPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnvdBulletinsResponse parses an HTTP response from a GetIndexCnvdBulletinsWithResponse call
func ParseGetIndexCnvdBulletinsResponse(rsp *http.Response) (*GetIndexCnvdBulletinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnvdBulletinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCNVDBulletinPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCnvdFlawsResponse parses an HTTP response from a GetIndexCnvdFlawsWithResponse call
func ParseGetIndexCnvdFlawsResponse(rsp *http.Response) (*GetIndexCnvdFlawsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCnvdFlawsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCNVDFlawPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCocoapodsResponse parses an HTTP response from a GetIndexCocoapodsWithResponse call
func ParseGetIndexCocoapodsResponse(rsp *http.Response) (*GetIndexCocoapodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCocoapodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCodesysResponse parses an HTTP response from a GetIndexCodesysWithResponse call
func ParseGetIndexCodesysResponse(rsp *http.Response) (*GetIndexCodesysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCodesysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCodesysAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCompassSecurityResponse parses an HTTP response from a GetIndexCompassSecurityWithResponse call
func ParseGetIndexCompassSecurityResponse(rsp *http.Response) (*GetIndexCompassSecurityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCompassSecurityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCompassSecurityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexComposerResponse parses an HTTP response from a GetIndexComposerWithResponse call
func ParseGetIndexComposerResponse(rsp *http.Response) (*GetIndexComposerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexComposerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexConanResponse parses an HTTP response from a GetIndexConanWithResponse call
func ParseGetIndexConanResponse(rsp *http.Response) (*GetIndexConanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexConanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCrestronResponse parses an HTTP response from a GetIndexCrestronWithResponse call
func ParseGetIndexCrestronResponse(rsp *http.Response) (*GetIndexCrestronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCrestronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCrestronPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCurlResponse parses an HTTP response from a GetIndexCurlWithResponse call
func ParseGetIndexCurlResponse(rsp *http.Response) (*GetIndexCurlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCurlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCurlPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexCweResponse parses an HTTP response from a GetIndexCweWithResponse call
func ParseGetIndexCweResponse(rsp *http.Response) (*GetIndexCweResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexCweResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiCWEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDahuaResponse parses an HTTP response from a GetIndexDahuaWithResponse call
func ParseGetIndexDahuaResponse(rsp *http.Response) (*GetIndexDahuaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDahuaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDahuaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDassaultResponse parses an HTTP response from a GetIndexDassaultWithResponse call
func ParseGetIndexDassaultResponse(rsp *http.Response) (*GetIndexDassaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDassaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDassaultPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDebianResponse parses an HTTP response from a GetIndexDebianWithResponse call
func ParseGetIndexDebianResponse(rsp *http.Response) (*GetIndexDebianResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDebianResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVulnerableDebianPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDebianDsaResponse parses an HTTP response from a GetIndexDebianDsaWithResponse call
func ParseGetIndexDebianDsaResponse(rsp *http.Response) (*GetIndexDebianDsaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDebianDsaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDebianSecurityAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDellResponse parses an HTTP response from a GetIndexDellWithResponse call
func ParseGetIndexDellResponse(rsp *http.Response) (*GetIndexDellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDellPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDeltaResponse parses an HTTP response from a GetIndexDeltaWithResponse call
func ParseGetIndexDeltaResponse(rsp *http.Response) (*GetIndexDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDeltaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDotcmsResponse parses an HTTP response from a GetIndexDotcmsWithResponse call
func ParseGetIndexDotcmsResponse(rsp *http.Response) (*GetIndexDotcmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDotcmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDotCMSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDragosResponse parses an HTTP response from a GetIndexDragosWithResponse call
func ParseGetIndexDragosResponse(rsp *http.Response) (*GetIndexDragosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDragosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDragosAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexDraytekResponse parses an HTTP response from a GetIndexDraytekWithResponse call
func ParseGetIndexDraytekResponse(rsp *http.Response) (*GetIndexDraytekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexDraytekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryDraytekPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEatonResponse parses an HTTP response from a GetIndexEatonWithResponse call
func ParseGetIndexEatonResponse(rsp *http.Response) (*GetIndexEatonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEatonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryEatonAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexElasticResponse parses an HTTP response from a GetIndexElasticWithResponse call
func ParseGetIndexElasticResponse(rsp *http.Response) (*GetIndexElasticResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexElasticResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryElasticPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexElspecResponse parses an HTTP response from a GetIndexElspecWithResponse call
func ParseGetIndexElspecResponse(rsp *http.Response) (*GetIndexElspecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexElspecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryElspecPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEmersonResponse parses an HTTP response from a GetIndexEmersonWithResponse call
func ParseGetIndexEmersonResponse(rsp *http.Response) (*GetIndexEmersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEmersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryEmersonAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEolResponse parses an HTTP response from a GetIndexEolWithResponse call
func ParseGetIndexEolResponse(rsp *http.Response) (*GetIndexEolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryEOLReleaseDataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexEpssResponse parses an HTTP response from a GetIndexEpssWithResponse call
func ParseGetIndexEpssResponse(rsp *http.Response) (*GetIndexEpssResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexEpssResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiEPSSDataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExodusIntelResponse parses an HTTP response from a GetIndexExodusIntelWithResponse call
func ParseGetIndexExodusIntelResponse(rsp *http.Response) (*GetIndexExodusIntelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExodusIntelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryExodusIntelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitChainsResponse parses an HTTP response from a GetIndexExploitChainsWithResponse call
func ParseGetIndexExploitChainsResponse(rsp *http.Response) (*GetIndexExploitChainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitChainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiExploitChainPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitdbResponse parses an HTTP response from a GetIndexExploitdbWithResponse call
func ParseGetIndexExploitdbResponse(rsp *http.Response) (*GetIndexExploitdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryExploitDBExploitv2PaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexExploitsResponse parses an HTTP response from a GetIndexExploitsWithResponse call
func ParseGetIndexExploitsResponse(rsp *http.Response) (*GetIndexExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiExploitV3ResultPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFSecureResponse parses an HTTP response from a GetIndexFSecureWithResponse call
func ParseGetIndexFSecureResponse(rsp *http.Response) (*GetIndexFSecureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFSecureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryFSecurePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFastlyResponse parses an HTTP response from a GetIndexFastlyWithResponse call
func ParseGetIndexFastlyResponse(rsp *http.Response) (*GetIndexFastlyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFastlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryFastlyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFedoraResponse parses an HTTP response from a GetIndexFedoraWithResponse call
func ParseGetIndexFedoraResponse(rsp *http.Response) (*GetIndexFedoraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFedoraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFilecloudResponse parses an HTTP response from a GetIndexFilecloudWithResponse call
func ParseGetIndexFilecloudResponse(rsp *http.Response) (*GetIndexFilecloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFilecloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryFileCloudPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexForgerockResponse parses an HTTP response from a GetIndexForgerockWithResponse call
func ParseGetIndexForgerockResponse(rsp *http.Response) (*GetIndexForgerockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexForgerockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryForgeRockPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFortinetResponse parses an HTTP response from a GetIndexFortinetWithResponse call
func ParseGetIndexFortinetResponse(rsp *http.Response) (*GetIndexFortinetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFortinetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryFortinetAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexFreebsdResponse parses an HTTP response from a GetIndexFreebsdWithResponse call
func ParseGetIndexFreebsdResponse(rsp *http.Response) (*GetIndexFreebsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexFreebsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGallagherResponse parses an HTTP response from a GetIndexGallagherWithResponse call
func ParseGetIndexGallagherResponse(rsp *http.Response) (*GetIndexGallagherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGallagherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGallagherPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGcpResponse parses an HTTP response from a GetIndexGcpWithResponse call
func ParseGetIndexGcpResponse(rsp *http.Response) (*GetIndexGcpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGcpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGCPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGeGasResponse parses an HTTP response from a GetIndexGeGasWithResponse call
func ParseGetIndexGeGasResponse(rsp *http.Response) (*GetIndexGeGasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGeGasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGEGasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGeHealthcareResponse parses an HTTP response from a GetIndexGeHealthcareWithResponse call
func ParseGetIndexGeHealthcareResponse(rsp *http.Response) (*GetIndexGeHealthcareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGeHealthcareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGEHealthcareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGemResponse parses an HTTP response from a GetIndexGemWithResponse call
func ParseGetIndexGemResponse(rsp *http.Response) (*GetIndexGemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGenetecResponse parses an HTTP response from a GetIndexGenetecWithResponse call
func ParseGetIndexGenetecResponse(rsp *http.Response) (*GetIndexGenetecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGenetecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGenetecPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGigabyteResponse parses an HTTP response from a GetIndexGigabyteWithResponse call
func ParseGetIndexGigabyteResponse(rsp *http.Response) (*GetIndexGigabyteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGigabyteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGigabytePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGiteeExploitsResponse parses an HTTP response from a GetIndexGiteeExploitsWithResponse call
func ParseGetIndexGiteeExploitsResponse(rsp *http.Response) (*GetIndexGiteeExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGiteeExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGiteeExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGithubExploitsResponse parses an HTTP response from a GetIndexGithubExploitsWithResponse call
func ParseGetIndexGithubExploitsResponse(rsp *http.Response) (*GetIndexGithubExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGithubExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGitHubExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGithubSecurityAdvisoriesResponse parses an HTTP response from a GetIndexGithubSecurityAdvisoriesWithResponse call
func ParseGetIndexGithubSecurityAdvisoriesResponse(rsp *http.Response) (*GetIndexGithubSecurityAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGithubSecurityAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGHAdvisoryJSONLeanPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGitlabAdvisoriesCommunityResponse parses an HTTP response from a GetIndexGitlabAdvisoriesCommunityWithResponse call
func ParseGetIndexGitlabAdvisoriesCommunityResponse(rsp *http.Response) (*GetIndexGitlabAdvisoriesCommunityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGitlabAdvisoriesCommunityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGitlabAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGitlabExploitsResponse parses an HTTP response from a GetIndexGitlabExploitsWithResponse call
func ParseGetIndexGitlabExploitsResponse(rsp *http.Response) (*GetIndexGitlabExploitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGitlabExploitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGitLabExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGnutlsResponse parses an HTTP response from a GetIndexGnutlsWithResponse call
func ParseGetIndexGnutlsResponse(rsp *http.Response) (*GetIndexGnutlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGnutlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGnuTLSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGolangResponse parses an HTTP response from a GetIndexGolangWithResponse call
func ParseGetIndexGolangResponse(rsp *http.Response) (*GetIndexGolangResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGolangResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGoogle0dayItwResponse parses an HTTP response from a GetIndexGoogle0dayItwWithResponse call
func ParseGetIndexGoogle0dayItwResponse(rsp *http.Response) (*GetIndexGoogle0dayItwResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGoogle0dayItwResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryITWExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGoogleContainerOptimizedOsResponse parses an HTTP response from a GetIndexGoogleContainerOptimizedOsWithResponse call
func ParseGetIndexGoogleContainerOptimizedOsResponse(rsp *http.Response) (*GetIndexGoogleContainerOptimizedOsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGoogleContainerOptimizedOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryContainerOSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGrafanaResponse parses an HTTP response from a GetIndexGrafanaWithResponse call
func ParseGetIndexGrafanaResponse(rsp *http.Response) (*GetIndexGrafanaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGrafanaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGrafanaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexGreynoiseMetadataResponse parses an HTTP response from a GetIndexGreynoiseMetadataWithResponse call
func ParseGetIndexGreynoiseMetadataResponse(rsp *http.Response) (*GetIndexGreynoiseMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexGreynoiseMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryGreyNoiseDetectionPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHackageResponse parses an HTTP response from a GetIndexHackageWithResponse call
func ParseGetIndexHackageResponse(rsp *http.Response) (*GetIndexHackageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHarmonyosResponse parses an HTTP response from a GetIndexHarmonyosWithResponse call
func ParseGetIndexHarmonyosResponse(rsp *http.Response) (*GetIndexHarmonyosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHarmonyosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHarmonyOSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHashicorpResponse parses an HTTP response from a GetIndexHashicorpWithResponse call
func ParseGetIndexHashicorpResponse(rsp *http.Response) (*GetIndexHashicorpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHashicorpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHashiCorpPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHaskellSadbResponse parses an HTTP response from a GetIndexHaskellSadbWithResponse call
func ParseGetIndexHaskellSadbResponse(rsp *http.Response) (*GetIndexHaskellSadbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHaskellSadbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHaskellSADBAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHclResponse parses an HTTP response from a GetIndexHclWithResponse call
func ParseGetIndexHclResponse(rsp *http.Response) (*GetIndexHclResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHclResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHCLPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHexResponse parses an HTTP response from a GetIndexHexWithResponse call
func ParseGetIndexHexResponse(rsp *http.Response) (*GetIndexHexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHikvisionResponse parses an HTTP response from a GetIndexHikvisionWithResponse call
func ParseGetIndexHikvisionResponse(rsp *http.Response) (*GetIndexHikvisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHikvisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHIKVisionPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHillromResponse parses an HTTP response from a GetIndexHillromWithResponse call
func ParseGetIndexHillromResponse(rsp *http.Response) (*GetIndexHillromResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHillromResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHillromAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHitachiResponse parses an HTTP response from a GetIndexHitachiWithResponse call
func ParseGetIndexHitachiResponse(rsp *http.Response) (*GetIndexHitachiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHitachiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHitachiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHitachiEnergyResponse parses an HTTP response from a GetIndexHitachiEnergyWithResponse call
func ParseGetIndexHitachiEnergyResponse(rsp *http.Response) (*GetIndexHitachiEnergyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHitachiEnergyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHitachiEnergyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHkcertResponse parses an HTTP response from a GetIndexHkcertWithResponse call
func ParseGetIndexHkcertResponse(rsp *http.Response) (*GetIndexHkcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHkcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHKCertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHoneywellResponse parses an HTTP response from a GetIndexHoneywellWithResponse call
func ParseGetIndexHoneywellResponse(rsp *http.Response) (*GetIndexHoneywellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHoneywellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHoneywellPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHpResponse parses an HTTP response from a GetIndexHpWithResponse call
func ParseGetIndexHpResponse(rsp *http.Response) (*GetIndexHpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHuaweiEulerosResponse parses an HTTP response from a GetIndexHuaweiEulerosWithResponse call
func ParseGetIndexHuaweiEulerosResponse(rsp *http.Response) (*GetIndexHuaweiEulerosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHuaweiEulerosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHuaweiEulerOSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHuaweiIpsResponse parses an HTTP response from a GetIndexHuaweiIpsWithResponse call
func ParseGetIndexHuaweiIpsResponse(rsp *http.Response) (*GetIndexHuaweiIpsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHuaweiIpsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHuaweiIPSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexHuaweiPsirtResponse parses an HTTP response from a GetIndexHuaweiPsirtWithResponse call
func ParseGetIndexHuaweiPsirtResponse(rsp *http.Response) (*GetIndexHuaweiPsirtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexHuaweiPsirtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryHuaweiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIavaResponse parses an HTTP response from a GetIndexIavaWithResponse call
func ParseGetIndexIavaResponse(rsp *http.Response) (*GetIndexIavaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIavaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIAVAPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIbmResponse parses an HTTP response from a GetIndexIbmWithResponse call
func ParseGetIndexIbmResponse(rsp *http.Response) (*GetIndexIbmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIbmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIBMPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIdemiaResponse parses an HTTP response from a GetIndexIdemiaWithResponse call
func ParseGetIndexIdemiaResponse(rsp *http.Response) (*GetIndexIdemiaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIdemiaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIdemiaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIlAlertsResponse parses an HTTP response from a GetIndexIlAlertsWithResponse call
func ParseGetIndexIlAlertsResponse(rsp *http.Response) (*GetIndexIlAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIlAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIsraeliAlertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIlVulnerabilitiesResponse parses an HTTP response from a GetIndexIlVulnerabilitiesWithResponse call
func ParseGetIndexIlVulnerabilitiesResponse(rsp *http.Response) (*GetIndexIlVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIlVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIsraeliVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIncibeResponse parses an HTTP response from a GetIndexIncibeWithResponse call
func ParseGetIndexIncibeResponse(rsp *http.Response) (*GetIndexIncibeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIncibeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIncibeAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexInitialAccessResponse parses an HTTP response from a GetIndexInitialAccessWithResponse call
func ParseGetIndexInitialAccessResponse(rsp *http.Response) (*GetIndexInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiInitialAccessPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexInitialAccessGitResponse parses an HTTP response from a GetIndexInitialAccessGitWithResponse call
func ParseGetIndexInitialAccessGitResponse(rsp *http.Response) (*GetIndexInitialAccessGitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexInitialAccessGitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiInitialAccessPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIntelResponse parses an HTTP response from a GetIndexIntelWithResponse call
func ParseGetIndexIntelResponse(rsp *http.Response) (*GetIndexIntelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIntelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIntelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel10dResponse parses an HTTP response from a GetIndexIpintel10dWithResponse call
func ParseGetIndexIpintel10dResponse(rsp *http.Response) (*GetIndexIpintel10dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel10dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel30dResponse parses an HTTP response from a GetIndexIpintel30dWithResponse call
func ParseGetIndexIpintel30dResponse(rsp *http.Response) (*GetIndexIpintel30dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel30dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel3dResponse parses an HTTP response from a GetIndexIpintel3dWithResponse call
func ParseGetIndexIpintel3dResponse(rsp *http.Response) (*GetIndexIpintel3dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel3dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIpintel90dResponse parses an HTTP response from a GetIndexIpintel90dWithResponse call
func ParseGetIndexIpintel90dResponse(rsp *http.Response) (*GetIndexIpintel90dResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIpintel90dResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIpIntelRecordPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIstioResponse parses an HTTP response from a GetIndexIstioWithResponse call
func ParseGetIndexIstioResponse(rsp *http.Response) (*GetIndexIstioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIstioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIstioPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIvantiResponse parses an HTTP response from a GetIndexIvantiWithResponse call
func ParseGetIndexIvantiResponse(rsp *http.Response) (*GetIndexIvantiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIvantiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIvantiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexIvantiRssResponse parses an HTTP response from a GetIndexIvantiRssWithResponse call
func ParseGetIndexIvantiRssResponse(rsp *http.Response) (*GetIndexIvantiRssResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexIvantiRssResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryIvantiRSSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJenkinsResponse parses an HTTP response from a GetIndexJenkinsWithResponse call
func ParseGetIndexJenkinsResponse(rsp *http.Response) (*GetIndexJenkinsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJenkinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryJenkinsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJetbrainsResponse parses an HTTP response from a GetIndexJetbrainsWithResponse call
func ParseGetIndexJetbrainsResponse(rsp *http.Response) (*GetIndexJetbrainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJetbrainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryJetBrainsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJfrogResponse parses an HTTP response from a GetIndexJfrogWithResponse call
func ParseGetIndexJfrogResponse(rsp *http.Response) (*GetIndexJfrogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJfrogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryJFrogPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJnjResponse parses an HTTP response from a GetIndexJnjWithResponse call
func ParseGetIndexJnjResponse(rsp *http.Response) (*GetIndexJnjResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJnjResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryJNJAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexJvndbResponse parses an HTTP response from a GetIndexJvndbWithResponse call
func ParseGetIndexJvndbResponse(rsp *http.Response) (*GetIndexJvndbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexJvndbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryJVNAdvisoryItemPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKasperskyIcsCertResponse parses an HTTP response from a GetIndexKasperskyIcsCertWithResponse call
func ParseGetIndexKasperskyIcsCertResponse(rsp *http.Response) (*GetIndexKasperskyIcsCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKasperskyIcsCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryKasperskyICSCERTAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKrcertSecurityNoticesResponse parses an HTTP response from a GetIndexKrcertSecurityNoticesWithResponse call
func ParseGetIndexKrcertSecurityNoticesResponse(rsp *http.Response) (*GetIndexKrcertSecurityNoticesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKrcertSecurityNoticesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryKRCertAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKrcertVulnerabilitiesResponse parses an HTTP response from a GetIndexKrcertVulnerabilitiesWithResponse call
func ParseGetIndexKrcertVulnerabilitiesResponse(rsp *http.Response) (*GetIndexKrcertVulnerabilitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKrcertVulnerabilitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryKRCertAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexKubernetesResponse parses an HTTP response from a GetIndexKubernetesWithResponse call
func ParseGetIndexKubernetesResponse(rsp *http.Response) (*GetIndexKubernetesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexKubernetesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryK8SPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLenovoResponse parses an HTTP response from a GetIndexLenovoWithResponse call
func ParseGetIndexLenovoResponse(rsp *http.Response) (*GetIndexLenovoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLenovoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryLenovoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLexmarkResponse parses an HTTP response from a GetIndexLexmarkWithResponse call
func ParseGetIndexLexmarkResponse(rsp *http.Response) (*GetIndexLexmarkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLexmarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryLexmarkAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLgResponse parses an HTTP response from a GetIndexLgWithResponse call
func ParseGetIndexLgResponse(rsp *http.Response) (*GetIndexLgResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLgResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryLGPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLibreOfficeResponse parses an HTTP response from a GetIndexLibreOfficeWithResponse call
func ParseGetIndexLibreOfficeResponse(rsp *http.Response) (*GetIndexLibreOfficeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLibreOfficeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryLibreOfficePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexLinuxResponse parses an HTTP response from a GetIndexLinuxWithResponse call
func ParseGetIndexLinuxResponse(rsp *http.Response) (*GetIndexLinuxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexLinuxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryLinuxPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMFilesResponse parses an HTTP response from a GetIndexMFilesWithResponse call
func ParseGetIndexMFilesResponse(rsp *http.Response) (*GetIndexMFilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMFilesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMacertResponse parses an HTTP response from a GetIndexMacertWithResponse call
func ParseGetIndexMacertResponse(rsp *http.Response) (*GetIndexMacertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMacertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMACertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexManageengineResponse parses an HTTP response from a GetIndexManageengineWithResponse call
func ParseGetIndexManageengineResponse(rsp *http.Response) (*GetIndexManageengineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexManageengineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryManageEngineAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMavenResponse parses an HTTP response from a GetIndexMavenWithResponse call
func ParseGetIndexMavenResponse(rsp *http.Response) (*GetIndexMavenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMavenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMbedTlsResponse parses an HTTP response from a GetIndexMbedTlsWithResponse call
func ParseGetIndexMbedTlsResponse(rsp *http.Response) (*GetIndexMbedTlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMbedTlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMbedTLSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMediatekResponse parses an HTTP response from a GetIndexMediatekWithResponse call
func ParseGetIndexMediatekResponse(rsp *http.Response) (*GetIndexMediatekResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMediatekResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMediatekPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMedtronicResponse parses an HTTP response from a GetIndexMedtronicWithResponse call
func ParseGetIndexMedtronicResponse(rsp *http.Response) (*GetIndexMedtronicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMedtronicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMedtronicAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMendixResponse parses an HTTP response from a GetIndexMendixWithResponse call
func ParseGetIndexMendixResponse(rsp *http.Response) (*GetIndexMendixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMendixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMendixPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMetasploitResponse parses an HTTP response from a GetIndexMetasploitWithResponse call
func ParseGetIndexMetasploitResponse(rsp *http.Response) (*GetIndexMetasploitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMetasploitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMetasploitExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMicrosoftCvrfResponse parses an HTTP response from a GetIndexMicrosoftCvrfWithResponse call
func ParseGetIndexMicrosoftCvrfResponse(rsp *http.Response) (*GetIndexMicrosoftCvrfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMicrosoftCvrfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMicrosoftCVRFPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMicrosoftKbResponse parses an HTTP response from a GetIndexMicrosoftKbWithResponse call
func ParseGetIndexMicrosoftKbResponse(rsp *http.Response) (*GetIndexMicrosoftKbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMicrosoftKbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMicrosoftKbPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMikrotikResponse parses an HTTP response from a GetIndexMikrotikWithResponse call
func ParseGetIndexMikrotikResponse(rsp *http.Response) (*GetIndexMikrotikResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMikrotikResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMikrotikPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMindrayResponse parses an HTTP response from a GetIndexMindrayWithResponse call
func ParseGetIndexMindrayResponse(rsp *http.Response) (*GetIndexMindrayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMindrayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMindrayPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMispThreatActorsResponse parses an HTTP response from a GetIndexMispThreatActorsWithResponse call
func ParseGetIndexMispThreatActorsResponse(rsp *http.Response) (*GetIndexMispThreatActorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMispThreatActorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMispValuePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitelResponse parses an HTTP response from a GetIndexMitelWithResponse call
func ParseGetIndexMitelResponse(rsp *http.Response) (*GetIndexMitelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMitelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitreAttackCveResponse parses an HTTP response from a GetIndexMitreAttackCveWithResponse call
func ParseGetIndexMitreAttackCveResponse(rsp *http.Response) (*GetIndexMitreAttackCveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitreAttackCveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiMitreAttackToCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitreCveResponse parses an HTTP response from a GetIndexMitreCveWithResponse call
func ParseGetIndexMitreCveResponse(rsp *http.Response) (*GetIndexMitreCveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitreCveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMitreCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMitsubishiElectricResponse parses an HTTP response from a GetIndexMitsubishiElectricWithResponse call
func ParseGetIndexMitsubishiElectricResponse(rsp *http.Response) (*GetIndexMitsubishiElectricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMitsubishiElectricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMitsubishiElectricAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMongodbResponse parses an HTTP response from a GetIndexMongodbWithResponse call
func ParseGetIndexMongodbResponse(rsp *http.Response) (*GetIndexMongodbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMongodbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMongoDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMoxaResponse parses an HTTP response from a GetIndexMoxaWithResponse call
func ParseGetIndexMoxaResponse(rsp *http.Response) (*GetIndexMoxaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMoxaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMoxaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexMozillaResponse parses an HTTP response from a GetIndexMozillaWithResponse call
func ParseGetIndexMozillaResponse(rsp *http.Response) (*GetIndexMozillaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexMozillaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMozillaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNaverResponse parses an HTTP response from a GetIndexNaverWithResponse call
func ParseGetIndexNaverResponse(rsp *http.Response) (*GetIndexNaverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNaverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNaverPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNecResponse parses an HTTP response from a GetIndexNecWithResponse call
func ParseGetIndexNecResponse(rsp *http.Response) (*GetIndexNecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNECPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetappResponse parses an HTTP response from a GetIndexNetappWithResponse call
func ParseGetIndexNetappResponse(rsp *http.Response) (*GetIndexNetappResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetappResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNetAppPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetgateResponse parses an HTTP response from a GetIndexNetgateWithResponse call
func ParseGetIndexNetgateResponse(rsp *http.Response) (*GetIndexNetgateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetgateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNetgatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetgearResponse parses an HTTP response from a GetIndexNetgearWithResponse call
func ParseGetIndexNetgearResponse(rsp *http.Response) (*GetIndexNetgearResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetgearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNetgearPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNetskopeResponse parses an HTTP response from a GetIndexNetskopeWithResponse call
func ParseGetIndexNetskopeResponse(rsp *http.Response) (*GetIndexNetskopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNetskopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNetskopePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNginxResponse parses an HTTP response from a GetIndexNginxWithResponse call
func ParseGetIndexNginxResponse(rsp *http.Response) (*GetIndexNginxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNginxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNginxAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNhsResponse parses an HTTP response from a GetIndexNhsWithResponse call
func ParseGetIndexNhsResponse(rsp *http.Response) (*GetIndexNhsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNhsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNHSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNiResponse parses an HTTP response from a GetIndexNiWithResponse call
func ParseGetIndexNiResponse(rsp *http.Response) (*GetIndexNiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNIPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNistNvdResponse parses an HTTP response from a GetIndexNistNvdWithResponse call
func ParseGetIndexNistNvdResponse(rsp *http.Response) (*GetIndexNistNvdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNistNvdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiCveItemsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNistNvd2Response parses an HTTP response from a GetIndexNistNvd2WithResponse call
func ParseGetIndexNistNvd2Response(rsp *http.Response) (*GetIndexNistNvd2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNistNvd2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiNVD20CVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNistNvd2CpematchResponse parses an HTTP response from a GetIndexNistNvd2CpematchWithResponse call
func ParseGetIndexNistNvd2CpematchResponse(rsp *http.Response) (*GetIndexNistNvd2CpematchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNistNvd2CpematchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiNVD20CPEMatchPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNodeSecurityResponse parses an HTTP response from a GetIndexNodeSecurityWithResponse call
func ParseGetIndexNodeSecurityResponse(rsp *http.Response) (*GetIndexNodeSecurityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNodeSecurityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNodeSecurityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNodejsResponse parses an HTTP response from a GetIndexNodejsWithResponse call
func ParseGetIndexNodejsResponse(rsp *http.Response) (*GetIndexNodejsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNodejsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNodeJSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNokiaResponse parses an HTTP response from a GetIndexNokiaWithResponse call
func ParseGetIndexNokiaResponse(rsp *http.Response) (*GetIndexNokiaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNokiaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNokiaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNozomiResponse parses an HTTP response from a GetIndexNozomiWithResponse call
func ParseGetIndexNozomiResponse(rsp *http.Response) (*GetIndexNozomiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNozomiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNozomiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNpmResponse parses an HTTP response from a GetIndexNpmWithResponse call
func ParseGetIndexNpmResponse(rsp *http.Response) (*GetIndexNpmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNpmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNugetResponse parses an HTTP response from a GetIndexNugetWithResponse call
func ParseGetIndexNugetResponse(rsp *http.Response) (*GetIndexNugetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNugetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNvidiaResponse parses an HTTP response from a GetIndexNvidiaWithResponse call
func ParseGetIndexNvidiaResponse(rsp *http.Response) (*GetIndexNvidiaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNvidiaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySecurityBulletinPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexNzAdvisoriesResponse parses an HTTP response from a GetIndexNzAdvisoriesWithResponse call
func ParseGetIndexNzAdvisoriesResponse(rsp *http.Response) (*GetIndexNzAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexNzAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryNZAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOctopusDeployResponse parses an HTTP response from a GetIndexOctopusDeployWithResponse call
func ParseGetIndexOctopusDeployResponse(rsp *http.Response) (*GetIndexOctopusDeployResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOctopusDeployResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOctopusDeployPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOktaResponse parses an HTTP response from a GetIndexOktaWithResponse call
func ParseGetIndexOktaResponse(rsp *http.Response) (*GetIndexOktaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOktaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOktaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOmronResponse parses an HTTP response from a GetIndexOmronWithResponse call
func ParseGetIndexOmronResponse(rsp *http.Response) (*GetIndexOmronResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOmronResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOmronPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOneEResponse parses an HTTP response from a GetIndexOneEWithResponse call
func ParseGetIndexOneEResponse(rsp *http.Response) (*GetIndexOneEResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOneEResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOneEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpamResponse parses an HTTP response from a GetIndexOpamWithResponse call
func ParseGetIndexOpamResponse(rsp *http.Response) (*GetIndexOpamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenCvdbResponse parses an HTTP response from a GetIndexOpenCvdbWithResponse call
func ParseGetIndexOpenCvdbResponse(rsp *http.Response) (*GetIndexOpenCvdbResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenCvdbResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOpenCVDBPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenbsdResponse parses an HTTP response from a GetIndexOpenbsdWithResponse call
func ParseGetIndexOpenbsdResponse(rsp *http.Response) (*GetIndexOpenbsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenbsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOpenBSDPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpensshResponse parses an HTTP response from a GetIndexOpensshWithResponse call
func ParseGetIndexOpensshResponse(rsp *http.Response) (*GetIndexOpensshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpensshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOpenSSHPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpensslSecadvResponse parses an HTTP response from a GetIndexOpensslSecadvWithResponse call
func ParseGetIndexOpensslSecadvResponse(rsp *http.Response) (*GetIndexOpensslSecadvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpensslSecadvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOpenSSLSecAdvPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenstackResponse parses an HTTP response from a GetIndexOpenstackWithResponse call
func ParseGetIndexOpenstackResponse(rsp *http.Response) (*GetIndexOpenstackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenstackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOpenStackPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOpenwrtResponse parses an HTTP response from a GetIndexOpenwrtWithResponse call
func ParseGetIndexOpenwrtResponse(rsp *http.Response) (*GetIndexOpenwrtResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOpenwrtResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWRTPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOracleResponse parses an HTTP response from a GetIndexOracleWithResponse call
func ParseGetIndexOracleResponse(rsp *http.Response) (*GetIndexOracleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOracleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryMetaDataPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOracleCpuResponse parses an HTTP response from a GetIndexOracleCpuWithResponse call
func ParseGetIndexOracleCpuResponse(rsp *http.Response) (*GetIndexOracleCpuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOracleCpuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOracleCPUPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOracleCpuCsafResponse parses an HTTP response from a GetIndexOracleCpuCsafWithResponse call
func ParseGetIndexOracleCpuCsafResponse(rsp *http.Response) (*GetIndexOracleCpuCsafResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOracleCpuCsafResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOracleCPUCSAFPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOsvResponse parses an HTTP response from a GetIndexOsvWithResponse call
func ParseGetIndexOsvResponse(rsp *http.Response) (*GetIndexOsvResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOsvResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOSVPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOtrsResponse parses an HTTP response from a GetIndexOtrsWithResponse call
func ParseGetIndexOtrsResponse(rsp *http.Response) (*GetIndexOtrsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOtrsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOTRSPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexOwncloudResponse parses an HTTP response from a GetIndexOwncloudWithResponse call
func ParseGetIndexOwncloudResponse(rsp *http.Response) (*GetIndexOwncloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexOwncloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryOwnCloudPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPalantirResponse parses an HTTP response from a GetIndexPalantirWithResponse call
func ParseGetIndexPalantirResponse(rsp *http.Response) (*GetIndexPalantirResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPalantirResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPalantirPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPaloAltoResponse parses an HTTP response from a GetIndexPaloAltoWithResponse call
func ParseGetIndexPaloAltoResponse(rsp *http.Response) (*GetIndexPaloAltoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPaloAltoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPaloAltoAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPanasonicResponse parses an HTTP response from a GetIndexPanasonicWithResponse call
func ParseGetIndexPanasonicResponse(rsp *http.Response) (*GetIndexPanasonicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPanasonicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPanasonicPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPapercutResponse parses an HTTP response from a GetIndexPapercutWithResponse call
func ParseGetIndexPapercutResponse(rsp *http.Response) (*GetIndexPapercutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPapercutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPaperCutPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPegaResponse parses an HTTP response from a GetIndexPegaWithResponse call
func ParseGetIndexPegaResponse(rsp *http.Response) (*GetIndexPegaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPegaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPegaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPhilipsResponse parses an HTTP response from a GetIndexPhilipsWithResponse call
func ParseGetIndexPhilipsResponse(rsp *http.Response) (*GetIndexPhilipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPhilipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPhilipsAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPhoenixContactResponse parses an HTTP response from a GetIndexPhoenixContactWithResponse call
func ParseGetIndexPhoenixContactResponse(rsp *http.Response) (*GetIndexPhoenixContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPhoenixContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPhoenixContactAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPostgressqlResponse parses an HTTP response from a GetIndexPostgressqlWithResponse call
func ParseGetIndexPostgressqlResponse(rsp *http.Response) (*GetIndexPostgressqlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPostgressqlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPostgresSQLPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexProgressResponse parses an HTTP response from a GetIndexProgressWithResponse call
func ParseGetIndexProgressResponse(rsp *http.Response) (*GetIndexProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryProgressPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexProofpointResponse parses an HTTP response from a GetIndexProofpointWithResponse call
func ParseGetIndexProofpointResponse(rsp *http.Response) (*GetIndexProofpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexProofpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryProofpointPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPubResponse parses an HTTP response from a GetIndexPubWithResponse call
func ParseGetIndexPubResponse(rsp *http.Response) (*GetIndexPubResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPubResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPureStorageResponse parses an HTTP response from a GetIndexPureStorageWithResponse call
func ParseGetIndexPureStorageResponse(rsp *http.Response) (*GetIndexPureStorageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPureStorageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPureStoragePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPypaAdvisoriesResponse parses an HTTP response from a GetIndexPypaAdvisoriesWithResponse call
func ParseGetIndexPypaAdvisoriesResponse(rsp *http.Response) (*GetIndexPypaAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPypaAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryPyPAAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexPypiResponse parses an HTTP response from a GetIndexPypiWithResponse call
func ParseGetIndexPypiResponse(rsp *http.Response) (*GetIndexPypiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexPypiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQnapResponse parses an HTTP response from a GetIndexQnapWithResponse call
func ParseGetIndexQnapResponse(rsp *http.Response) (*GetIndexQnapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQnapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryQNAPAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQualcommResponse parses an HTTP response from a GetIndexQualcommWithResponse call
func ParseGetIndexQualcommResponse(rsp *http.Response) (*GetIndexQualcommResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQualcommResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryQualcommPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexQualysResponse parses an HTTP response from a GetIndexQualysWithResponse call
func ParseGetIndexQualysResponse(rsp *http.Response) (*GetIndexQualysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexQualysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryQualysPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRansomwareResponse parses an HTTP response from a GetIndexRansomwareWithResponse call
func ParseGetIndexRansomwareResponse(rsp *http.Response) (*GetIndexRansomwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRansomwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRansomwareExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRedhatResponse parses an HTTP response from a GetIndexRedhatWithResponse call
func ParseGetIndexRedhatResponse(rsp *http.Response) (*GetIndexRedhatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRedhatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRedhatCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRenesasResponse parses an HTTP response from a GetIndexRenesasWithResponse call
func ParseGetIndexRenesasResponse(rsp *http.Response) (*GetIndexRenesasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRenesasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRenesasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexReviveResponse parses an HTTP response from a GetIndexReviveWithResponse call
func ParseGetIndexReviveResponse(rsp *http.Response) (*GetIndexReviveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexReviveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRevivePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRockwellResponse parses an HTTP response from a GetIndexRockwellWithResponse call
func ParseGetIndexRockwellResponse(rsp *http.Response) (*GetIndexRockwellResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRockwellResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRockwellPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRockyResponse parses an HTTP response from a GetIndexRockyWithResponse call
func ParseGetIndexRockyResponse(rsp *http.Response) (*GetIndexRockyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRockyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiUpdatePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRuckusResponse parses an HTTP response from a GetIndexRuckusWithResponse call
func ParseGetIndexRuckusResponse(rsp *http.Response) (*GetIndexRuckusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRuckusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRuckusPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexRustsecAdvisoriesResponse parses an HTTP response from a GetIndexRustsecAdvisoriesWithResponse call
func ParseGetIndexRustsecAdvisoriesResponse(rsp *http.Response) (*GetIndexRustsecAdvisoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexRustsecAdvisoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryRustsecAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSacertResponse parses an HTTP response from a GetIndexSacertWithResponse call
func ParseGetIndexSacertResponse(rsp *http.Response) (*GetIndexSacertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSacertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySAAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSaintResponse parses an HTTP response from a GetIndexSaintWithResponse call
func ParseGetIndexSaintResponse(rsp *http.Response) (*GetIndexSaintResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSaintResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySaintExploitPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSalesforceResponse parses an HTTP response from a GetIndexSalesforceWithResponse call
func ParseGetIndexSalesforceResponse(rsp *http.Response) (*GetIndexSalesforceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSalesforceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySalesForcePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSambaResponse parses an HTTP response from a GetIndexSambaWithResponse call
func ParseGetIndexSambaResponse(rsp *http.Response) (*GetIndexSambaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSambaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySambaPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSapResponse parses an HTTP response from a GetIndexSapWithResponse call
func ParseGetIndexSapResponse(rsp *http.Response) (*GetIndexSapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySAPPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSchneiderElectricResponse parses an HTTP response from a GetIndexSchneiderElectricWithResponse call
func ParseGetIndexSchneiderElectricResponse(rsp *http.Response) (*GetIndexSchneiderElectricResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSchneiderElectricResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySchneiderElectricAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSecConsultResponse parses an HTTP response from a GetIndexSecConsultWithResponse call
func ParseGetIndexSecConsultResponse(rsp *http.Response) (*GetIndexSecConsultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSecConsultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySECConsultPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSelResponse parses an HTTP response from a GetIndexSelWithResponse call
func ParseGetIndexSelResponse(rsp *http.Response) (*GetIndexSelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSentineloneResponse parses an HTTP response from a GetIndexSentineloneWithResponse call
func ParseGetIndexSentineloneResponse(rsp *http.Response) (*GetIndexSentineloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSentineloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySentinelOnePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexServicenowResponse parses an HTTP response from a GetIndexServicenowWithResponse call
func ParseGetIndexServicenowResponse(rsp *http.Response) (*GetIndexServicenowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexServicenowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryServiceNowPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexShadowserverExploitedResponse parses an HTTP response from a GetIndexShadowserverExploitedWithResponse call
func ParseGetIndexShadowserverExploitedResponse(rsp *http.Response) (*GetIndexShadowserverExploitedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexShadowserverExploitedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryShadowServerExploitedVulnerabilityPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSickResponse parses an HTTP response from a GetIndexSickWithResponse call
func ParseGetIndexSickResponse(rsp *http.Response) (*GetIndexSickResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySickPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSiemensResponse parses an HTTP response from a GetIndexSiemensWithResponse call
func ParseGetIndexSiemensResponse(rsp *http.Response) (*GetIndexSiemensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSiemensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySiemensAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSierraWirelessResponse parses an HTTP response from a GetIndexSierraWirelessWithResponse call
func ParseGetIndexSierraWirelessResponse(rsp *http.Response) (*GetIndexSierraWirelessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSierraWirelessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySierraWirelessPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSingcertResponse parses an HTTP response from a GetIndexSingcertWithResponse call
func ParseGetIndexSingcertResponse(rsp *http.Response) (*GetIndexSingcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSingcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySingCertPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSlackwareResponse parses an HTTP response from a GetIndexSlackwareWithResponse call
func ParseGetIndexSlackwareResponse(rsp *http.Response) (*GetIndexSlackwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSlackwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySlackwarePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSolarwindsResponse parses an HTTP response from a GetIndexSolarwindsWithResponse call
func ParseGetIndexSolarwindsResponse(rsp *http.Response) (*GetIndexSolarwindsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSolarwindsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySolarWindsAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSolrResponse parses an HTTP response from a GetIndexSolrWithResponse call
func ParseGetIndexSolrResponse(rsp *http.Response) (*GetIndexSolrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSolrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySolrPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSonicwallResponse parses an HTTP response from a GetIndexSonicwallWithResponse call
func ParseGetIndexSonicwallResponse(rsp *http.Response) (*GetIndexSonicwallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSonicwallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySonicWallAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSpacelabsHealthcareResponse parses an HTTP response from a GetIndexSpacelabsHealthcareWithResponse call
func ParseGetIndexSpacelabsHealthcareResponse(rsp *http.Response) (*GetIndexSpacelabsHealthcareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSpacelabsHealthcareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySpacelabsHealthcareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSpringResponse parses an HTTP response from a GetIndexSpringWithResponse call
func ParseGetIndexSpringResponse(rsp *http.Response) (*GetIndexSpringResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSpringResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySpringPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSsdResponse parses an HTTP response from a GetIndexSsdWithResponse call
func ParseGetIndexSsdResponse(rsp *http.Response) (*GetIndexSsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySSDAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexStormshieldResponse parses an HTTP response from a GetIndexStormshieldWithResponse call
func ParseGetIndexStormshieldResponse(rsp *http.Response) (*GetIndexStormshieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexStormshieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryStormshieldPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexStrykerResponse parses an HTTP response from a GetIndexStrykerWithResponse call
func ParseGetIndexStrykerResponse(rsp *http.Response) (*GetIndexStrykerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexStrykerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryStrykerAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSudoResponse parses an HTTP response from a GetIndexSudoWithResponse call
func ParseGetIndexSudoResponse(rsp *http.Response) (*GetIndexSudoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSudoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySudoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSuseResponse parses an HTTP response from a GetIndexSuseWithResponse call
func ParseGetIndexSuseResponse(rsp *http.Response) (*GetIndexSuseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSuseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryCvrfPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSwiftResponse parses an HTTP response from a GetIndexSwiftWithResponse call
func ParseGetIndexSwiftResponse(rsp *http.Response) (*GetIndexSwiftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSwiftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiOSSPackagePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSwisslogHealthcareResponse parses an HTTP response from a GetIndexSwisslogHealthcareWithResponse call
func ParseGetIndexSwisslogHealthcareResponse(rsp *http.Response) (*GetIndexSwisslogHealthcareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSwisslogHealthcareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySwisslogHealthcareAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSymfonyResponse parses an HTTP response from a GetIndexSymfonyWithResponse call
func ParseGetIndexSymfonyResponse(rsp *http.Response) (*GetIndexSymfonyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSymfonyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySymfonyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSyncrosoftResponse parses an HTTP response from a GetIndexSyncrosoftWithResponse call
func ParseGetIndexSyncrosoftResponse(rsp *http.Response) (*GetIndexSyncrosoftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSyncrosoftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySyncroSoftPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexSynologyResponse parses an HTTP response from a GetIndexSynologyWithResponse call
func ParseGetIndexSynologyResponse(rsp *http.Response) (*GetIndexSynologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexSynologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisorySynologyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTeamviewerResponse parses an HTTP response from a GetIndexTeamviewerWithResponse call
func ParseGetIndexTeamviewerResponse(rsp *http.Response) (*GetIndexTeamviewerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTeamviewerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTeamViewerPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTencentResponse parses an HTTP response from a GetIndexTencentWithResponse call
func ParseGetIndexTencentResponse(rsp *http.Response) (*GetIndexTencentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTencentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTencentPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexThalesResponse parses an HTTP response from a GetIndexThalesWithResponse call
func ParseGetIndexThalesResponse(rsp *http.Response) (*GetIndexThalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexThalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryThalesPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexThemissinglinkResponse parses an HTTP response from a GetIndexThemissinglinkWithResponse call
func ParseGetIndexThemissinglinkResponse(rsp *http.Response) (*GetIndexThemissinglinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexThemissinglinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTheMissingLinkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexThreatActorsResponse parses an HTTP response from a GetIndexThreatActorsWithResponse call
func ParseGetIndexThreatActorsResponse(rsp *http.Response) (*GetIndexThreatActorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexThreatActorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryThreatActorWithExternalObjectsPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTiResponse parses an HTTP response from a GetIndexTiWithResponse call
func ParseGetIndexTiResponse(rsp *http.Response) (*GetIndexTiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTIPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTibcoResponse parses an HTTP response from a GetIndexTibcoWithResponse call
func ParseGetIndexTibcoResponse(rsp *http.Response) (*GetIndexTibcoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTibcoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTibcoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTpLinkResponse parses an HTTP response from a GetIndexTpLinkWithResponse call
func ParseGetIndexTpLinkResponse(rsp *http.Response) (*GetIndexTpLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTpLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTPLinkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTraneTechnologyResponse parses an HTTP response from a GetIndexTraneTechnologyWithResponse call
func ParseGetIndexTraneTechnologyResponse(rsp *http.Response) (*GetIndexTraneTechnologyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTraneTechnologyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTraneTechnologyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTrendmicroResponse parses an HTTP response from a GetIndexTrendmicroWithResponse call
func ParseGetIndexTrendmicroResponse(rsp *http.Response) (*GetIndexTrendmicroResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTrendmicroResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTrendMicroPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTrustwaveResponse parses an HTTP response from a GetIndexTrustwaveWithResponse call
func ParseGetIndexTrustwaveResponse(rsp *http.Response) (*GetIndexTrustwaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTrustwaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTrustwavePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexTwcertResponse parses an HTTP response from a GetIndexTwcertWithResponse call
func ParseGetIndexTwcertResponse(rsp *http.Response) (*GetIndexTwcertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexTwcertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryTWCertAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUbiquitiResponse parses an HTTP response from a GetIndexUbiquitiWithResponse call
func ParseGetIndexUbiquitiResponse(rsp *http.Response) (*GetIndexUbiquitiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUbiquitiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUbiquitiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUbuntuResponse parses an HTTP response from a GetIndexUbuntuWithResponse call
func ParseGetIndexUbuntuResponse(rsp *http.Response) (*GetIndexUbuntuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUbuntuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUbuntuCVEPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUnifyResponse parses an HTTP response from a GetIndexUnifyWithResponse call
func ParseGetIndexUnifyResponse(rsp *http.Response) (*GetIndexUnifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUnifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUnifyPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUnisocResponse parses an HTTP response from a GetIndexUnisocWithResponse call
func ParseGetIndexUnisocResponse(rsp *http.Response) (*GetIndexUnisocResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUnisocResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUnisocPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUsdResponse parses an HTTP response from a GetIndexUsdWithResponse call
func ParseGetIndexUsdResponse(rsp *http.Response) (*GetIndexUsdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUsdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUSDPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexUsomResponse parses an HTTP response from a GetIndexUsomWithResponse call
func ParseGetIndexUsomResponse(rsp *http.Response) (*GetIndexUsomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexUsomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryUSOMAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVandykeResponse parses an HTTP response from a GetIndexVandykeWithResponse call
func ParseGetIndexVandykeResponse(rsp *http.Response) (*GetIndexVandykeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVandykeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVanDykePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVapidlabsResponse parses an HTTP response from a GetIndexVapidlabsWithResponse call
func ParseGetIndexVapidlabsResponse(rsp *http.Response) (*GetIndexVapidlabsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVapidlabsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVapidLabsAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVdeResponse parses an HTTP response from a GetIndexVdeWithResponse call
func ParseGetIndexVdeResponse(rsp *http.Response) (*GetIndexVdeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVdeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVDEAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVeeamResponse parses an HTTP response from a GetIndexVeeamWithResponse call
func ParseGetIndexVeeamResponse(rsp *http.Response) (*GetIndexVeeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVeeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVeeamPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVoidsecResponse parses an HTTP response from a GetIndexVoidsecWithResponse call
func ParseGetIndexVoidsecResponse(rsp *http.Response) (*GetIndexVoidsecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVoidsecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVoidSecPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckConfigResponse parses an HTTP response from a GetIndexVulncheckConfigWithResponse call
func ParseGetIndexVulncheckConfigResponse(rsp *http.Response) (*GetIndexVulncheckConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVulnCheckConfigPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckKevResponse parses an HTTP response from a GetIndexVulncheckKevWithResponse call
func ParseGetIndexVulncheckKevResponse(rsp *http.Response) (*GetIndexVulncheckKevResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckKevResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVulnCheckKEVPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckNvdResponse parses an HTTP response from a GetIndexVulncheckNvdWithResponse call
func ParseGetIndexVulncheckNvdResponse(rsp *http.Response) (*GetIndexVulncheckNvdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckNvdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiCveItemsExtendedPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulncheckNvd2Response parses an HTTP response from a GetIndexVulncheckNvd2WithResponse call
func ParseGetIndexVulncheckNvd2Response(rsp *http.Response) (*GetIndexVulncheckNvd2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulncheckNvd2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiNVD20CVEExtendedPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVulnerabilityAliasesResponse parses an HTTP response from a GetIndexVulnerabilityAliasesWithResponse call
func ParseGetIndexVulnerabilityAliasesResponse(rsp *http.Response) (*GetIndexVulnerabilityAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVulnerabilityAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseApiVulnerabilityAliasPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexVyaireResponse parses an HTTP response from a GetIndexVyaireWithResponse call
func ParseGetIndexVyaireResponse(rsp *http.Response) (*GetIndexVyaireResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexVyaireResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryVYAIREAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWatchguardResponse parses an HTTP response from a GetIndexWatchguardWithResponse call
func ParseGetIndexWatchguardResponse(rsp *http.Response) (*GetIndexWatchguardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWatchguardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWatchGuardPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWhatsappResponse parses an HTTP response from a GetIndexWhatsappWithResponse call
func ParseGetIndexWhatsappResponse(rsp *http.Response) (*GetIndexWhatsappResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWhatsappResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWhatsAppPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWibuResponse parses an HTTP response from a GetIndexWibuWithResponse call
func ParseGetIndexWibuResponse(rsp *http.Response) (*GetIndexWibuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWibuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWibuPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWiresharkResponse parses an HTTP response from a GetIndexWiresharkWithResponse call
func ParseGetIndexWiresharkResponse(rsp *http.Response) (*GetIndexWiresharkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWiresharkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWiresharkPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWithSecureResponse parses an HTTP response from a GetIndexWithSecureWithResponse call
func ParseGetIndexWithSecureResponse(rsp *http.Response) (*GetIndexWithSecureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWithSecureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWithSecurePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWolfiResponse parses an HTTP response from a GetIndexWolfiWithResponse call
func ParseGetIndexWolfiResponse(rsp *http.Response) (*GetIndexWolfiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWolfiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWolfiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWolfsslResponse parses an HTTP response from a GetIndexWolfsslWithResponse call
func ParseGetIndexWolfsslResponse(rsp *http.Response) (*GetIndexWolfsslResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWolfsslResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWolfSSLPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexWordfenceResponse parses an HTTP response from a GetIndexWordfenceWithResponse call
func ParseGetIndexWordfenceResponse(rsp *http.Response) (*GetIndexWordfenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexWordfenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryWordfencePaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXenResponse parses an HTTP response from a GetIndexXenWithResponse call
func ParseGetIndexXenResponse(rsp *http.Response) (*GetIndexXenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryXenPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXeroxResponse parses an HTTP response from a GetIndexXeroxWithResponse call
func ParseGetIndexXeroxResponse(rsp *http.Response) (*GetIndexXeroxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXeroxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryXeroxPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXiaomiResponse parses an HTTP response from a GetIndexXiaomiWithResponse call
func ParseGetIndexXiaomiResponse(rsp *http.Response) (*GetIndexXiaomiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXiaomiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryXiaomiPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexXylemResponse parses an HTTP response from a GetIndexXylemWithResponse call
func ParseGetIndexXylemResponse(rsp *http.Response) (*GetIndexXylemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexXylemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryXylemPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexYokogawaResponse parses an HTTP response from a GetIndexYokogawaWithResponse call
func ParseGetIndexYokogawaResponse(rsp *http.Response) (*GetIndexYokogawaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexYokogawaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryYokogawaAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexYubicoResponse parses an HTTP response from a GetIndexYubicoWithResponse call
func ParseGetIndexYubicoResponse(rsp *http.Response) (*GetIndexYubicoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexYubicoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryYubicoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZdiResponse parses an HTTP response from a GetIndexZdiWithResponse call
func ParseGetIndexZdiResponse(rsp *http.Response) (*GetIndexZdiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZdiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZeroDayAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZeroscienceResponse parses an HTTP response from a GetIndexZeroscienceWithResponse call
func ParseGetIndexZeroscienceResponse(rsp *http.Response) (*GetIndexZeroscienceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZeroscienceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZeroScienceAdvisoryPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZimbraResponse parses an HTTP response from a GetIndexZimbraWithResponse call
func ParseGetIndexZimbraResponse(rsp *http.Response) (*GetIndexZimbraResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZimbraResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZimbraPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZoomResponse parses an HTTP response from a GetIndexZoomWithResponse call
func ParseGetIndexZoomResponse(rsp *http.Response) (*GetIndexZoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZoomPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZscalerResponse parses an HTTP response from a GetIndexZscalerWithResponse call
func ParseGetIndexZscalerResponse(rsp *http.Response) (*GetIndexZscalerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZscalerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZscalerPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZusoResponse parses an HTTP response from a GetIndexZusoWithResponse call
func ParseGetIndexZusoResponse(rsp *http.Response) (*GetIndexZusoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZusoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZusoPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIndexZyxelResponse parses an HTTP response from a GetIndexZyxelWithResponse call
func ParseGetIndexZyxelResponse(rsp *http.Response) (*GetIndexZyxelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexZyxelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseAdvisoryZyxelPaginatePagination
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOpenapiResponse parses an HTTP response from a GetOpenapiWithResponse call
func ParseGetOpenapiResponse(rsp *http.Response) (*GetOpenapiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPurlResponse parses an HTTP response from a GetPurlWithResponse call
func ParseGetPurlResponse(rsp *http.Response) (*GetPurlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPurlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FumeResponseV3controllersPurlResponseDataV3controllersPurlResponseMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTagsVulncheckC2Response parses an HTTP response from a GetTagsVulncheckC2WithResponse call
func ParseGetTagsVulncheckC2Response(rsp *http.Response) (*GetTagsVulncheckC2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsVulncheckC2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+z965IbyXUvir9KBfeOkPQPdpNDevsvzbduACQxZF/UaIK6UAEnqhaAFLIyazKzgMZ4",
	"K8KS4oSPw47tOOcBzpfzAiNZ2h5LlvwKzTc6UVdUAZlZ10Z39Yw+jJqovKz1y9vKlevy909s5nqMApXi",
	"yed//4TDlz4IecocDOEPHuLIFcdD5+YKvrwM/xH8bDMqgcrgT+R5BNtIYkaf/VIwGvwm7AW4KPjrv3OY",
	"Pfn8yX97tu3nWfRVPFO1/atf/erpEweEzbEXNPnk84gEkMCFJZllMyokR5hacgHWyicUOJpiguXGEoC4",
	"vXjyNGQDc3CefC65D0GTcZ8hwc4KC8Y3xyefPQ9Z5MwDLmOG0WwGtgyq/v0TLCFiV248ePL5EyE5pvMn",
	"v3qa/IA4R5vg3/YKqlVwkIQJcpyoo73iM3xTlQQOM+BA7YqECN91Ed+oy2JJQPnF9wIGnAmS6s+cKH7f",
	"9s6mvwRbBiW3g3F6ehL/rRiU6XSSG+oJvucBqsPhWX+fs6lPCEhMY4b2+mmb7vBzPHpVx7wOy8N9lttm",
	"SYPcHUzR0dVr/YYx8ThzfFuqebKRB3Y7I2yvhNCPrWHos7uq4rvH2ZSAO4k+KAqkO4yoRnC7U2o8GJ8Y",
	"dooVrJByr2gB+HW7E9fzpwSLBTiTqXr/5UgGf939Mv0wuvtlWvOgqcHNdMqkfLAMtb8tTQUjvoTHNIT2",
	"krI1AWcObixm5jmjyM2zZpIz02aHY0RUbMcUlsWpgHTOKBYtDMZd7fO4+uDWGUKHTcGwT6vE7FKDGDWc",
	"VFfglohUw8NIVATTpRrQYFViRkVNHkdx/aoTMIfPHvAeQXLGuKsTAQIRRvltBVyop1QxOSkrD4Ac84xU",
	"TwlEKfOprZkBNpIwZ5qlYzPOwa45D3ppZeUGwcHBOnmz5VnuMsfX7O/JXrzfBfOw3d5+Ev3RB4kwEaqb",
	"1PwrTAgqDe5pUmELV6l6FytEeuNBuJUK4UeAlTt/ouLB3gAr4FhuTCJC6Wbfx+XLAXgFNuPO3QsLcCOB",
	"U0QqX9UJ0si82onGYSaYz23NNETziheWOtNTu+E6SKIpEjARHth4Fq2IvIbregGWC4hiOrfYLFJsIeKD",
	"sNZYLmJVV9SphYUFVGIOZGM5MMMUHGu6CUskPYXo20xshAT37rtNuwq3bGQv0bzCYhqNL+Mq4YWHzqHG",
	"PnkV1FNqtzLrrFqTo6SmotX47BHtCY3x7OnDFCN6ucVQLfW2dhjmur0CAsHs2es2VEZO9H08fUKZI5D+",
	"y4QDEpqqPOp1YljcHhNYMo7rzIxdFuO2lMMqJJK+0BxYc6D2pinAae97GKdcbiZ3NcqvMFEOLoEJQUJO",
	"XObgGdYqpIl2jEr1frmV5dQ3gXj6Cb0+3FiCwI2L+PKMOUBEXSKvgCgIzIiM+3KWRleW2Qd1Yq1pykdr",
	"Ijhh67LyfupT6Wu3kikHtJzYzHWxnFS8/4bDUbtujIye+6RAgsJ2WVZb+jkE4rkzitpSnfmekByQOwl4",
	"a1UhQMBbXEH8NvWIdDTERX2kUjv99515i6mEOfAS7b3D1L+JxFnFlBWTYJeM5clyuz9x0UXY1bB/J68p",
	"BaqWGWeukNyghqnFRnTtSLeH0m2EwxWssOWcYCEr1Y3X0bugXqi7Fgub+VRWeSko3dlV+papfOhM5ZT9",
	"jvF8obkRG69cIqOg2P+olwvqrTbtC0t085uoV+NWd1x74KMGMJ0x3aNIXRkjO0P3NwSm7K2wRe3plWyl",
	"+5dOj2m+BAKM9sgxnMRTxuRE+PM5iPyTabqrmWek4WIqfLftMciu0vLXh/jErblYM/e3PYl6wbisJTXm",
	"NoE9ThYhbeV125WXYgFxHqYQnlUjsPunivnpLXVrOJi64n5tFxwsJGem+1yTCZHHxjA5gsNcOyV9TjwO",
	"M3zTdHC0e0ihHCrADq4djUHwg1PnFb6pLDcqG9EJkOor06TuXkLtBeNwPu5frIBz7BzgdZFleiqpiI0r",
	"1BRgqcMZdu7kjSpu2vBKhQhO7rL3txNgrbJfrwlIrRbal/wi1IzCn17gKjXWWi2tWl9aiuyBzUa19Z8x",
	"YS3oQBP0dKrQ9pWWUYeDlfKFPrVg3J90VIYKEHBqjqJ2S99qoisIeWV6jEDd72+V2M3WGqoIOZXBVB2h",
	"ZHfx7FGrv3XU2Ds9ZC/gxJZ4BWc/NhjFZWfdnT9SHk73EbHP7QVeIfPB8fiY5mz9mNRYIVc95CpVv4cc",
	"SP2O2bZpTsQyc914Yd7tUNY1Gz30FGC+vVBe5h7xan6VWC89yHlfd+bUhuO1j2zkMgKPboN7c319efdM",
	"3QXhyGHM6+TWfAdofDG6/ICX+Nu1Sb1FsyV6dCvyHZvPMZ2PgK9wvMM9qk34wHCe41e4+B5yOCzNN5+O",
	"gHrx6hR/9Z14kMLhAT0DkJjOxbdrCw44v5jNsP34JKNLnwjE73k4O7IfjBaYs/udAfVp9xBffrtW7Uhy",
	"X4p788DFroc03hsGz0YOLjgY6a0xWsTw6ZPEU5RAVkRoRz8ejYE/zTT8QOde/Rnme8AFyHvm7Q7WzjVz",
	"bSQ7eWX+GWNvATzgj+qs9noLsJePi6U5OoTbLn7g/sueRwyeovkANRUf2oKme0mBQ7yomwxaagGzpV4R",
	"6wBhEh5dM8Zb2meLfIf1RzqW6wnceITh7PcpYwQQrf3+yu1F6DWnNcvHVUXmB3J5DW14xb5Tlr0C8eRp",
	"BQqqWfWVDyNU9SZiNK/VW9BKbC9Btmebx7GQKmWhQDOtXe237zbH/akGpIMAhO/76BUC5Dk7xOH78OeC",
	"kMCxWN6bHHJghNqXX4R/gDu2s/V7L82tmWxJkBAY0WIDyDpX46d3hAA4k8zA589OtgJOGHIwnVuYWh5B",
	"duzMbH3vCotlsOyFcIHK71mIOhaTC+DZYh/p9/rbFr/35Gl1s1pDQJBsgLC7P5ALnAiLTuwai6vcdLvM",
	"oNBG6MUaoRJrSaIJ/WOf0Ltf7sq5Uu7Oswf0vZ4ukoODxT0BdnfSbrtKSKAO4y1a5vqiB1xxY5wyR01z",
	"2zGT6sau0u6dARehznikN/A1hQtKrNa5RgQxOAAWQC2ZA/coPR1uJa/QBum94yfUd6fADxNyCwk54bDC",
	"wuBKssKwrn7utQwZnmPC6LdgcqyRKqYQcrUuwrbPea2QGjeHOE0OBtzpKUe+SQSXEqhszXKl7RCm8KWP",
	"vSRE491FhE2OSOMTHiZYVtQGmoem/14/LlPHj12o81eQ0/77z188f/Hi6PnLH758qbpAxGOWr/bzX0QF",
	"/v7jk954cBS28OKHn/3obz4++VUlbWBy8JaLgNZ/3wvKx/VeVq34MjOl8vz0PgyOPvvsRyr+y4dUmHB/",
	"v+Xb/+v2m9vf3f759pvbv376ze0fb/90+7VF8PTGJS+s2z/c/tW6/f3tHz/9w6df335z+4314vhHx5+9",
	"sG7/cvtH6/ZPt3/99A+f/iGo9Ok3t38Jyv719nef/uH269vf3X796Tef/vn297df3/7x02+sn5y9Owpa",
	"u/3Tp9/e/uftH2//Enx+an369e1fb/8QdHD7v2+//vRPt98EDf/19r/CZv9w+8fbPweFb//y6Z9v/2h9",
	"+vWn3376p6CnT7/+9Jvbb46t2//bCkv++6ff3v750798+k3Qb9DEf97+9fbfPv3202+s2999+udPv/n0",
	"L9bt7z/98+1/3f719s8B+UGTVtjPX2+/uf33298HHz79S9xTwNvtf95+ffuX2z98+udjFfBAV5gzmqzW",
	"sgM9yFQLw7qFKv44KssE6P4QDaIi4CipyNdXDbGx/gzfmPp+Fd4GzfVUfWrrYSfYf2eb9B6drxet9R8d",
	"Pf9MVTm4aCq7y28Tn1u3/++nfw3H9JtgIgSTJRj/YE78IZwo/2r1poxJ6/sS5hxNycSesmP7B9btf91+",
	"ffunYMbefm3d/iGcyv8RLYDbv97+Pmjim9s/hf+IZs6/hUX+8/Y/g0l5+2/xErj946df3/7X7R8//WM4",
	"eb/59K/h5Pv0j7fffPp1sNbClRbPtk//R9Dtn4OJa52Ph/3hifUFSMHoUyucrcnU/NdP/+vTP91+HbT1",
	"l9uvP/3Dp99++j/Tlv5XfnZ/EzGsnt3/Ec3uP1i33wS0RDWDIl+HtT794+3X0fL69I9J+WBr+NPt17f/",
	"bgUgBIv817d//vTb2/99+024xP8SbA6qEUuEQ+WovcHzhbJSfHlQb1j/z+3vQrB/HzG/M0zBoj7kICn2",
	"yJcvjv/2+LMU3d+FY/LHgNJoOP8Qbj//oebc57bqGWshpSc+f/aMrpxjioU8nrPVs+Ckfhap8Z7lj7lK",
	"Z5yEG/nd2dDq2RCLXeoxnDr+8UxIsI+5H4zhM7OAs/JJidMBTQkU1DacDYbaiTmXYDO5RhyqnHXjtPoo",
	"qV0oI/ZiiSsvH67AlpG8WrrvqEap/l4essNBXm7Id8sqSZsXori7C1Elco0pfHSwT1S+TNSLl3Hafx/M",
	"mDunPPihEuLXYYW74vk6IWfH09xEfo1uxunczvcjbMahCoCFHe2v//1O43EuOwLhvCjo+d3oHvMFeJw5",
	"ti8PYWyrm4NmdBB1DmDK6DDbD/a4Ce7oQ/4pupHADYZ0d5FKKlTFHiyf1CnYywWbzQx6mbjEg036s0XN",
	"pMCuaEb49MnKgfYUX8F2S/vYXmIqGD3cjEre8Cb1Iy8lj56m0EstT0niADVNyOB7B6Zjm4u4vkwBG0ad",
	"a+4L+a23iz7FFHGy+bbYZdUBSPZhBtRReTogx8HBnRGRicl0qlz2vowhVPpSv7+Ww3Qs953jz2Ql5gLB",
	"FA4wMATZy1Pgyv1QcPm4fO1OmbAXhgMg+NxxcaRtvCSjIxuHinVstyhftI1Oy3xLCkqjnOB3fRzSGpsH",
	"TJrEYeyNB8YYjEWpohDxwMFoUgcjjqgqSv40/b0aK3F7KrNBn5B4z6+XTPCVT0gsbZ4HDVRxzUj0IHnd",
	"poNns61Ss1zU/NNM1qu7iZFs7L530ttMgfeASm704aKSMzKJojMKtX9Q2wfAQrpE6/IhgGNETEZL9fA4",
	"fXeGOKZqiSS2lDpQqmdTCpLWbX9bvwn0BlfXA4MBRlJQY7GI8mlnDhN/coFFkt2nQroznckjB5u5LlAH",
	"ycPGkQF7QbGNSL9tl4PeYHSiD+b/4MIghy56fZ35PBNXhrD/9SOoB3spE8a46e2m4TYP2XB0ckKUxsSl",
	"lhgK6kY5IZSh8PEqNyZNjgN7BZBYjgyvP+harXexwnYuwVmmRWwLV/PJxRLPjas3nEDaKXYoDXvv/Hzc",
	"H1DJN1+MLs6VqTUlR18eHejgKohKfqT1aAnNbWxqDlt+VOgQo2si/Q60aqoPU/iRo6zJm6brsJwxSU1Y",
	"IvjV2ERYAKofxufj/mnsIqCQ7qhUJ/+z6co5wM5+wCTZ6d4bCJbibo1eC0fkFUFrg9Neqk3XTIh4VWvF",
	"0XjwFBmNCYmSEk8kbuvOWiRZIe5OCKyAVBmtcM3beg+4JqMp/KmLhTCiEI64Dv4415O2snbLQARHIuEk",
	"TOSkW+47xTR7VnRgTDwk7YVp55ggKZG9cPficBQCFdYuucVNUks6UyH9LmdeMhcjXWo5e4HovLLjISDp",
	"8wO4KxbtRbrsNf5e5tvi0IjaRyAztJeDs2AGKZDlWAZXbY2mSNqLXlxCc5HbWnSpZKwiqs6ZMnONBym5",
	"FYXzhFGVtgfm+Y0mIwlG7ms1JLPRyStFSunYVCHc7gm5mD35/OclGejHVc9AIgdJ9ORXv9g5DJ8kRSyb",
	"UYkwFZYbF7bQlPkyTPocEGYldFhYCiCz44/0I02MBh1mi2OGBBZHzAN6zPj8mS3QLPrP6sXx82dMhP84",
	"Cv5xxMTxQrrkv7188dlR0u5RzPYmmzVVcoAajMe3lEQhuMd1/P2aA2wZD3ZO7oa7aIb3mBIroMT6fqSa",
	"BGExSjY/aAmDF0dxJ0dBJzkcFO4ueU7G+QJF3Oy09/Qj/T4+hmOrNx6IHzy1kBDMxsGmYMkFByTF09B3",
	"PgEhstVsie2XRzvUbDl/WnWljk5eZZHYVDSCCOobkqnYSMJclxS45VB7ESkkukgusFeRmplPyGQ353CV",
	"NZNdfeZDhwdUgphINilToZDr/ADq3ofy0/9seH01CKYldRB3rCjNhbW7KIIpPLjxmPA5COv7vfHgB5bk",
	"yF5iOrcirbA1Y3xvhWzamukvtFP96OgoYEzlw0LQXLHgz5C9wBQsDsgJDkorLBeSn9wBrGhkHEuyPDst",
	"cfM/TNxEZFddwK8I0khDCgjeYSEtNrOG/YBVj4MIGrWQReIPPsVf+mARNAUirGBgk8EOqihH2vo+nlnC",
	"txe5jRNusJCirX3+5d+agAtYrQrbdcxXlCl4L/l2vCq3Abm2dhKXubVVM2ZccI6usANWbIlgMRoiG3UY",
	"jETwr3RT2J4jmQl6Z2vuRyawkwM3hkaxNeUVr/pDd7PlT1gLRpzsRMx8yhytYYwaucBiZwoGo9AW9589",
	"N7GfYa7qlCuTrdl0CU/j/Spw3ZtOAYLbCnsYotxO39b29tkLM3QZDqqDl1buh/K4QnEUyV2lwInLKnC5",
	"kxX12d+YgEkIr7yHhfXUcJhlhvEgerRS6LCRgJHWX8BeAa6nKNz63VQSbrImFndu4FdH5hxfmcTfIlRq",
	"9TgaVXHxMIfx0OU61A5X/YfqDzotw7runMJOawkse4iukBhs47LedZQ6M2eJ97eH7OWdx8/tIQ5CckCu",
	"wTIlLXMos4x7cJvoIc5xHZOU3beELgaqz7+nK/LUEtBOOu2HunsFcHk6+M6i24TPq6sSASljQ7LJjB82",
	"oG+rsHIQvgs6HjgWSy2D6TuJ9rvPbW3T0buU5mPNYXt/8uBj6U58ZIBD87EOHAuE6WtfHRHLW+oe9hC3",
	"F6IJXvnLgU+PfKGOadLAOCllzWig5DHTOe5xmOGb+qhq93JtpwLsGb5pxvAI7Ff4puqFZLd68zVS9+hZ",
	"gL28ZJjKA3mGmqSbu9lPDxfYr7fgzIWOJYfpYWEzgyQcfD7150PFXuL6RGJPHXKjKGi8tqUqVkFc08Ua",
	"qhFbRW5KDfDTIFBYYyqu3XdipeaEQyZQTkVjbH3qhHpimWQSkd5OXMYMr9XtuJ8+WTO+RJz51BHa7zPC",
	"1iMdMwUTV3J8Y5q5wffhga5vBTfclqN/19rTzGgSxJncFDytpTdDbc6MqJn2cmrYKyEmq5eZsrFzxnad",
	"14lsobu1SsTnUCM8TGguVYBOAf7Md04BxOOPChuyGky0/mnxnS6bCPnuIwjrnS4OaVzPHBAbYfKbCgt8",
	"5z2axcz1kBCjjHnbbhIbah9Klwfh3FWvPSqj3Ud3UJg2p9oahTiPy93GvK7tZhAZIgG/GN2r6BxeTOrc",
	"BVMD0naSSvcY55BOkN2VH34D50Q9Qxg3OB/pv5npSQMY5GkhSJOqVf/Kgohfp3sh+SGipdfe5MN3yRZF",
	"sXjS3LEUQGes9By/CGmqOZ99Tk4ykXvybHFE66mcfE6ugroGZUh7Qb+D3nofBuoXz/JCVnEfmrVW6DJe",
	"taMIur1+YLVnya+zBNLBue1QpQBsj4n48t9wkVBWa89PjKHDZHF6g6rr2Ci5illlWEe/G5UM1ZB9pq/k",
	"dJQYwFWGIrEwK4q9X6rRRia6a9UligYycw0k42d8FYZGjYmRxP7pyAMbz7C9T2i8zZTeBIPyQdtJqo1y",
	"2aDC0knOFGPu09rxAnRS4nq9rrrY+2jho8d/Me4jIZBPZAnvvaJ4VNvz7wCqL308gLoXjNajpvWRhGus",
	"Us5rLBDNrcEUI9ob69/sFSgFVab+XK1eLdIfxrJ7ncRv8aSIaE6CE6h0ijbz2pvKYW/JdbzE0339x8c8",
	"g4YHyNYnvkAH2BOAEGX28ymmaZCFd1gcyAjnYG9pfSASFc+bdgO51I+vV1P7nwZzAedErxOqdYvcc+nb",
	"v3o1kTBzflAmCTP/Cncyn/PQIdJKppKFhYWsFSywTcCSCySDX7zIhtmxppvQ8D/1KYwOQOCWZJbN6Aqi",
	"7z6fA7U3FqLOR2pzLLGNQlP50Mx5vcD2IizHKFiMWy7jey5uVnA/4RIcSyyYTxxrChZyHA5CgKNMj1BZ",
	"Vt7KyKWGTp2KWh9GXS/U17hgJURcZlMk7sfvQrY0RtLEQviYzifIlwtWaJibnyzBgP1SMBo74mARzIzQ",
	"vZ7On005W0LVuGh7l5V9nsIEdPKqIAaLLjYQxRIjUlQ7VItjRt8oIkOVdA+IGlCe4/qn4ZpGIn0me2cq",
	"5WyLoU0b7rDF+ZfDsE26F4BtSJ6Omp70OZozcbiY3NoTrd5ZxdFGwrKt3M8P2t5mcPFuuz2oMqcSDsjZ",
	"TIARddCAbdDLnaOVeJiC9Q5T/0Z1WkX1JsqcPkV1bebozaFtzbUBGNH7dyUfJ3AjQ/lnInwvOH/3ibvg",
	"KBANQuKeWiNGEMdCmUQuadPj4GLgLTUJRAozI8YCcywndcdsW7feuBGVf9j7qU+lvy2eC01GGZ9kL5vG",
	"/sqvMPOzZqEvYFRAb8gZ2TXrNE5h6EJG2HyzDRa0w9fwJ8q8UXWy46TfJsjDiq6owxl21N1F9RzE11iR",
	"I8tF9sXIVFH4lClGzTC/15g6bC0msdgzmfqYKCz9zrDNmWAzaX2IKpjacrDwCNpkT+MGrUH0/KBMq1qp",
	"IUwFdoAHm0OSBLp0a+UiywyQbDUvRutpeQP6JvgQh5zNthnZd1z3jGaNHmntAjMgSEiVhr11cw+BtJ41",
	"qRdvRc1yAWfCA9ssLd25RJ5GrLpHJdHABX7QVDQQdXiYNbRSptbT457YFpnS4xunCMEurpwfbXDDHF8M",
	"qYQDGC04WNiECXAmURC/gkKG8/u+33pi39v+afzH6oViPYc6k8OYrDnTg0zqV+GTANzz3nWwUX6FhDxE",
	"rp7DMYQJhPa7D/f0ORwUNyezmckbFetcmYq1VVHkzTpUETQv/cj59MmcM9+bxMGTKkSnR1NNzNUklFDF",
	"Js08MT6HK2YvH7wvab137tZmJOMSU5CGZzN7SdmagDOHJFJkqRwJd6h7s1dC5Pw7yrtlcUOejtZN+RPf",
	"6gNMDPMg7ySY2RvjeAXqTvMaKXBf9y6/LcEJWjc8eT14jcQjEgBeD94AInJhI1NmnykSMBGmuEr3EDyl",
	"2MamXSefevi+SVD9YnRx/g6QyvCdICHwDNt6zUJt0wdznKWt710UMWkUtVeOR3tdIUl5aMUZDS0KZtPQ",
	"qWc4NV8IXQxp3Rtu6tWbnweewvy5oZODwho5HVZxCdxF2mOMcTzHGtnRWDHNeHFSyckoz335iV3pSdQY",
	"4yda2RqqFRbHRfa/O6emLnoE2EykqswmwbfMxrKluCMwju4Mqfl+jRGobre8xnLhcLSmJ9VFB0QImiut",
	"R5At8Qpi9cfuTpZ5kzrovbKMnYEua09kPXS6uWel6GugIMF+TDIHnqPpRkLXzBpeY/nGn+qj7BFGYRKG",
	"2zT40wdlhFiUKzGxkb3QLZXoiY9sJpIDdfLn9n6Grco2kKWcfpNIf9rjc8b4UqiPemPmRqxTetO5r3Nf",
	"yCV60ZUwpG8KlvwkiqOO5EJfRHu18djEECTEYxO2ppr7rZCIi8qOJ6+xfIcezozs5Ez7bkrtTimA72bU",
	"dzOqzRlF0LSEzwjXSMF35gkVBaN5oWlsN1DNXkCqNvLXFcqnhriluWeHikqO4B5dsUY4jIYD2xg8S3cL",
	"L+PRO8Guh4ocGicuomiu6T0po4UyKSCIP9dds/UZJU0ZG42Sc0UsfL+6G/pr6l+/Gz0qfW+dKwdHM0RR",
	"x2L5veawOWdYQD+4AWpCiJiSAh36Oq11o5DB6td5U2kfHw3nVOxnNZkSlosxnrn41A/YG4Xzk3Eanmqu",
	"HOmYXQfVVTNbt8U0mSDXMa0V5katsdKb7Kq5MlL/pvfu/mPVH0zr8Wb4doyFcg0XBWh/MNENa6lN3rzt",
	"GTOL33NW+FC2qPrmHO4Q7zBdtha6K/sc3VYM0BpWtm/u72lYC3f70THfIO6sEQddpthkao4LrhsVR38R",
	"d3tJkJwxrn6CMLxOxK8K43puf28QdxndHCIs2+E2VSQWuMe4VzfGxhTZy3kY01aTPTtKh364nVnvelvf",
	"+rx90JdAyOjEGPCzdNKR2pEisnQkZ4kCckTwXqiNMseMqOzdoayR0RpVnAxL2KwZdyqLr1mxt3niP0WC",
	"vEg+XvmkxZBsqsHUr2mbUSE5iuPc5/1+PiS5e8FKWuqlxa0pEuBYjKbf0j3+aUm9U+1JmuzbqjnKd/JU",
	"149twSqOrz4gVNnxypxHrfg2mPvFhHDmPmC3rHb3WiyRvcCHiphSxkzb2OMionfoPFyTrBjSAQU+V0YW",
	"RrP24p0fdK4wCpu1OsDQIwut9sZHa8AHEGTRxGCUfGB2Bz45TFTlSmq+jHyTFeUOkRlBbCjzBBaHGoDh",
	"pQp8SlcHzClosog1ZEYy3aDDeMcT3aC2Gx18eDJWpBBLfm0Kobnr07OO6f+H1x8qRCSsR1gRAVpTAJSR",
	"wGo+2CKKyEZgvSnB1J9PElER0/nEXiA6hwnBQppSlmA3tPmXHE/1D3OKcgc79sPPDhY2WwE3lQn9xmrb",
	"NnIhkxZKeKeVAdcc9yOymJxM1XOCMyYnNvIFTAoH3hSpIxtLeFJHxzkcI4WIVCua/dABFx/gWVFM71vi",
	"GlIbT6HYiuNBPGA4aXrwwzmStbjrHsb5vrIavm3Xt6EXcnoFNlMm0RSajVsnyNjMp5Ibv03sOIl38yk6",
	"A3Cqe9oumJCBmFaxGva0MSBGAGqc3HDnr6oNiuNr7cuBQmgCmCVbcMlIh8FgXwdVCiaH4AgIPiHKt8M7",
	"0rtPFurJsUDUIYEAovne/qYS57LV9Bflsl1UX3ERqAVZ4VrfaMiK4jalUiF8lXa4TujvoZCYGRTNJrGp",
	"s69mwxWiEj+iZ8CIoavRY3ra/OIVZ6qAtl6dp7Lzcf/F89540LscnAXHwiEsK0x3hfpug+a8pe29R31x",
	"/sXh4lC1O3HG5wnlQ2XItjjAZ7UZ9MX4vHc5aC1ERJ0kOKPRnVwV0u8ToLVMm9PjaF8EY05Qr9JjSNnR",
	"qJsQKBQdNJzqVpfPibpK0UQMpowuokX1rKy1zF5yUO3RortW6x0waoksXwBdYiruP8rSAez9vgB5ypGS",
	"27pvs20ncDCrsQQjq+BuR1t8qqixj7/94Ugdo18X6ad1uX0/xHr2Ptiuhf7bwbiHJCJsfuDbiePrA/sv",
	"KVvTK0QFc9eIQw+5HsJz+l6TkTPNPldxwn3pY27MGCIWjMt+waSOts5Lzn6py1abU52elw91sB2kqx5w",
	"eTi5KHs4L1m1vYutgK8wrHUVG9kiqBs1Y4eEB1wsN8PeqDe4un7AFixLYgOXBwkg+Xa6z/9S72XmRoHZ",
	"TfczfboM4XvAbXBAF8ev1hPA2+l1+IC6szx3VBNMmHxQtSFeJQg5EWwmg+1nYsoGnEZCLz8LGHGAl2s9",
	"Cs9KNpM0GKvR4ryVG9i714/oNv8OKFuxQ6QBdnwhQ7Pbmg6XhXG3SMjKQXaHd3DjIr6sljesXrq5uIWD",
	"JJoz5VcyuKMgIbcOC+UPwmjtFucwqustt8Kijkn6mvElCi3vReVpgaccLmYzbB8ghozeiPXAsQxrLJ8w",
	"r8fj2UTPTsyeZJPId0ZMZmoNAhIChHCBSl2Ju/Eu0/XGs3qJ9lYkFkttj1gstfAkL9m675Hkq/lYazi1",
	"hv57Wu7ih8vYp6pqtUa6qBrnzZnWC8CMVU/lva50oSxHhsljJkoEV0dHG2WQU62TrXRcB7R+trqieRck",
	"x3adlsOKmpkxJeBeb2o9uJxdZqurm19hB3g2n2fplvM1G+qSzwo0yS4QTGu8GFwnNSvopwvWAKMSYRqL",
	"tLtmuBUgDBZTUV8r0KdaRULgOQV+wecaT4ekxGjBuDzXplpbwVBv/Zek6lRkSno1/MnZ4HNrRrBnSWYF",
	"g6TyXwpauQIBfNWwkffb+0CtNoJbeY3xXgkxfvFcHY94VDeWbe2XhIiel5XpCb+alMN3TPBn3SG4v3NM",
	"5KkmSNddHcXNWXH22F657LHDcmlikyv5Ns5zud1qmK+XuXQttgln88vSwbOZhal145JnvxSMZpP7lbPT",
	"KpeSNt8rmiNMrSMrsiQO+g/6fnbjEkVi3/qT5BUm8JhisJ8NR5fjYAafs2FfoTss0Pu7UEV6wMILzrWM",
	"I28NiQEL7yqqHFoYKLCttyKH11eDEymRvXzNme+p8ajlz10EotZ1Jkw2ib/0a0lWWHKI+LlOmqkq9w/3",
	"Ng0FGqUpCk3fU9vfClXMRF7uyMraCVwDxMvrAum/kLTggnfNQaEr2uZxrUbTaVRPZRXsExLfKZMpVa3p",
	"3Xwg1dndu1bsW0k2FeeYVu4VBnnXTLnBSEO/OHdDdBWH0KuxPY9646tX+1Sl4kNyFpTbE0b5er96+kQl",
	"h5S8Fu/WDHa6+Dd9XNOkRPpcvS87VJcXzplU3vSSzpI8Bbx0kwlzl2nNrb5Gxsu59I053QN2n8HraHBy",
	"9Ssu0NHetMnPqnGtg1MbgoGAENcLpInzFX+84IMvfUSqvqeWyJl8XcM966zAAGSb9CqAsc6Tz07WLP2T",
	"jzIqbJhERUCdnq/CO9cIdNlCapn2ahYe4w6myOjGF41tnU7jFTWKJofyWSgNVlQHp0yoI8Ob0z1dfyKH",
	"6TpsRZYCRoVYazJZGA53QOeYlvDay/np5rEMrQSs5LtlI2pNwQqDdoJjfS9tIUw1Lr5XKY38/fgFiorv",
	"fPtxlvMI7UCChPW9qAqm1eDYPv7mOxDMhUAUE5ZcYGFhYSGrNx6NLEQda/sRy+ATZVIlshXaSRnTP+7J",
	"siXehZMQrTqr08RfuJYzcfsxAc+m4CgjJUczXDwuF6CzcH+FpSnG1gJ7e8dcIYPbt9jYruh+w3sWhn89",
	"WB6fM3AkZxTb92I+eQj+qINvHmqY13R3r7Ab3/sSlaivfn7KzKByEm/8Rz8+/+5hodUP8xhcB3oLsJeX",
	"caS6wqCH1dq/WCFSy5mmcPREaNypT6bykL3I4odxBdFCjF9Mnld4bI1f8eLr0/hl5covs5U/q1r5syJO",
	"sc1ZcFqp1Tw13Nv4rII6KOy1REb/xFI4DNBSfZYPrz/ceWS9FEmVVXfNuEXLaY0l/Xaqv7dVaGTfsLv2",
	"boCXnEm87NomgKkTdPuI3tqS96/9Q3UbB+rIZnSG9X4C9owfCV94oVxzFNo2HAmPUaGxFsuXX2Fb4qp2",
	"akETEvE5yKNsVoeKDWw8OGKzI0zt8C26YguG8CocZlWNYDeU0Y3bnsP27qOk6hlKHmlS6NR5SqgTeiog",
	"MtXwPoJnXi2c9d5/8X0GPup6anrla/N+CnB/OpHZz4q9OFNiYnh7s2UkIFZYMmmzulVY1G8xAr3x4O6n",
	"kBv0NAkXURVbgN54cAWzAx94236V3sRbg8qSQvW2TnSNrG7BmrWtjHPCX2sfK5FENRNenGEp/CkWCzwg",
	"YAfXmQfsc1kuZ6WbsjSBmKeDOGKdMTpn/dMHkK5px2jxzvi9QfVzWzxsmZ59hQlBJd6Etmu4huwQ9dJL",
	"iqi4nvrzsNDD1hAnTzkVlYd6P756gbDjBxG9W8/BZs52TPftqQ40okXxyfXgG2GsdbU/H/TuflukK2eC",
	"H3BOhfM3Bwi9VltArxtsTBUZ/Y7W1vnw7vFjK1jrn3ofxjzajVO3DwrHEngUc1kd8rQXl9BYKMbv+APq",
	"DG5s4jsFLgwD6gxpiXIjibgs1WJYsqDN2AIqB2wacrUEgozO8NznGpthCvO8j0ImmitlTu0Ag+fMUZsi",
	"ecCRrJ4sYNuoykE0nSDth0I0AVSbmZ89nIffBfI8oLrZpzUVIYwtXzF+oO1jvUDymvUrB9o5R6vofH8k",
	"KutzkCeedwC1mF5qohJ53QyBcA5yrkzx2eXpMAd0gAle757iiRU15UxqGwuxZB7c/xX9cMM/x/Tm4Zwk",
	"lMkwEeSkTgDeJPOIN/cMeUl0scBqxFuMJKtJ68GCAxnlxJcLpliWKP19n0gBXKtfX8NU4OpO0wEpXzzg",
	"y1i7i4E5MALb52pHgUSRBXSFOaP77gLF1ozp4JW0xU/nQfhgGtngS0znE0MwETu4ZeqfgmrFV54IrXd3",
	"+Dny4K5jkKGLB+oyxyeG9yKznXE+S5HQB7ISi4mjj2EV2xzrkyTfwbSt85CXveKZmC6Y/ctD5B66l3fR",
	"9nYIlfBn8o2RcCMr0rxjCZAuigLKvmIuvv+I0A80w+f5CjsYXWWiy5VK9lEssRgC1hkJuujFXLQVgilo",
	"r/285bVDN/mcGMI3IYmmSMBEeGDjWfTuX86L83SUVCkKfVgjhr6XDZGjeCwMiDHmcNHPZ/NkGI0PIHsX",
	"5ftkYlXeynk0vpj+8qBLOO7SuGR2PKkYIRCGwd7maV9I6YnPnz1jQsyO51gu/OkxZs+YWB1FTD6r7N3X",
	"+qo77LRuZOw+Ghtt3VXGYo1O+jWWC4ejNa0xey63qenzMwhsFoV6rBbLw6s3iQ2RCbQ+9nV6ur4a3Wc4",
	"U+zUCF2vDxl9mDfpC1syzxd98AgzWWoYNFKdVQVdLKUhJuTEM+Xpr520Z7+lu0nRUT8eca2EnPUGwOUq",
	"0bS7E4rC4DGx4wE9HfUfWL78HaVH5X21JhC9scp8b7tZ1Aufu/X2Bb7ClRdr6wORZCfQaWPChC4TLNeT",
	"2J9qV1OUeeh1EfURmWQiWZhlNV2fD/6NLJgeo9Gbe1ZFdASmdyOwT5zVA7j9zTABvXV+Rc7zUZFwratF",
	"hE+T6EjKJpojve/8XS4UG745mc0qW5TVsiIMOZfIXhrjT9zfzoq7umg5sgn0Lt8f7L28dcp7oxOVW7JA",
	"5Z1PwibuYFbUYWuFiNJFZxF705SdevWWWc7Xf48GDjODma3+JVqXLbKAFuAcq4zbJohSJqtFCU5aO9lW",
	"3Q54pRaC0SlH+UmOzL3VpYcSCZ06liJPLJjmAYZjNIdJGietXBT6sNJ5WKccV2oHsqxFZa0gE3HjOcvM",
	"iqejso196856Fpy9y4HaftNM05r2CPOdR3RtvHz9qiiOTWmtmrmj64J45/Zamx6g4MapjZRex2lZq4Y1",
	"SqDJh91QZlwZnsx04xXcbjPIfMzOSCKpzY2tGuCJLolBGtxGb/ywG0etGr0EUYl5XVXfFNnLeZhoS/3Z",
	"JwQkpoeylDO9lbScU/YSEXZCJCv2dVPn8PA8gm00JTA2maWg0OW6x1yPwI3uUhAVGuutbtAKYRJfeYZ6",
	"S9wkMoXEqKhkHQ2vKi+EISlJUa6QRrZF2aSGEubczK7H8QoTmIO4ivPp6hbilGjejUwCvLCZZmcwexfV",
	"1EVT48TUpmkXwIdUAkf6VMLbtHvVVxMN5DZ1UKiunvXIA97z5aOzoqoBBcwPYEym998+HKMLTLAnDmhD",
	"nbr2m9R5LfPIgOKbMFaDLR9w2IMaekqnvRTDl0zIOQcx+vG7A+iH5kko3IqxtsP7yL1uDduDsWRihkTe",
	"NdsUTPIZkSYLIF70SI8cBwc/IXKpsLfYH4OE6DJsnKZJP1TJQBpEQ9dnBcmG7KpgrrKFvQoZqRlPILEu",
	"sFdHFzA6eXWVaaLqsspFh98DOj85qgfcUqarqGR7a0wK0xC75rgJQ17UVT2j11r3Ts6CvfExZdq65IzN",
	"PIZVsSsercfYpc9hJBlXqnDaswNqGh+43deTy83lSekAPvkNZdi3sLDkAqzLn44GvSNrm0pfpbnSW7Mm",
	"y9haY0IsgoW0mC/DlrfeH2lmheOsGevOhnl/dpAc0d2gzTskrPa8qnaVhFqDQyrDQS+tOd2z9QqJm1TQ",
	"ae6lqWvJE9BgRbwzJ6IPFuJgMbkAnpldwaRD0gpvimH2rQUWTy3h2wsLRSkfBpXSSeRXZJ6OPpJwEnxK",
	"5vrVq97Lly9/dI4os1KTljABmJDI9ZSJYbeavJ3Gow+Wg4XtC5Gb8aGCy8J0xrgbPWA8NRtH55s+i79E",
	"mS7o0VfAmXWNXbDwzAIq+cZaI2ElF62nBbbV+cZT3VYCStBIAIG1XgCNkm8ErcfKaketyM7e8/Ptpy+P",
	"0fgTTJciGGiXcbAiNMGx4s0Jg3hqBYtHPLVA2obtgcNMTFqwRN6dP2skJjnz7Tw3H5D40LcwdQLxHUQw",
	"AAFmyd4aIpVWtxi3KJPHW8gyllamTtIGsgMedoXFtq8FEtYUgG473B8b43nx4/OTy5pq4kMr0DOaBL0r",
	"pDaGh1ldGX80mUsbEoLVEWnMo+IjYjNXEcy3XnKSRxqtMIBpcwA5PbaZvE+P76t+HvI8w7WiDl+pfUSR",
	"72BtBPA7ciBVZDGbglwHG9uNS6yP/vPnL/42+q8V5zWrdO+9au5PWe4OvBMzX7udmKlNs+Up85dP9Kur",
	"QP0kwfUYR8TQgtY/3kzxdZpiwBjcu1Ku3iJmWtOKXAXidCkJvxT9g5Um7icHj7VmnHCFqGDuGnFoL8+K",
	"vQpjO9d2sovCLeud7IqCSyPigYOR1t6MpzxPZsjFpLL76hXYjDtJzOXd+xrVxqXDTvWenAWSSpOqrZxb",
	"0ecgubzbAs0mK7hJcKrhtpDNSpRfQL4Ax5oxbvn0yEVcLAjBdG7NOHMtHjJV6S6W9pgxdKnntHoFpCiY",
	"rkJEjT5OigSWWktldxyUWVNfGjbb7fcoUorWSKJMZJMyzazNZjypoU/FZ4CMYZEy1pFxrkkW3KXgxsJU",
	"svC6bC/AXloXo8r+zWUyZoXXYNsUSyWyaq0TfqlgR9Ca3yYmwOVMxiqHZa11vGS1+bqXjBxLKtO24H58",
	"zS5Ll66ZOfkq76qkvsPOMKlzpiXbzytMoERM5koSThRiO0wgW0Kcq+QLKhGXE26yCArTXeiUJ8L3gNug",
	"TwVUSfqqd+PZDqo6G6DxcdEg1uvN8ICGi6hGvKw5Z743wU7VMHDpAIvmI1zylS6sGCJahD8FgR7TK9hV",
	"nFtXKzC37/WRhbviBNbO04IOWw8cVPMSCyu8gq6FeXrw1mpXzF6ugdxftihjjoGHDp5vL31xb9A9lIRZ",
	"V76QAuziZ+Lyp0rU4ivOqDxDUgJPG995Ka7SXDZcUUOFdPa9syZHqS18OXC1piyI70RvL3bj9akttWb4",
	"rL1wroZh3GdD99Kbc2K24mJPLTieH1u98cAa9oX1feZFVm7W1JdWGr4SnB98pFfwpQ9CRu++oSZiw3xu",
	"BbSNwA4viOLzNDoWXiMqkb2CY8bnzyqpJuLjV6WpfHIR0/e51UtL7Ty9zRAhwvKpA/zYGiOCHWvbooU4",
	"fP6RfnxiMweO4Abs0Bz+45On1scnNt94kh3NECY+h+g3ByhG5IjNjuKIEtHPwaXlKI7uEJYN2oyekI8w",
	"/WUUMywq6oLL+ObIZpz73t7PcOPFLQQ/pk4DRyBsFF28Pj6phl5sD6PDDVk95rqMWvn5MIq0FNYoNN+w",
	"Qp3GsXXGOGTfxj9SG1FrCtaM+TSMhiYXYPXGo5EVhwd+ms6A9Xp9PMNcyHAGBGQ9O1a+2sfyz86TfYpt",
	"+OhtsZ3HXCQsRK2rVz3r5cuXP4rKfN9F1EGS8c0PlPfzLR/RS4kOomH6hBx0GbQTdJ+rbok4yq+VkvSR",
	"WkfWxyc+FQE2H5+ESyT8m4IQFhbCB5EWchGO0tYlJW0e94hk+BhPmUUYnQO3MkWj2pTJcCKG9WKjjRxx",
	"UQGhAmEJmzXjjmKKvOIAQSNWUsRaL7C9sKJSU4iWWc5s4qklsIsJCq1DeojP2XYH+UGlWZuxKMpTdY7c",
	"7eAn9kshVkXDbTJ8eH/1LiB5a9VrLYB4M59Y21oWhzniTrAocjOvJoeZQHa7RhjhB2sn3kWmn4803aSD",
	"EUdWzyJ4yhHfWGuOPA8ca7qxkHUkNiLCpiJp0fGiNj5LrYHCvvNIbAfg2PqACQl2BiQEnlNwLGR9fHL1",
	"fnQ9GvSOfvrTn/706Pz8/DzYKLcGRtHhkxR68fyzHx49f/78s2PrMtRJW76ATCPPnz9/Hv7n4xMLU+vy",
	"Sij3k1jwUg94uKaOwmmeKRBNMBwv0vhMRNZrLN/40+jHZ5dXTz9SZNkLROdgETaPrHueWuGITAmbeyw4",
	"HSllPrWTWRNr1/OTxhyTcMfeZAHhAs8Bj7OGLKamK0oVWbfCXYu/MB52Nfko7zW2I43EXcWbzBqCLQ9W",
	"wLOmiLWWmpHn0cnDSVWgNYm5k7xiUe4woZHCtbHg14hTTOd9nZIi/n5eSxcxOrn8liQGGA16PUaFT+SD",
	"1bwc7LY/Gp2M0gAlO7owZvtunMmx1HVwhMEFKvpJvYzuVsbOFFXayfphtBGCKm62SQiq0ahvuOxRRDYC",
	"C10aBwfLw5gA6rYyj9mqqMqhPCssZEsfEctjthXcxwqtY1WPgh6jIs18ffcWgKNAGNcqqqcHi1lQK8Aj",
	"EytnqsYpYKvIoqeVxY8IiFdMufrvFaXMo5h2NtecMe4U3fOuH10+WzwezRzbCwrYAV4izblAM4OZxj07",
	"A3uOIcZWwuRhE5+bTRBHLdsPJrmMTmOTcsU0tpeUrQk4c0gObq1B+tBpzcYn8wpX2RQu8gapMR0WiDtr",
	"xOOAIjU6f5NrQEUBQUKa4pUY7gzR+2KdVKn5zCaVExazmWyEyijXQBVRvGDuknrT9dDHUJ1dAKjEFMgF",
	"hW5GCqnFc6h/P2fr74KjHI8yKzIPhcHFo4YF12iBHLYOoAceS73gFIXDpSvjRl/dU1dG7ykiClry2cRB",
	"G7Xktlv05fOgrChX+P9foeyPTA2DRsjGdLKElTq4NxYTnAszmf+2tbBWF6nurWzU+uS0/Dq5Jl9IczKZ",
	"ZxdWxRduWSas6R+O20xCW+8Ai5QHJ+mRldq/7Qc9qUgP43NE8Vf6IPI101AlJB9K3l9xfWtFwpx0ibYu",
	"LvR0rHxfqDdxhEDl5ahUrxY0hOat6TvljZzUOaOiydB+eJu44ZE/bTfCTRlueuPRaPyy3O1r6wgQfjUJ",
	"0dH1bBT9u8XYognVHxT+LppJ3gCcPg5KT321wbfeD5F4Vcf++t1lSZIyGmXdVcCt50+m2Z+rTsbYW0Wf",
	"EtDZQbWSYjxbN0qP3WDFxVGrNc4bYgG8ssI9rdgwj1zc3jaiQcUtjiN7Ga+9SvMwqVdqMg7oHKtubNrA",
	"KM1W/WsI5DOpSgIOKSVVuI3pL9X5eTLTKthWV/ZULkPI4YPF1XhxGubaehM1VYU9ZQN7LLvMARIHU2hR",
	"35ujRBdlLUp1pExP217n6ghqjUUNnZxRirLs3lhhMdhRrMyJyTHGGOxceMiuu2iucltxBarbVvok5Bgc",
	"yWq6azTw8mnCSKRlfYOFVF6Q9AFUYI7sjVFQMAVJaXSfSwXbXa2bEJPVy6qLKRaha96JStGb3gzu5NZx",
	"LxePXL/V1kBrAT13TtRSdAeS+h65BE2h7hK6zohqOyD4nAOViUu73pd4nhWMqnC+lahMweGxxGGevgIq",
	"kiebyWK7GdQUevObikqPoA+S1EzGLJcaTefxXmnb+DC4yxtMfBZsgaqxImLR5xBXmUwWyCZdbI9V1aQJ",
	"tv0GO2V4arSoDeUcfcDBsrrvGLBifZCnfkznPeAHyAXQviVqE4+6yjgRZC+Tp5EuORDWmBL5p3KtUdHY",
	"ICXaq8qvBV5w6GE6H+ljuyZWAJemh6hofMc1DxxGEP+AqSOK4yLeQa5xQ7iYMia3RsHdbF9xuMlF+COK",
	"KjBiFNsfECGlwy5rQylP6j3etJjTPrxpFcQh2p9hmUhE9ZLiG5zKsZhsU/dM4mxRRPM8nU02MlkvoChz",
	"tbZIm7MnesGemETj1BUlnQETgoVs777qIRsImoo3gIhc2IjD4fxT2l1tHlffyQ5sTHU3vjOtImXOQjHs",
	"10tCUY0Exl2xwECce5OZWsaUb5ZGr/hkJ9/eW+43Um+77PsOu2cLc5OeNc4yVOV0qb6X188jN1pjIQib",
	"l9mDDz+P7jvBlRm6jTtjdHPPc+9wIuWG2pwFlzAzx/e3raTufQ/RZnVDGWHzste2+wOx2PrLOZzs0XJ4",
	"+1ojdz08gJhA7fBBfXLfOpbry3exOmzn5UiZViFj9ntoUbddrj/0gMsyBx81X5U1F7fIGVVXO/4K9NAO",
	"GTqCskWgovt+kmNX13b6HQzjqqscfdTVXNHqEbGvEWEHTD4qg+4O4ip3DcgdY1irLC8OnSOlZcaorTRp",
	"vCPByjwX7da8mq4XiIDorg6h3UFewBkWAtO5+jhKN9yVKRf8nciX5i4Pd1BrcluYVTk11CVRRye2ZPwD",
	"lovBjQROEbkIS6rn64NO1+Bi4ek2vvBbFCtmguwqJhJnw9HlGBEfztmwHzUlOUyQlMheTsJAzBXaur4a",
	"nIQ1XwcV803qDo8M1RODSS114u9iMmM8x2yNwRqH7Z0jF14xnpkpFTXBUc1W4xHXNnAzE4qnNnsAsRv0",
	"uiO2Ar7CsD7ADoRdIEqLboI0fhwSu4ood6+GPzkbfG7NCPbCRItBIUUwlFrppFqwl2pm6VSKukjtvbOR",
	"h8/N+qWsMRcv6o/CNdgLnS5iyhE9UFAOp3Li2Zata685UOcM2/zOtcd1vTC3JkgVH83jO9Y9Sygcozlo",
	"PCHuIPDKNfeFXKPV/VnCPHjH+fej/n3H4rln/db70cXZ4a77EEI7kdxgiEsmmfC1uqK1Z1aibdG0G11i",
	"dR85bi3lxPsp/tLHEt/b2gzT+9bKg/JgF/PUp9JXJ3NTZVSrl2Eo6sWQuioev7xI10PUwaFE1FaK7NCR",
	"yO5HTerXR3DtM+Z6rkRQUdKt9HUi3xuyJV6B9T//p8VBholwVJF6Q2C1bfuCtnYy5sbwKpJXdYYYitMg",
	"Y8q0G0Bz95PR0I/kLBIzVTNZ+FQZuELxmjDNnSIpYDQx1D0jmWGjeFbDbu6BPPC2nqDjPcUiCmi560pu",
	"g9lAb/t8kskTrS+VWNM+iPhUke1vxXzSZiVc7v7VkiFfzgul0qhqjKnvJxzlfq5B69kzawkbZUoDIfwK",
	"+VuCs+MauxDFAp0kGU8UcUKNe0n9I9VwiDZRmBq1pTUt+/RBT7cWABVBLzELndIeocbGxv1BiyJ+2yZI",
	"4efQmiJ0gWvpyezpk5VTHaifngyvBh21uR0j2t8s4btweMdj5GHnHZqaXEN8udBazx92o4dt+OjyVgV6",
	"vFYB85rYqmVjvFUGHAC5hzgy9Y8bTRUCB5iVuqeh/dBIpZ6uzIH8JnWcy8cMOyOwv9tCtjmqe4zOsOq1",
	"JP29Ynjdcf/F86hRn2t9bdvFuxynbwfjfTYnErsgJHI99V6JBZoUjHXru4AP2vwjYVSZqzQ6Zg+5HsJz",
	"+l5A5ceVJGdvsAy11+gF47JfmNQwWI+XnIXQ6/beMJv6hMe5byfxoZDGOKkqAedT6CpA3vZ5E8UnrdbD",
	"T/qnulbTU+S8zg60mxtem5hRHRiNaexUCGj3Udf5HxXjZOh33lqurHWDJqyEEHH89wre+EnE+BKSSfZm",
	"l7+IbvP/J0nTsmrEcpYSuyOtVzhHqrlasQfSEAxtXjB746tXxktmJrtStZZjI6Zq2sxx6pfYhylGVL90",
	"hGA2DrVge27f5S6vYfu98cCQtK+W4PHh6tqc31arHBsb7d1CQ2LxIMR8F0s8R/oEsXVFovicSqNW3q1c",
	"9AFJe/HaR9yp7z99kOHgYH7016sqDyViflggKU48736d7OsQjqf+4w+u8QFzEAvEl98lx28dWbkIU8nA",
	"I4ov8YGR2Wj07v7fDRrFFylkUWGvgLylTiAOZHXRhPu81OnTI1+oH4/rP0KEXBlfIjxm0sF4HNQezcVY",
	"agU1bX8C7GB867I5AvsVvqkoXmZrNp/dNe9IHxh3ZqG4/XhcbR/8Rh1c8vdHnDAKEyEWdVMtxKqNifZJ",
	"7caZ6kTI4FMdRoB2TWCJ3v9OWjNW+AlwdvOIztufYMTcQ1jP0ci9p44jchmHuYO40v1kQ8D9dmj1nz65",
	"iZKkVMHnp2zJ5miNOv9KXvmxaCMQn1T3Ev6pP8WH8Pu570vgz4CzPtqYYsZF6k9E+obHyUREuTTFIdxq",
	"tKgT+57daRLnVH9cMwubllsHC5sw4XPIekRVzuX8ALxug+Ef2Tggozhs4NBpoKh8OP5yhuTdvXYVl1gs",
	"W1zdWnFSa/RgHnrsTjlShQpQZ9LKRP64u8CPxXeQqiab8YNjq2kCfsaY+/Bsp54++UpMK7MibETgMcVB",
	"/Zkv2ji3607RGqOGqosnP9vcqNL9dm7QPHx8igScgeTYHr9QmZoPqfBnQzpjak+CYJyiikYtkYePwzwc",
	"LzIX9PhBWp/GLjpE9N/ZVCJMTwi55HiFCcw14WCjchdyAbxUyfeisKDRytcXwIfBtS6y7LiKDT1ULZUY",
	"lZfqTCjjl6VBf9ke6Dp6e5cKpyiIX+7V0c3o3Edz9QxmcqE5MTzEZXU35vXERIpEfA5yslibvoq1QY1S",
	"2Raymo4ywvcMSWUqFg9evHjPsVrs8+DFS8PH9C29nK43IiQ0u9FrXgfUGdzYxHcKcksOqDOkJcqNJOKy",
	"VIthyYI2U1OGKqsxYbpF8IOb9hlz8AyD069gch+uacVa640HEwdJNHFBonI7w6CPJDoLikcnEZpEXrG6",
	"YxfpNarhV2NSyfx9oYi4rMlbtLinBNyk+6Lal1Hx66D43v2hqHI2D4phBFLs9kbiZDQavj4fXClxiOJO",
	"lB/opJvBjQTqqPw1Tt4NT0bKvqoT8vTJ6Prk+v2oGo162ppMyrTVbZKrTAbpwoZyNbJtPdKJnmWx7oTf",
	"tqEf7VCG03gk9pjrEbjRiUVRobHBa9GXC6AyTiqpLhIF/g9lmKFex2BOjxyaVocJLFFBO+Glm5vLtJ1L",
	"eSu17cMchqgqgjksZIK5DQwLU0y3C7KXiONCIU3nrK50bnR5mfxgI6nKhI2mQproKFKuLWE1sZlPpVo9",
	"ZArhK7lvS1+jkt2abNOVY+phDWhJQWjjaqbftc8Fa8DzReh6XPWiod7Y911cKiak1/aX9aQQhiPOmCmT",
	"OVVMKjx8fB7WKE/lCoZJ0yo3kiz9hUdnvsZWv1ji8M6rfosqxOu9nDSc0edrS6zsXgvsruytwXPvctDO",
	"NIoHSD9hixxhDjqOOwKT8SUgzngf56rEjCbDk7etkguwHADPkmhuYRrtRCL86XjwpY+IJZmF55RxsOQC",
	"C2uGgTjW930BjuX4QXfWhQd0BIjbC4swFFzyfqB0U684A7PclpqJuVCTYXQB/KVfcYWfBW1EMSevQZ3b",
	"tXjCcyBxzImQFA9JCZxWI+QqaiMi5TJqQXm9v/fFlcuQZHvQyspM/eUbecLviPL7bWUCfDtx1M3SI5Rp",
	"OYzYWZ63nYrl40ZWCv3o4ePB5WikUAB6Qkw84HYgBhK1IBmWEVo5M7RIcOMFWZEgNc9FG63GG6oxL1pK",
	"I8Vsb4Gw2ois2nLONqdxpCnY0au9H+z2V9q9rEpo5G0/45dXIHwii8Y1f/gEpwVwCzmOCA8X1alhM9cF",
	"bmNEEufIyWwnv0/23SOQjqsMiBi/7IUSdQkDRk+UazlYdFvVflUJk7uI4K9SJ87xywGV6nTO2oCssUvv",
	"PjyYjnvajy66SSF2kfS1d8jwALTLDEdDv9YcHpFzqwGO3c6gJFHgTKabyZRJCvrAXKoqPHU4rlJrL9L0",
	"fkWZsZ8pP49Tq5swZCHQRNtetoXrpE50VfQYDWAvHuaCrWHb7t7eMMdy4U/rtJms2n07jb1hzFyQsyty",
	"/+t2OCcz5GKCQWfooRnBtEgx9fqY0aFr/RJWhe71uXKODxrTEC5kOoRm0ytN2UlmLjA+WeC57hUwaiCd",
	"9dFQlCmpXEja0rtx6ffvASwsHogEJVnP1ihDv7J8ARfKOoW80JUzKRK2olJmDrdKpBJzS1HYqSR3blWG",
	"O6tzx6qhaGvKWUHE6s3s+3uF+i+LqNXrAO6X6kCo4Ty0JTxt2FBVCUaC6zGOSBXmr3fr7LfzskY7L7Pt",
	"BLt/DEm9prQzIYplfxI+iahiUEg8Q3ZFkS7X6EnchMFgsDWB7g6u5WpetECd6xTNKZLvr95VtEADKjbi",
	"xz5wXNXyNHRhGo3exH0qbdhOivyX1FDPOWwowwJqEUZd5I3Ce5G6dc9GnubL1r6mgt/FgjmI1qJUUMbl",
	"la/L8C18jm0kkb5EZLfTZ/YyJ0TslRgBX2G7rgnPyEaU6jrYII7UX74Czhy0qSKQ7uoL91VMzI01CGW9",
	"HPReoP401WrqsLMltiuOaTXFQpZhptMsVM6PXmxAmjAeP25V1uPq+IkCc5nsuN5ldM867wxtNlCbYwkc",
	"o0JrI00SJ2kvenETQ0OZqu9YMdM6mzFTNvwHb05WNNJamzHtaRV/GzqVe1OuDyzQSfjM3Nfc2oIS8V3x",
	"xNFf/5I39xP9m3VQbFwiOJfqJesuAtxl9H81ZuyOWc5u47BCxEeS8R5zXaDqq1tayGDWkJYZmWLJGBIE",
	"mxd1KIaW5zoSW2u7TpXqwxw7OYz+PwytRmZYc/lXvUPdxQxq+FIVig7x/KiB0zhbX/cUNtLvnokJRp0x",
	"+hDXLS+tJ3tQHTNFrcnhU6NK/4DvyW2aH36r9+TSPoXtb9l6MwX9pvwYd/fsXHTzousdGzHc3VGS5Wn/",
	"rWbfuuFu7CO+O7xaO7xStfDbwbhgK1w1YLONM1I/98xn5UqIPpKoC8bU2WJX22CQtQyvSbCWOCJ95KI5",
	"XDIZGQg3tCDeKVlEJNAV5owG3xHRU5v3mKttupyWKSIr+OTgcLjewQqIwZ+6FzOs0VvFui8c/DI1RJ+P",
	"1dV6CO7AIjo//e/byL29ud2iQfwdTedcMROl8cTvMQfOTOYZrc7+5NnxpMzw5wsbpkFasNx0SIr3So9V",
	"UmNYAouk7GU5Z4ak+Ejr1JCUeF/CuaGkB0V7m5DeF6N430lLVHCzPpRLR7qBNfCaL94s4g2yvI51K1A8",
	"Eg/7UJyumCurueP97uhqvO/rjc3LNsemOkBGno3my63ZCWf1jEpgs4uq4itDtrYmokgyqM8bNf+yqPnP",
	"2m6+BJx61dt3sOqbr2uosnWELUXGdb7aXkMjsBl14lAv1ThUNL0bsSxbIhqj6i2/VLTUFtUvi6n+rDWq",
	"P7tDqo3LdPvysbdCTVt5RT/Gqq/sGk2a0hnGGHPXHMVUe4Dok+BwWGHmC20UYA4zA26mT3rF00HQTmbR",
	"SZotZWs+p7YJPJgQcL23vekSvJxWNFUs5rycxqVFJcm9aT92tpFyKL9sG+XC6/1jgDqviVZ4R+tfeAof",
	"YBifI5p5FKxCV/rEavIUbP0RrOXdImEi6FV/clTf+rXpz+pcNvYU9e0irsTgbqFPggnsTOUFJg4H2kaY",
	"gSg2mJsYqlUJDhZZtylaDGhFsnycVJOLWo2cAbkSExvZC1Mc7OLkAlnFsbGg0cGtMFWBdo2kD6c15aNg",
	"39YJaxVlGo3jXFUR0sSqgZFqxF6MRobEjxmj+6Kpvm3oJK0WWdZXFCAJtoGKyobc+tyRiTeVo4+jEUFW",
	"JZGICK1kJkhGL0pQEaOruIGTbX3jmZ5P9IkrPtBu+81nvix9X1MN7r5gjmnVS+S23T5bU8KQE6qIjcdF",
	"640XM52rv8f3AolF7QF5g8RCxzPPXpC1p2TeCmwEYKkJv9548P+zbEaFVLp71903Ug729w8yZxzLhVtE",
	"ZtLECZkzE4llWE7aKmI3lZ3yjS3gxooKWQ6eg5AW4xbBdGlJZgUjvd9WMUSK1a6IgYWow6jOdRoY0fgh",
	"iUlw2tiY+ULnXR5/nhQdfwv8y4DgqdbJ5EsfSQnOxNseGZXBKEi+64AEu3auNV332jPOmKg4+ZCfIoJx",
	"qZpRHAggTd5rwe2WbnHZWJ573GTCJVaPqpJpuVpUld2KrV0osg2bLnIlCWv/xqMmsLoJlIbRu3t2KiD8",
	"Ad1ZVSE973TeVx89gyJ7EfZddgfBTjspOAoJVS/TmheOu9YR56h+RAr5+9O6X+WMjPMwbu/RlRdSfnpV",
	"Xz4GldQ+VfkVFetDgo6t4H8//8WersSK/vd3vxSMfv4x1TQE7T1lbsCkJzcfn/zdR/pRfpRRXvgTWzIe",
	"NvrzX2R+SejMNZgNKKFr9SoNVBFR+vNfbH/JoZe2mgmNomkzyZOU8P7zXyS/5MjMUJqmDde0uDXZTqjc",
	"/pJvM2kRp9/323zytOYMqrMRKyzT93VjyANbtw1EH7VrPvqsW/CaPURHbtHj0uN//Sl6+PmWvMxcK6J9",
	"KBKcVIoCkpg/lOyzUVKVXTMAXZ/v0+Qg95uxGztqmcx69sxawkYpmgnhl4t5ksbP/NXTJ0xMgnu/+rVM",
	"GEMkV8+vnbnmls99XHpHVirlTBabNRLHxTl4q6Gsm2w5PcMJwUildEl+Lh31suiZQUXNzHfh+AqEx6iA",
	"o/T0Pfns+ZGH5pgGk/ky+kN565tMgdoLF/GlckMqlUwi6eg401GcvqG6y9XJZ8/LHco6zk9PExmlqwhs",
	"OWiGxFm/qwic9RtyPuws58NmnI+uXneV9dHV62a8jwfjk66v/SwPzdD4MOoqBh9GzTifTpmUXWU+JL4h",
	"/4IRX0JnEYjIb4aBzRnFoqsQRNQ3Q8BhU+j6bpjloSEaHQeiRQyuwGbc6TgSERPN8CDgLZLn867CkeWh",
	"IRoueoepfxMpUjqLR46Lhoh4mELY2gjs/mlnIcmz0QwTai8Yh/Nx/2IFnGOnsxNlj5GGuDicYafrx0ye",
	"i2aIeMhewIkt8QrOftxVQHJMtIEHtxd4hboNR8RDK2hwtu44FpytW0Cih1wgnUYi5KANJJjrMiq6jUXE",
	"Qyto+Paiu6JHlocW0HhFMF12GouQgxaQeO0jG7mMQKfRSLloAZE319eXnQYjYKANHJDDmNdtJEIWWsDi",
	"i9HlB7zEnQYj5qEFNN6i2bLbkmfIQQtIvGPzOabzOBtFt2WNHV5aQOccv+r2kgkYaAGHi1en+KtOAxFy",
	"0AYSHtAzAInpvNuLJctIS7hczGbYhs6jErHRAiaXPhGIdxqPiIUWsBgtMGedhiLkoA0kPMS7fXMLOWgD",
	"Ccl92e1dNGKhDSz8aWym2m08UjZawcQDLkB2HJGIiRbwuGaujbqNRsRCC1j8jLG3AB50+3hNuWiIiNdb",
	"gN3dQyUivykG8w6/1UfUN0WAdN7KKctDMzS4vRgK4Xd2RiT0N0QBC9lZRVdIfEP+/Wl32fenDbkXAuQ5",
	"6+6umNDfEAUJHIvOno4x+Q0x8Dt7zxJ+w/uVJEgIjGjXz8ZdPtpBZewT2nVEAh4aosHB6a6NfER9MwR8",
	"0QPe2ctlRH1DBCRzoLvnREx+MwxWaNNZeSmgvSH3eI5JdzVwMfnNMLjp7jZ403APPD3lyO+6mJBnohke",
	"/fddB2PLQTMk3nXVg/T0XTMP0lNEna7qWEPaG3J/I4F3fRHkmGiGB9jLBZvNuo7IDhtNMZGM9rG9xFQw",
	"2n1oVNw0RIg40H1gskw0xGPDqHPNfSE7C0bKQTMkMEWcdHZKRNQ3RED2YQbU6exLZoaDZkgQZC9PgXd3",
	"h0gZaIYDE/ai65tlloemaEhGRzaOIl/a3QdGyU5DjCTtrJVMRHwj/nsnvc0UeA+o5F1/AVfy0gyd03dn",
	"iGPa2QNmy0AzHAZX14OuKzTyTDTEY3TSWRRGJ814H45OTkh33ztS+puhcH4+7odJs74YXZx3FYocEw3x",
	"GPdPfUJAYtpZNLYsNMbiFUHrDuMQkN8MA0RXSMRx7bsKRJaHhmhwEJIDcrt+hu4x0hQXjrsrXEXUN0MA",
	"uDwddBWAkPjG/L+66vqqyDHRGI/3Jx3G4X1D6XKBMH3to85GFtwy0BAHsJeXDNPOHp4pAw1x4MyFzmIQ",
	"EN+Mfyxs1vXtMctDQzQkxzedhyPLRDM8COJMbnJ5JLqKioKVhtgw3zmFzsblSOlvjkIAar/r+SwUnDRD",
	"hjkgNqLrqOS5aIiI6yEhRmCHaaw6i0iOi4aIUIkwBX4x6iwaKQfNkAjv/Z21703Ib4aBz7saXDMgvRnv",
	"Kz7rKu8rPmvEex8t/K5a9oe0N+ReCOQT2VkAIvKbYQBTjGhypHRcZFAz0xAfQjqLBiFNeZeo81Miw0Mz",
	"NJjsnXVVWIqIb8Y/R3PW9UtFnommeGwkLLsLREB9IwQGF++ugAASYcbojgKRZ6IZHkh23tI/x0MzNAgS",
	"EttdxSGiviECwoPuAhAQ34x/F3j3fV92uGiGyA1zfDGksrO5LDIcNEQitD3pn8Z/rF50FpBdRhrh8iq8",
	"vXT1WTCmvhkCSMjOOv9ExDfjHxMIXwS6CkFCfzMUGJ/DFets+MKU/qYoSExBdvwI3WWjESave11NY/K6",
	"1yx/yevBa9TVN9+Q9obcvwFE5MJGnXfnUbHSDJs3STNfjC7O3wHq6mvWPiPNcEGEoPmis3a4Kf3NUAAK",
	"srMX0Zj6ZgjgOZpuOhvyMiG/IQbyjT/ttt9CjoemaLxD3Udjy0NTNAA6D0bKQlMsCJp2XcLIMdEMD+pf",
	"dzbQVUR8M/45miHa1eeNmPqGCMDmnGEB/eAglt3NRrLPSCNc3vTedRSIN713zTgfvh3jDqelSelvhsLb",
	"DgfHjYhvxn9XFTFvmulh3iDuMrrprOVsSn9DFMQC9xj3OotCTH9TFJZAyOik814ICk6aIYMJ4azrbuE7",
	"XDRERCJ7gTuLREh9GwgMKPD5pts4RDw0Q4NR2Ky7a2Ca0t8MBR+tobOLIiS+Bf4HPumwL06OhxbQGF52",
	"G4nhZTMUhifjrkZKCEhvxvvpWVdZPz1rxvn1h27rYLcMNMPBARd3VeEWEd+Mf2rjadffuPNMNMSju/aS",
	"zS0lh17YxhXYrLOhY3I8NENDcAQEdzlMY5aFNrB4DDEyVKw0xEZi1lkwJGbNuF8hKrt6p4qIb4H/q9Go",
	"0xBcjZrdIr54xdm8owiEtDfj/vyLjotQGQ6aITE+T9oZSnC7ikaei2aIAF1i2lVb2pj6hgjIU466jEFM",
	"fyMU3v6wqyfE2x82OxveDsY9JBFh88cgPmq4aYbQVQ941z0v8kw0wwMJD7hYboa9UW9wdd11ZDTsNMLo",
	"3euOovHudTO+gbJVV69bEfEN+b8JGOr4ktjhohkieMrhYjbDdleN7jMcNESC+jedxYD6N424PzvpsI1c",
	"RHwz/l9h0tlArRHxzfhHFM1hQOeYdv1FQ8VKM2ym4HTXtD6mvhkC4GDU3SBKCflNMZCc0c4nMdzjoyEq",
	"1ME3nYUiIL4h/xJ1OKpWQn5jDERoTtBts4g9Ppqhgm3OBJvJ3vjqVVcRyfLQDhpvp13H4u20IRJLziTu",
	"7Fkak98QA+pw1NkTNKK+IQLCGyPiQ2cxiOlviEJ3LYZC2ptyz6E3HnQXgJD8phgIf4rFAg8I2JJ3X7zW",
	"MtQMJ0bnrH/aVVAi6hsicNP1INdZFhpi8RUmpPtw5LhohMj5oNdRFM4HvWacv+mqZur8TTOt1Pmwq4wP",
	"m/H9s44v/C0DzXBAq85GDAtpb8Y9yBOvq07dEfFN+Z+jzoYKi6lvjAAg3mEEADVeA2LJvA5PgpD8ZhjM",
	"Me16QtIcD83QYA580VmBKCS+Mf8dT5+YZaEhFsvOuieGtDfk/ivm4s6yHxDfiP+L0bijzF+Mxs04v77q",
	"6g4YkN6Md1syzxd98Ajr6gaY46EZGsvOvkwHpDfj3e1ustiQ9mbcU+jqu0JAejPePaCno35X2Y+ob4xA",
	"b9zZ54KE/MYYjEZvOgzBaPSmBQTejcA+cVadxiHmoTkaEnU2U01KfzMUOLIJ9C7fdxWFhP52UOiNTl51",
	"HYmAh2ZorGmXE1kl5DfC4BIRRCXuqjI1Ib8pBuyESNZxZeIuGw0xoUgw2tn8qCn9DVHwgPd82VkQIvKb",
	"YQDzrt6lA9Kb8b7ABHtdTyq+w0VDRBhQfNNjVCJbdh4YFTPN8GFCzjmI0Y+7mnshw0EzJDgLmumqb2FC",
	"flMM2MxjmMruohAz0AwHn8NIMo7mXX2yznDQDInN5UnXd80MC42w+PH5yWXHsciy0AwLHxGbuV0NfpWQ",
	"3xiDjegwAptmp8UVooK5a8Q7nupuj49mqICzQLK77iIp/Q1RoCA6m105pr4hAiu8gs4CEBDfjH9mLzuc",
	"jCMhvxkGvr30O7sIQuIb8i+kgK67iu1w0QiRUdel6dFJSzhcdhaAZtnuRoNej1Hhk66KS1sGmuEw6nd9",
	"KWw5aIYEwrTjITmyLDTEgoB4xXhnw9xtGWiIgztFnYXAnTZ7xxjZCwrYAf5InM21/DRDKTa+P/UJAYm7",
	"akS5y0ZDTEhnYSANOacSUyAXtLNb55aDhkjwFbbhnK07C0TCQDMcFshh66Ax4PHZDM5jCE9ezFgz3HBn",
	"jQ8D0hvyDi7QrlsQ7HDRFBHO0QfMgXT3dTjPREM86LzDMYgT8pthQJC9XCPe2ZM2ob8ZCowg/gFTp/Pb",
	"xR4jTXHh3UWCN+SdYvsDIqTzU2KHj2aoeMgGgqbiDSAiFzbiXQ/ebeCoIVIc03lnQQmIb8a/ZNwVCwyk",
	"q2b+GQ4aIsE3S+BdXyd5Lpoh4jtdzQkTkN6M9zUWgrD549lAtQw1w2njzhjtLCgR9Q0RoDZnIzbr7A0l",
	"ZaApDoyweXenQkR+Iwyuuxp58LpZ5MHry3eYdlWHFRHfjP8PjyDXYJ6JZnggwrp+Sc/x0AwNQO4Yw7qz",
	"QSm3DDTEgdrQWVePmPpmCCxQd7OJRcQ35B/OsBCYzrt8XuSYaIgHByRPbMn4BywXgxsJnCJyEdbr7jwx",
	"MdUMLzy1u3olDWlvxj1HFK7BXnRa0N7hoiEiQJ0wAU9nwUgYaIiDL+Qaddb8P6W/EQrvOxvb633DuF7v",
	"RxdnHRe3syw0w2KKv/Sx7GqE04T8hhj4VPrd9QlL6W+GAsWzzi6HgPam3Atmd5d9wZrFpnnvOd1NAxAR",
	"34j/cX/Q8SMhw0EzJH56MrzqPBg5JprhgWh/s+zq0oipb4iAh513aNp1HeUeH81QAUBdDbAQ0t6Me4ad",
	"EXT1wIypb4aAT2hvAfayx+gMd9UoZoeLdhB5Oxh3HY63g3FjLICjKYE+TDGil8hedjdekYabRgh9uLru",
	"KBofrq6bcY6kvXjtI95VI7ItA81wWCApupt9LSG/GQZ46neVfzz1G/LOQSwQX3YWgJj+hijIRehkCZ2F",
	"IWGgGQ6MzEajrsa5jKlvjADuMP+4IffcmQHtbGiBlP5GKPwEuuoo/hOgDTnn7KazvHN204x7jLqbZy4i",
	"vhn/GwJd1aaEtDfi/qdsyeZo3fVU9LtsNMPEn+LOmq9ExDfi/2fAWR9tOj4ldrhojMjIxsEZ+whQ2eGk",
	"GTLYnfKuBiSKiG/GP2NdPTwC0pvxLmxEOmssHVPfDAFfdPWcCEhvxvvmprMxlULaa3Hv4UnvQ9fMdTx8",
	"3PswqM3vCoZBNx1kOqa8KeeDGwnUAae7CCQc1EVicDka9VHnkhF7+DihvDbnURyp3gJ1LpBewH2G+oYI",
	"jF9eQQej025BSBioi8OQYokRObHt7sV78vBxjvy6GJxhyeFESmQvr1n37FY9fLzLQV0kzsf9F897l4Mz",
	"JO1F92DIkd8Mgy7OgoTyppx3VzLY5aAuEhejUTctTDx8vKW9LvedNF72cBO7ZQ9PciE1TwhGHTwO93mo",
	"hUZQcCJkGJxq9dJmVHJGCHAxScqcgUQJde3DkevzeK9PFTLpH3GPEfX73FdHIw/AKbKXvpd8DG8PpgKH",
	"xEnTsxEt86TkyBXHQ+rATdR2+3D2YYZ8IsM+0iIPbtmlfyDHwUEpRC4zxEjug4LvdpG69DkxTLvs50NO",
	"OmW/VbcufZPlL7npWEbC3x7rszBGm2qDWCHig+KLsRfT1LR9LhgP/nJA2Bx7UbEnvfB3a8a4JRdg2T7n",
	"QKXlBUf10326ZpgLOQkA3G/qVfDNQtSxCBLSGgaF0iYwlTCPRhQHC2u/+vUCLA5f+iAkOFZUSEFB0HZK",
	"wH7jBLtY7jd+CfzoEs3Bir6ryHKDMYIqW1FucBWLy0U3kwBIoSaVwo2clByXoKx2UJgHVADi9mLypQ98",
	"s9/a+cX14HNLrNF8Djyob0k0t7CwKIADjiWYJRdIRiXYs+D/LO5Ta8aZa/2di5ZgBZ0gD/+d5TAQFmXS",
	"cjBYmFrImmGeoWs7MRl3gCund8iJcgYkEzAcrHgXUI1Wimv5QzY8O0ACrzHGl0FdVaNiwdZ7gzxljACi",
	"6fd0VBTfGZdq6rELQiLXU39lEpGJw2zfDQhWYxkWikG02MyKWFahGTWXslHcVFRU1dQacYrpvNLYFOxq",
	"AfSKvZNICJtTtT9j3EVqYClyy++skbTh3FzBlyEdCnhc5gCxOHgcRJg/YR6u2O1ssySzbEaF5AjT8Nsq",
	"KxJb0dJ98nSHQRSKynvdjTyw8WxjIWqFwnTQetSCtcZyodofkKD77Qy9IZVArAtKNp9b2VZH5yXanDJJ",
	"QZ7HWGpItE7DUlZQrESbNnZ4aUKt4eXqbyzGg///WyuoWqYH5lOp2iB1ncQVLFqSg6h4jzlQvQ+bOaX6",
	"WBkgZxQCTFzGweqNB8L6vs1cF1kOhAcfOD/Y6eFY1QVGK2ScecOT8UkJUjWH8bvg5+hYSzeUdCuzOEif",
	"U3BUDbpYeEPHNOPOhqNLa9gvQZyLJYeixq6vBuVaS8+6fFtXITMWD/XhIjwuhQ3UCXYJxq2gcPovJzzq",
	"gPruk/+PvfvdbhvHFgX/Klw+H6b63Kgqlbr3rNu91qwZW3ZS7jiO23Jc5/SpXnUgEpIQUQQbAGUrs/p9",
	"5tM8xMyLzcIG/8pKyGqCBMCLL4kk29obm1s/gf//9J9niIdnr+Ddzv52Il6aLWPCN/ib+Ze/FERIdOmt",
	"8g+ukuibDZAn/TKAYrk9wEIgJr6VO5e/8E/FYOXdhN+iHYkPbUhVdx8O1B909ar47v7mIpe/hKNgeQjU",
	"bL9awr9VX/GwboJ/Q1GEo5OLW1SXkGobjrraVAC/23Uk8oVTH4UmWfMNJSHmgaxU+Eb2L1G7OmZI7es4",
	"8c4ZbP/q2k+w4rCjEVmR7ss7D9G9o/6JKN+aHdS2RbyYpdQW68lpConxV+YjcuqI3vyPfzv5o4zFX3v9",
	"N/ycEob5V38uRPzbjiSZOL1e0jbSG8LFiXHWa34i8AYm2cfL5meGV8H53bVc/CkliQg+3V/LZRFhgUhc",
	"rAYGJFHzOflXr/rN6DIWf59viv50f/Pnxcfbl4P56hKRP+ApCk//9O8ZimVL/Z71C5nOX4q/g2xOrWNk",
	"yxSJzTcm0qe2IGDGTy+Nr9almciLsmzxofe2ik5bB19ELrcY/K61pPb4spehqTEvkjix5UROz06soMuX",
	"5bx+jxM4ylP5rtajGU4pExzmODFO1mIj5zjyWR4uyGMcvr6F5NSqWPHXaI9IjJYxzj8g0Jjw/hnHTK7Y",
	"o0xsKCNfcCQ/TxnHcqL3uzexwoe90+pay+ayl1XdnxpfTLiQlUKc05BI1eUsNvjfeD351hX9+uoV6Rjm",
	"+G9e/TM7t/6JO6B12HL5onbyw/obFywLhVpRjD+uzv70nx2oOZLvH397dbwyiwWayagBWtJMTdLlX774",
	"rDX/TP6o6HAh518o/BrWrVsuqnWCYgq1olkSnfigtNezvZbhV/gMU1wrcevRX3dX/9Q2m/YRSf7z23Mu",
	"ZECV9QVGTK1uEFmyDUZq5UF9c52d5x/+o29MlJL3WPYhELOiSrdEIDVIvEMklhlnqdTr/5QfiXCDw+33",
	"Id1Vb15ePwG+uRfql2HzemMxPqrvn+Cnoi8afyeTwmzHP67yWy3KUQiR8j/98EMj7g/wa/LXiYhfhD+r",
	"fc+d/fT962JrKEqJeuH712dy+iI2ULYflvCF88P/BWr+Q760xqen8IzgPQ5QUFBRhVXvweWMvthILRsK",
	"ai3n0GfvsFBfbNf5j+sbHv/zxaZZpD46chKsDp961dw+9EpOtIsDasuQsNxhVlAumOJHDP89I0zOONVO",
	"INWosISLdcsfZVnQcqn+pULAA07jTGD5MGQ0IbLqKKJLeEXFVzKiGKebGcPlhisU7xD8l5IEfnuHvkDj",
	"oV0E/xL5bxJuKMOzZB/N6B4zRiL43SRilMCvpSjc4JmkY493f6+9wsIN2aP6C4w+VU9DtMNx7Snd7WjC",
	"6y9k4SZaVi+sYpJsq6frDIVoR2NcvbRBEaVp7bkQtWefefpEtqR6YYtW21p+MV2vSbLmqrVrmSRkVfsr",
	"ulqSL7WnKU52GAvYetp4la5W8iNSvpZmMUeses43hNHa0xSx2vAkY6L2jjxbFh+a2mspZhyL6hVBdyGq",
	"Pf9C6RbjFKuwKXxA1cM1Uk2TpqqCeU8wwgXUhGVL+J+zNfzHsUio+hMuMCMc3odnkKKIEecEJfXHM/l5",
	"UD9lOFJ9mfEQM0gvEzTC6j326ACR9lh1y56sSayG+QR/9Qx/vJQ9B/8/CxjPcslQJn9tGcE/mfwXh9sN",
	"Xa3gYRxh+DE+0CSaCZZxGXpJEsTiAzwSEV7hRCm8jFG4XWLG4EcxhKQcqrKkXNBkxkOCE0FWJDwrNqXK",
	"3wrRLDwsMZuFOBGwTyVEyR6pHzHMBcNop56sqfqfEQgZLuPZDjGSqGc4ERT+CjMxgw8wPMpQ/ghn+YMV",
	"/PoGkWQN1/qQT3C4hZUxeMLoDv6ccDRDMWYqT/lsi/fqYUiL/2cCxSouEYxIi8IYMQqz3DCmWbTE8GmA",
	"x3KhwocyTNAs3MPHVAVNkj1kIqVY5vek5sULq1gty5CGFKU0Uo8jzA/q0S5FnM+K78z8JcpVXWgCnRVC",
	"LaExQjm5eXUWPmHYCLOBEkWIc5TFAjbALVU3qgeziMMv4DhW/0GLR1SE8CUVMbSm+YODwLIpMRIQCMeI",
	"C1jeOOYphgc7zLj6IZVvh1PYhoKfaZTxmZwUwKvqW2EGS4lXL0Dt8sfy5ZUatBzHCnEBfbnCEWUywxWJ",
	"MVT9DPaNrDGj8PFdUSZIAp/7FcN4yeUvrFEco/UGSrYOpXtrPFtDG67xbFPeLwme7+DfBAsY0pqs0fIA",
	"H+41ERjPagmuidhkyxOvFAtr1viWWRMRo2XtNYA9S9RSzX9af7MkE/BZW9MYJWt4QNcxnr2O0GFGxFP1",
	"Ckx65GdlRlNBdnItaQaLbc3QCiUIHuFDQgnHs10xd3x1tsmPYZOP2I4mB/ijDeIbElKWqsdbHMczjmDx",
	"bEK5BDfwtbwh2z3J1d2QOGYwqdoQgcINqR7NcILZWg5xs82J29AEH55Uy20gSoaeMJnhLMZMpaBeIGnt",
	"ScoJ/DVszH91RpYyHInwjsDTuPo4k3h2YvUnCQnI8WIbX/OF2Rr2pxfdSlJ4NPvxdVR79lPzWf3JH9WP",
	"uCCSEbJHiSDlgxmDiJ9xslW9/xmLJcs/B59XjMrF/Dn5LP/dK022iMuvsu1hRkI+yyu4ZeBf2WgJFfkX",
	"c/6Tl+PfZkvMZFvLJzFO6J7Cg+ed+nKNZeiYLJn8Hs+/nmOSZHJR72by8yb/cIfyDHYoQWuMk7WaIe3Q",
	"Hr5RdksczVTb7nAkV0W36qHkCbTY4SQCSmUfcuh2+YSEjHK6ErNwz1aNF7ZLeLplVBB4M5JIjc7U3pOZ",
	"2pIsZ1mUQViiFhzsDpkhOF5bcly+VD7m2ZJw2aAxDgVTydFkTaHsO/qM4L8vJI4RTEr3apUEXEiwQGmq",
	"HuTzBfkII/Urgm9pCi+uSSIHm2xkbgmBf7iYqW+E4uGb+uNZmGI4dkO+SCNct18+/wzvRLfQ9gn9QmE2",
	"mqSwSpOtwb5kTyL18y9NhGgoaJrxWYTTmMp3pFuQgO7U1wdN8AzDGgB8McvJ2izcQ0XkY+UpHJ/BN+Wj",
	"WKaIon3xgix5/vgJmoUyFMJcSj2YhWnWeDILOZILnXJ4DwELkj4lhfApiuWnh6mHdIZiQeFxgnjeVilK",
	"MQszGS3FazmkdENiBUi6oTghz7Ni3fDVWUq5WDPM+d9jtZ8anqiHdFXMFtJsCf8yOeekTEmZHlLUrGl6",
	"SOUS+HuCZEP8PUOxhD1/CN/i1R4cWJ2JNjARZTjBHL6FGN4T6Er5LZbDKB/KBcSycAtTSTlJ4zhsxubF",
	"55EjlTNHMeYryuDzy9EOpqocMuPhJsEkwqze8fIdQ5pwNTvg8NFRu/1xTOGjnc/6E1hD4XCjfA43yi++",
	"rGDXJiewzLm6T7p6xBiaPRV3CJevJOsi2/J20a/OOI0ReyIJzHw4jRn8l5DwCUEheHFj2OY3NVe3Rn11",
	"xqEnee0mofIZ3CRTPsoiCv9x+KMnshLqf7hX4tFb5jcLlI+SnB/1RN3IQq7jo91e3SdJPlH3C3p1JtSN",
	"c+QDvFN3jsnXyI51gu8CATcKeXUm0lnxawwleCaqe2bIl3ASgYLwpLh9wqsz8ZQXMSsuJC8fZomQn6kM",
	"rioO/3Mql28G1ck4fDnvURIdthgepSSSRZWPYb11j9VcfE9JxMG4cruFbJAVWTdeUrPl6rkCrfH8zVlz",
	"0+VhBoeAQKH2B6QOsnqS0hVz9acNEly5+kSWGfxXXK9MPhabak74BFdvUv9zHsOj4mpGr86e4dvoGa5x",
	"8+rsWV3s5dXZM1z25NXZIb/qh3yoLnvx6uxLJH/ji5yBqMscyGfqPP9XZ18oFPBLfur3q7MvGYc/gvOB",
	"X+7h/Mff5KdabayDTTVvXr8uNk9htfldrl+SEDaz/PCZqz0b1aaNb22hG+LYadiI1tyS8/H92T9enf33",
	"1//9dyV+XIgXb3tLRfAWtoD+49XZ//idZWl99+tE3YwoWIBRwRVjlDU2O8I2q2KD43/+TS4pnu12iB1O",
	"byk7sX1MoDU/+9N/nhW7+fjZ32SEH/KNrye3wV0gjqOAqgOmOOzEJTgK5ndXwXdz2MIT3MVIrCjbBVdJ",
	"tsu3wP0BdiGq8b4KxIbwaufiE4nj/PCSWr5HUz+1AwcxHDAcw64BQfMDumDy/33wCw7yTaTB/s33b+CI",
	"1/2b7386tSFwDrOab24AlCOKMCdrdeiuDBdTus3SYiufOnqw3MwXpvibG/nMfbJ+zzka/vNTfH5kN6qd",
	"XPX9URLvABWNHwa314sH2fzf+DSVe0m/tk272fdH+xAxVzHLT4v8qs0/DeWOxQ3igVrtC2BG+aLfr8tt",
	"0AN1XPsOXN9Z9c76ncu7rb1+QD++/mqL/cu//EvwcS+nv/jp1+ShYS+KY/rEgwPNJHCs+toojvONqkTj",
	"uHY4IByCLhsQ/fhaZf598OuvvyYXhyBSJ+q8ClCwQ89kl+3kn//4+nXtzyXkfEOfkiDFDA5b/v7X5Nfk",
	"X/8V2ia4rAbwp3/91+D8x9fBLRZPlG15sMjLHJyXaxDyT+Uo4UyLNQw2uEFsjQM5cwi+U0fz/+HX5DpR",
	"B/TJwcLQ4fMDB+sSIT8zOKDyj2P4Y7UTX7rIseDHX1spo3sSYR6g4Nf8PI5fz4IdDjcoIXz3/a/JA+zh",
	"L07g4JS9CkJZxf96d/UQVAvuB/XD/3oFv1l8RNXX4gbB0viv2kkJ/xUQdTjDr0kYE6gm/GqC1Zdiirgk",
	"K0ABfENVRzwX35hw0kJ+SkcQky3+SkL/h/rvf/81e/36p7CWwW8kgtfwf/2afFWbc9iZlYe5oNHha4RU",
	"v0JwdZhD/djuf4z3VVlc3Of8x9cnzy3zitUVax4wD8cnyBVYOEAs//T8eoZ+fP3rWQ0wkkSwka/B13Jp",
	"iq/lcni+Li6Cx+Z01mWxlkvLxCoT6ikW7Hh3VqyLi29emtHL9fvlWi67yEWFMIcXFWJ4v1SYO0ajLBQT",
	"mXfBmKyDrMqpt2Xq8CFnOYMBeMm0SUaF6IBZfqyZKc5U+BFAywNNbF0yH5ZtqjWy6utaeTSku7KpIXjb",
	"dNmm6tmuW374rCHcVPThbcvjTIw2NSrLZGsk1RO28thuZ11TI/CsaWJNlbNdNTgVwJBpMvbwokGUCW1A",
	"k+OxTLJaSj0dy89McVYxmb/fkKbZMlnUDpKVRwSa4qxIYHDTaqfLTWJ6Vg7CNteO8uqLW+2YVXeFUw/u",
	"cUi/ch9kT9w/QVz5MW51rnmepiHrGkkMP4eT4YL7IlzjjPzgXl2WwWX/GtW0zMBTufV0UL7lfXWisbMU",
	"1sfhJdQkYaPfOmiohmDEwB0aQb4dCm5Ikj1PZKoX75BtwJUZ9WUNrpfgrmY7BI32jZsyeM/+Cc92qINi",
	"cI0NU47J4CNIBmEmZZkckW2a1XLq61l+4Rd3RZMDgIZb4PDywpOmizRZ13bU1PWCDKEGwYdHTYVRqJX7",
	"TOdYLgyXZYNhWSZbPaeeshVXsnJVNj9F0+oZtEMHzyJjmEXDS/bhsgLsorg+k9OGRbYBFmnSK3J5Uvbh",
	"0ruly62oA1rEGFpkBLSup3ak2o7YphbRpBZxWq1rr5YutUi7WqeuKmuIsROpDO+aChrcPl4qsj7mkZ2m",
	"7UQlLbPu6xn2xE+98e0++lhdI9lZC/PBPF4Wg/E0aqLxRP91sFJdatsUjxB9BBFVnGmtoqpB2YZgPam+",
	"7hWXgXcXOxiBP6RXt3RQ1nbcju4eYAi5ZhbDYwfxgnOI9+EvU1vFbVbTMv1OJtdTQXjP8+oOGM5iWBvI",
	"h794CzVZ2Gy5zibm908xS6JKYjQR83AliBM6ratRUDtRbOSmxcTyHkCOk6jG4UXUK6KqancQGX0yzSGj",
	"T+NhKIOVFF5znk1DQEafLPWvykyPfuqGZ67bx+iTl0+zfIw+dXVP3SjPqHuQwljuzSHYJNeJoY5W2lfP",
	"TId98/zujm7bB6Pw9mm1Dzqts335XUHN6qeSGM2/PNz7RP7hdFeF87LayWEjNy0glve3dZxENQ6Pol4U",
	"VVW7s6jujWyYRUhiPBazcHN5Mb0V4ryOljpYz02Pg8VtvV13ENrRO6jZQeiOrg6qW8IbVRBSGMvAtxCs",
	"FFCdJjQBAqGIVgJYz0wHf2/ze2G6jR+MwtOnlT7otK7wrTMUoh2NsVn8yjTGAvBdGbBEcAKXhzoqppUQ",
	"HmenA8NyaToPYjkSj6JWFMuu6wrjBkWUpmZVVDmMReLPKtr88WoCBqrSWQlgIzUd+qkF5zx9ahjePa3u",
	"qWbrjJ4QpskTYjzwHh7uJrxbRJbSTgCrxLTwJ5vWefweHu48fXrpE6IzfJ95+kS2xKx9eRJj8ffnxd0v",
	"Mtw0Jnx58awEr5mbDvP+nPer6+zlPejl0ypf3m9d8dui1dbw6SGQwljwvYdg0534QTGthLCemQ4GYUk6",
	"jyCMwhOolUDotK4AxnQtP+tcIhdiwwcJHiUzFoo3KiwsIYirjhqcHI5H5bWSydM56gDz5qjTXaczH0/R",
	"tB5RrYge9WFXThOyMrwmLTMYC85b8pZMeDIpS2klkrXEdMh4K5vWdQ5lL3oDtRoo26wrfHS1JF/Mygcp",
	"jEXfx7cX5MuE7YNiWolfPTMd+n2EznWdP+hH759W/6DTOgOY4mSHsZCTRsMO1jIZjcMUJx+KmBNWsVZa",
	"O3F8maAWI+vN7TyVtV71YuoVs9YnvwdOulqREJtnU+UxJpofVcRpXbL1uKDWUtlITxeUeTNPgUnVnR5J",
	"7UiqHulKZJrFHDGzPKocxqLxTkWb5AVsVCWtNLGRmg4P1XJ03kI1DO+gVgdVs3U1kG8Io2YJhBTGEnAB",
	"wR4b9ZzMaXpQSSsFrGemA0BYjM77B6Pw/GnlDzqts34pYoYv0gApjKYfBDu6etdULlYDlbRTv1pmWvSD",
	"tnVePzkKr59e/WRNO+snWCYM71VROYzmn4o2xc2CqpB28ldPTYt/qnGdBxCG4QXUKyAUtTOB2XKPGSdq",
	"YAYZLPMYjcIq4iQ3B1YVtdPE4/S0uFh1s/M2lkPxPur1sSxsdyNTzLii0aSQKovxfMzjTeNk5qJ8lmLY",
	"SE4PhXnTug+hGohnUDODqqxdERR0FyLDBKocxgLwQUWrHXWYTOywQ1VPK0VspKbDQ7U0nddQDcNbqNVC",
	"1WxdJfxC6RbjFBs+cKZMYywP/0rpexVwonuPy4paKeJxdjpQ/GvZyq67WDanp1ErjWXXddAxDTc4NLc3",
	"WYUfQcN0DoGqrYYxdt0/VTvb3Gtk1de7vDtdhk41nhdOl3CqJbrItkbC3GkkEH0M1yDO4vJucjtEYGTW",
	"6VZLqjdu0KBO2yZH4GnTRpssZxfZDN6mJB3l3iRp/YYkU7grU2rfXUhSbbceSR2/4Uga4/w78+Ax04ZZ",
	"l3uMsHBjSjIWboaHTAa5IUn27DJeLNxYZleVUU+6ZP85LBcLN3AcvFdLk1os3HRAi3Bh7DrREHwEuCDM",
	"LRZPlG351NYtYXS2mVbLqa9q0KAuuyYH4FHThZqsZgfWsqU51bLlGKjJKFOjLFtaJ1mVUl/IZEu67Fi2",
	"9IxpYyxbdlCMs7UpxDhbD2/Y4v7d1AjjbG2ZYFVGPQGT3eiwX4v7d54vTXxxtu6gF8cioeZ2Wxbxh3dM",
	"RrqVkaaGWV5B20RrptWXtaJNHbataEAPnC7g8qbooJzAjHBjB53l4UcwLg80NeLUsGwTrpFVX+DyDnXZ",
	"NzUEz5su3lQ9O+iWGbs6Cc9GuCjJ4tPiAW+DOd2lmfx4Xifh905zltl2AZIqo76MZU5fb4Rn/joj2vjK",
	"OlxeRMSIc4KMXVakiD88YmWkic3NinFZJtpRWj1ZK9vUYduKMfgDzzRDVxS2u3Yz+cbctHkqixHlm9AN",
	"eZo1tNS+RnKaBHyEzp0Ag3IgnkDNBKqO6wAhwxExByBEHwE+FecOMZFIr6Y284Ph2WZfPam+5qkudRk7",
	"GIFnThdzUM523jIeYmbsKkgq+vC8ZXx+df8wjYsDq5pZZlkjqZ6W5S3psGUZn2Pmr2mkyzLVEB0sEzTC",
	"5nad5uFH0CwPNLFJWj4s22RrZNWXtrxDXbZNDcHjpgs3Vc923fboYOwUBBl7eNcgysRQk2OyTLRaSj05",
	"g5Z02DKZv4dME2SymB0Uw3tziuH9CIo9Xj2eB+8YzdLghuyIwJHTfuG9dX5VKfX1Szajw37JVvP7SHU7",
	"hvddHCNrEpu7x0wefoQ5WR5oatMyNSzbZGtk1Re3vENdnp+pIXjadNGm6tmu25OxHZ5PI+zs/GUxsfsF",
	"Ptm2a/NJ027NJ6d3af6y8HJpkuupw67MZ3OHaTyPcYyGDPJxMbWZ2LN1x2U86zoo49ntIzKe/eEY2vx6",
	"7nAsxhIlkalbsEDswQm7kB+aN/92PzHDoHh2IVZPqZ9iF9CV7jIG+XvH9DgGbdUBsmeBzUkmgw9PmQoz",
	"NcjkoGyTrJZTX8qgL122TA7Ab/HXjZqsartqS4YyUxv8VfDhVfs+uIBAH3BEQqj+pHyDKlrmWz2nnr6p",
	"DnXYN2g+75tm36At2n2LTNkWDe8aDgVNgksSbknCaTIRziLLKIv0MBa5TBh0Wtlo3jLNlkUdHMuMQZYN",
	"L9nlp6ngldmmV6aJr8xlvy4/ebN0m5W1o4XD7YauVqbkysOPMRFTgSa2YpkPyzLRmln1ZK3oUKfnZjAE",
	"D5xm4PK6dlAujrCxTWgQfAThIMzLA8wmR54cp23g1XLqyx20qsvYyQF46nRTJ6vaAboDTaKZYBkXxrir",
	"UhgBPRkseIBgU3OuqqNt2r3IrK958g1hIToNXzkKr54u9apOa7ePJIjFB1PsqejDi5fHmYZxajCW8dZI",
	"qqdseU86rJoagRdNk2iqnB0wExFe4SQydzxblcEIqFWxJjaLq0Zmm3LHifWVrmpYl7UTl/kovHi6xCsb",
	"o129GIXbJWbM2CyuTGB482SoCwg1MfLKGlom3nFePcGretVh78om9Nxp4q5siw7acWPM8XF8C24QlH5y",
	"xHHbbOOaUHP5zNGLG3/iuzbGOpw3Snm4MSWYjD28YRBlYnbJMVmmVy2lnn5BSzosmMzf7zvVbJksahfN",
	"BE1mPJT9TVYkNCdbM48xlBM0CRZVxKlA1yykdeidTK83gIIm1aJ028LGUDyL2llsNmAHIkWChbGVVhV9",
	"cA4fsziZb3C4DS5URKcNhBHYJl89qb7eqZZ0mTk5Ao+aLtTUR7aNshDNwsMSs1mIE8GwIdKOshictjlK",
	"UERQEsxVvBVlwVwmUFvHjTGT75tE05gFHpXYLglPJ9dPxDmCJaqWsMMuzs9r4/BzP71MHjVeBy6TPeLG",
	"lJTBh8fx/PbxfBFcPacxJSK4Q+HWbfhk1WzzrpZTX+agIx32DQaQd5t3TZdrsqgdOGOYC4bRzhhpRQIj",
	"zPnKUHeMRlk4tRMlqlraht1RXn3BK3vWZfSKQfgZnW75isp20W9NzcG3pmOYt6bBd/cZF38IUhRu0RrL",
	"D7fYFM+CPWac0MRx+NbUOvPKlHpzt6YOSpeS3z4uFneqyzxu2nBb0y6uMWLsfIk8+hi2QZzJTubk6KxT",
	"rZZUb9egSZ2ew8kReNu02SbL2a7bMp7tECOJOeGqDIZX7uJm9iGP9Vgro+O6VRW0TLgXifVUbhnnS89l",
	"6C5u8kF46zRZV7VZu3c4EdTYLgcIPrxyOBGTu7OWqp1lvtVz6kmb6kuHWbtanHvQNIEGzdDBMiZmS2NH",
	"majoI2jGRHBxNTnOoHq2eVZPqi9oTFw4faSIHMCVJ00XadBa3UzLkEnTMjSOaZ/Op2hahiw0rUyqv2mf",
	"kOOmffLTNJ2mZaiTaTgzSBoe/kYO86v7h9nVp+Bhg4M53aWZ/IBe7TBb4yQ8BEUrBg8Y7eAAYZnb1afg",
	"OuGCiEy4vtMUqmyffDjTBh/OnF47vX+48reCGABAnHXyb8UM+rdi48zo3t4fn/HgOGkrZh9pK6aNtBVz",
	"fC739t6Tpp+0VYfdCBtEknWGmKm7DFYJDE+bDPUOQk1sfbWsoWXKHefVU7qqVx3WrmxCL50m6cq26KAd",
	"DrfwyTOmXZHACNrhcHsHoaamXVFD27Q7yquvdmWvuqxd0YReO13aFW3RQTtGd8b2qkLwwZW7xzFGHAdZ",
	"GiGBa/HnKr7AaOe0dXIUtjlXy6mvcdChLvsmB+Bt02WbrGa7a4SjGYLNUqZwqzIYfh53vZjc/tWqfJbR",
	"9iKxnr4RjtT2U5eNu16cwyA8c5qYq7qsm3VbvDcJ3Rbvx1HufSJ/Pb/mA46mdGZDXkcLuauy6m/de7x3",
	"GLr3V49zJFBM1/XG83skdLK3xfsu5oXUHHjhCCfgQ5TJTepCap1vIdWFW0hdnsPJ/P0uVu2ghbSbZjP5",
	"tcJNmqYyGEm2B4g1HdZU8SzErZGYBuJgwTnsHOTvnRvAOdVpHbQTjDwbg04GH8E4CDO16ZsclG3E1XLq",
	"qxv0pcszODkAT5tu2mRV21WLEaPC1F1X8+iDuwanNPzPN39S5z7kQe8xx4iFG/ipy76p8VgGXCOpnsLl",
	"PeowcWoEfuPbENCp2naQjmbREmNj66pF/OFncTLShYw0sYlcUUHbqGum1Re7ok1d5i5vQG+cLuPypuim",
	"nHzPaGnSOZXBONLJb9XLC9ddUxWzULZGYhpsy5vTcd1U0/mV1gGcUw3SLl2CZuEez0KamTvpoZ7D8Nrd",
	"ngfzx6tgLqO57F29apaJdyK1nuYlaL7HsMjcM2//k3xTRuMYM/7bpepoGFb5K14+PfLVG6+Dfcne2Gmt",
	"MvbwW+zgRAeSYI6DW1iAKG4cNXcA55aIY6clTPa2ndlaS6mvfLJJHZ7n3d4+Xl4lgh3+vPh466HTBV2y",
	"73A6a7KPZsssjrEgibEtdo0kRpjePV4GF0U4p1Wr18023k7k1te5fVQuNqe9e7wsxuG106Vdvd26sbeK",
	"0ZNR8iCBcbh7K0O5Th3Uy0Lm6nn1Jw4WleO8yTF42jTSBi3WzhoNKUppZEy1Iv7wqMlIdzLSdG8+WBTT",
	"MvGO0uoJXtmx/kaEXjv5cSkaogN2EeYHc9RB9BGgU3GmcWCJGoxtoNWT6suZ6kmHZ29qBH6Hq27WoKwd",
	"UNvJdp5VCRjSrZnGCMxBwKkdSHdURtvgO5ldXwHhTYvl6LSEjZF4CXVJ2Oy6TiRSbu6erHn4wQm8+/kO",
	"GIRgE16rVSO0j8JaVv0JhIb1q7RevFw82Q8dpEtQYoy5BCXDT/N+mP+3/zZl3BKU2CZblVJf1mR3etO8",
	"aWBagpJ20BjmglFjpuXhh2etCDSx1dd8WJaJ1syqJ2pFhzq8npoPwdOmiba8nu26ZSw2JVvG4uFVk0Hm",
	"j1dOE5ax2DK+qox60iXbz2G2MhZ7sjSRlbG4nasnYzdyeMJj7EDY0ST4BaNtgjkPrpJsl39qJnECw5Nt",
	"t3B40nT/hifs5jrl/Bd/Q3xdfD2137EhQhtjt8KH2IMLdglRprUGCZWzC656Sv3oggXm8AwM8veG6TEM",
	"2qqDYpxLNoxBpsKPYFkeaHHg4v/7v3eTu0RSUUnbbGtk1Ze3vFddFk4NwSOnCzlVz3bn8JIY25Wpgg9v",
	"nAozMddgUJapVs+pp2mqL90VrbgyQ4zVUPxuTb3AQVE78jaLODJKnEzAM/fPMyfrZyN1tbx0cHfJnV5L",
	"hTEU7efPSxgCPNlwHdCLY2PcxfEI0MXx5JiLY9uAi2NNtMWx06rFfu+nNsPiuItewtxsLRZjTNRklLm6",
	"jmBte9sUrnQEFbROMqFrliZb02nLBPITM+2oiQ5zMirCnalT4FXw4V2jYv5hMbWZGdTOMtHqOfUkTfWl",
	"w6ZB03nMNGEG7dCuGUNrY7c4VcGH10yFOdqe4ThmMCbLMKvn1BMz1ZYOYwYD8DM0zahBVbugdhB4a041",
	"GX0M1g4PeDu1WZqqnnWy1ZLqTRs0p9O2yRF41LShJsvZqhpGwthpnRB7cNGuIMokGIOC2YVYPaV+hMFy",
	"chgwyN/PzfQyBu3VjliMuCChKcZU9OEhy+NMa2qWV88y1RpJ9XQtb06HZVMj8KZpMk2Vs4NqPMXmUJPB",
	"RzANwkyNNDko20Sr5dQXNOhLlz2TA/Cc6eJMVrNdsx1m3Nyqpoo+vGd5nPlhiVnF2i0VZJUvTqdlU8Oz",
	"jLZGUj1ty7vUYdzUCPyKqGblVFnbmaOmjq3FdPhDax+zOJlvcLgNrj7eBHOpD1q7fDkOTC07rrZKqCdk",
	"1OWjaq8+3tzjGCOOZQd5wzQZRtsPr8UpN3Xghgw9/ATtbrEAllxGK+WWHaRRy6gnW7L9nLyMkGwsj5VG",
	"rFLefkwGfqZRxmckEdjYtKuWwvB6QbBALoY4JmuchHhq285q5bTMuJeZ9bQO3hCWpctTtWoUnj5N9NU6",
	"rQOBaUyJmIUbZO7G780kxlwNVYGDOQR22r16BW2T70Rufe2Dt1SLzdEJX20IXj5d8tU7rat90dIse9Fy",
	"cPEeNri0bgJXwS0LZyV0ZVpajIuWTs/uYAyXF/mD/RtPnVbqomVX5QzP7UzM6hrrua5vtMvLaKV4Wid1",
	"bs/nHn+6x9xfalK3c+2TuZW6k6ipexsU4Qdn7u1soQJNa8NdUT+7fDvKqp9vb9WCc3g6l4/A26bHtqK7",
	"2m1DXMSm7gGvgg/vmgozMdVgUJaZVs+pp2iqLx0GDQbgPdPkGVSzXTMcUWbqGmwq+PCaqTAT0wwGZZlm",
	"9Zx6aqb60l3NPqUREn52pkszaId2zUiMw5hmkSnQivjDm0ZiPIdIE2OtqKBlsh2l1RO3sk0dnq0VDeiJ",
	"00Rc0RTtylG2xoyGpq5fVMYfXjkZ6V5GmphyRQUtU+4orZ7KlW3qsHJFA3rlNClXNEUX5QRJsDCHHIQf",
	"wzhB3mWIRephgoXbssEQrIOtnlVv11RjOs0aDMGfWapdN/UBbsWNYbzkxlZTVfThaWMYXywupzZ5U9Wz",
	"TLhGUj2By5vTXd+8a5pdUx3RytoaxTFab2Q4I7CV8Qen7V0ZaVq4lRW0i7fjtPoBVy48h4krx+CN02Nc",
	"2WLtyoWpKd/CdHjZ5nfTuk/VOkwtw6xMqCdjYeoyYPM7T5cmusK0HS08WyNT5x2o4MPTdRW8Qzy4YzTK",
	"QjG1mRnU0DLJ6jn1xAy/Qy7fz+Xd1TvEPWiaQIO+6mLaBqNYbEJk7FyDRg5jCPdzFW0qrlUFtI63F6n1",
	"Va5afE5jVw3Db2vTbl/VdB0I3BmDbzc4d/fZ8hB8t8a7PwQpCrdojeUHXGyKZ8EeM+74dXjXeGebejtN",
	"1u3cPHv042Jxp/rLm6bLtF0HyRIsjN0jIY8+/AQujzO1dVMYlW2O1ZPqa5lqToenbGoEXjRdokE521Uj",
	"a7Q8CGNrp3n44V27fnd+8R8PV1ODLa+fZbI1s+pJW9GhDtuWD8Hjpgm3vJ4ddBMYzwxf1KiZxPDSyXDF",
	"ZY3ctq1eN9uEO5FbX+cExg5f1qjCrhqHB08XePV268LeJlta4F49izHg+zlbTkS+euWso+9Ecr3t22TL",
	"aeD3czkQr582/eod15W/Io9i6RBsWMITCY2B4iZbTm6t92v1tJLKr+epQ81i0VZL1mU/fy521/558fH2",
	"BiN/uXO9iJ7oxS6exmhZ+4tZSHe7LIH0TIH6tYzGEPUGLQtID1O4RPo3ymkdqC2J9hY1RstK0nnZ505P",
	"Sasx+aNg9HH6tU7s6qn51fN6FmO5OY3V83rlrCRS9+p5jCayen6D/Or5IBR2Xz1PMhEbUw+CD49dkj3c",
	"LKa22g21s4y7ek49lVN96bBu0HSeNU2sQTu0a0ZjlKxNaQbBh9dMhZnuIc4wPstgq+fUEzbVov5YZ++a",
	"dA26oYNrdB3j2esIHWZEPBkDrpHF4NLdMfoZhyL4K2Y0uE4gh19IHE1itbVZS9u4O5VcX/fke8q3vBZP",
	"Ds/rrh9+8ausmg1sdFtXDOVYEUkwm9FUkB35gqMZ5WZpPJ3T4FDOi7DBx0Vwj2OMOA5uqcATEPJ0Sa30",
	"8pup6tCzXM4fi/f/6PIqcjUcv56s19LTndguK0MrlJi6wU8effgV6DzODVryaqPgW/LsNpdqVJbB2Eiq",
	"J4F5czq8SVCNwFunyTpVzg6q4UNCCcezHRZIvpkx4I4TGcE6fLiVIYMPeUiniTuun23afSW/vvDlb1ss",
	"QqcJzPvxEgscyvf1GurS8Lj5WmHcqG25hjTMow9O4M95nO9+RnyL43jCV4fJS2qXis2k+lGYL0u/98Sb",
	"J83LW6sDdGxHk4OxrYNl/BGwg0gfa0e7qHuLus1aXj7bYGum1Ze2okfdnd2V3eeB0wVc3hQdiOMbElKW",
	"GiMujz8CcXxD5jLSpIjLy2cbcc20+hJX9KjLxOXd54nTRVzeFF2Ik+tvM46ipTnlyhTGgE4Ge3Hc8iG4",
	"vHCburKG1ml3nFlv8OQbLmTDOk0ejOL88sKfuKYdv7Lj2v0LY1PshfHw2s1vFnQlnuRfTeqOQpswtoy5",
	"MqGeuoWxy6rNb7ximhQL43a88LMpvPDz8Hjh5+C7KxajZD3l3Qv42TLJyoR6Soaf/S4FbxlYhp/bLSPb",
	"PeFEDcOEaEX84V0rI03r5NmygpZ5dpRWT9XKNnV4lnb9/hHG4H3T5FvRFB2Ui2NGd8aMg+gjCKfiTIQ1",
	"GIxtqNWT6kua6kmHQVMj8BvSdLMGZe2AmkDhhhhDDaKPgJqKU25Qe6zV0HXiYGi2EVdPqi9xqkNdJg5G",
	"4GnTRRuUsyttM5xgtj6YFS5PYjTorlS4+WGJGX+5phqgJApuqSCrfJFPQMC8xFZC2MxNi4dqCbuvohqH",
	"t1GrjXm/tRO5DTETpmiE4MOTSJN18F7+M7+6f5jYrlQooWXk1XPqSZ1qT4eNez/HzF8XRRdu0A7tqNEE",
	"H55wbOzgkCL+GLTlkWCiV9k2maldMUDLiDtKq6dyZb86DF0xBm+dJuuKgrZzZ+wMhxFObbib2HzNttMZ",
	"NJ3H4PQJDHfeLE1mdThlIUNPmMxwFmNm7uzTRhKDI/YxxcmVjCUfyU9Psg4WBy7wbmoHkTTqapl0p3Lr",
	"qR685VXeyg4DWI3Dn6iqzcJGv3V1kaSGTSTpCKfkQ6jg+m4xpd2wZf2sdK/KS4d516n73l3feev0WkfS",
	"zs6lnJjb7VBLYSzrprUSWyugldjVM9PB3R10q+vgee20agdN1uodQXtTF9eUoQf37TpZUbaDxRacc54x",
	"lITNo+sOwXmMmeDBd9fnj+d/cNg9WVC7vKtl1M+5a9mmDt+C4vzx3POmhzfZU+2sLU2dBkGWw58CcX3x",
	"YVozNrK07BSIKqGebi1dPvXh+uKDV0uTWsv2Ux1IhHfE2GwMgg9Plwpzx2iUhaJSbDob2lQhLeOsnlNP",
	"0VSTOowaDMC7psk1qGY7bfEMwVqWKd2K+CPc7HX/PalfAg7CuuxZUTrLSDtKq6dqsVpOLrvGGcIxgXF4",
	"3TTpVjRZF+D2zSmMOemOEhmLvPnj1TQOE3lZQuvoO51fXwOPJuHuY9jYzutR1IbiUfu165iEZGnqtjUq",
	"+Ah7GiAMnMN1hVh8CH5BLCHJ2mkKYVCW8VfPqSd5qi8ddg4G4K9Nolk4qGoH1YggKJ6hMMTc2HyvkcTg",
	"yslv1PkGh9vgWgUOzlVguXjimKxxEmKnwauX0zb4TuTWF0B4S7UM3byiZmMIXkBdAtZb7XdKOFsTYYWG",
	"MhE7RAzeERFcoHCbpcGKsmCRLeWbLDHjk8FSVttmMGv5aUTzHRHeTe/mSTdlx3WwU+DYGJcCxyOsGQsc",
	"/7//z8udvnMsl8xENhrKQdrGX5VSX/Fkj7q8miywP/Nfm3ECt5/1T1L4vdmPryNTuFUZDE7cj69nl+gQ",
	"XN81Z33qd+nqeGr4IFkS6ip3c7rbyf/V40QwGgfXyYohLlgWiow5vTpdLQPLbHyRWE8h1fvJbneYyRS6",
	"9x6HlEWeS01cVp3WGc2fjKP50who/uTR/CaaP9mK5k960fzJo+nRPI3mT78HTeNmjkCmF/ObYtoKpl4v",
	"PZeey9Ncdtfyj8anmH8cYYr5Rz/F/CaYf7R1ivlHvVPMP/oppjfztJl/7DLF5IJQU1zK2MPvo4Eo0zqp",
	"WA7JMt1qKfV0DTrS5QO0BaGeMk2UyWK2I7ZHiTB1IzUVfHjGVJjSsU9phITb+5VhRJYxVs+pp2OqKR2G",
	"DAbgJdMkGVSzI2UzZu6o6zKB0UmbxtEyZf1slK2Wlw7d7jl3Hrj7hb8aqVbjZI+1OvcZJ1uSmEIujz64",
	"cH/O40yLuLx6dvnWTKofbvlic5i2fAQeNj2w5c3VQTWxZMika3n8EWQTFypSads155njruXVs022Zlp9",
	"bSta1GXd8ubzvunyLW+KduFWjK5N6SZjDy/bWxllYjM2WTnLVKul1FM0aEmHNZMN5yXTJJlshnbFks+m",
	"DEs+Dy8Y3SScJoH86Lz5t/LpNCRLPlvmWJlQT8WSzy4bdvtnf6kWzZIln9sd2yfR0pRkMvbwlqEUJUd3",
	"tbilbu/4hMpZplgtpZ6OQUs6LNnjbSHZtcA7r5kmzWRbtHq2RTzFjG8PMxLyWYiN3ansZSKDS/e+CBlc",
	"zxdwsT2HiXtZP7u8+2p+/fArl+F1yOfY6TuXVUOZL2Qz+umdXhBfdmC7jkz+2qxIZZZQAb9jiMjT2Qzv",
	"5P0MrkR6q+K5jOTpClom5TeT7MklvHexqTVfoC6beS/R91JqlvJ0B3bl0o6L159OZjQsp3MTotOFtNLM",
	"IS5lr8iczuXsPZkDkvl7L2a/zZaYJViYU7JMYHgZq1DTOYKlqp9lIB7n1RPBqk8dlu9/+uOOdXFX9kMr",
	"cTFO6N7UCa8q+OC03agwLy5KOokdwKqGdvHWyKkfbWrZOcyaGoCXTY9sqrM6qPa8Q2xrjDWIPoJrKs7U",
	"QINR2SZaPam+pKnmdNk0GIFfS9WNG5S1XTdTBxzHwx9tfPNuWpcmiS07zDjWc4zxjcsHGN+882JpEqv9",
	"0OKYLBme0dWKhKZuC1lPYXjAZLDgowo2sZlZrY6WqfYys56+yTdUC9Fl6KpRePE0iVfrtA72JdmzMfSS",
	"7HkE7WSU95glOJ6cdkn2bBtzVUp9fZOd6bJsSfbsTdNlWpI9t2K2m61IbGxPaB59cNA+zN5CnGlZllfP",
	"Ls2aSfXz7AMsNYdBUwPwoukRLW+tdtOQwXMqVPDhRaOMhiFK4BSKaW1cUxW0TDWk7eyJD6o7HUbtfI6Z",
	"8KhpQg11OitihxK0xjhZkwQbk61KYXjfINiVCjahywHXi2gbcS8y6wtdrWUd5q7WiX7fqG78qhbpQOAe",
	"J8bs2+NkBPRklO/+jPboD0GKwi1aY/khF5viWbDHjBPq+PxujxPb7KtS6ouebFL3tEvJbx8XizvVZZ43",
	"XbztcdLu2hJHMxEb2waXhx9etyWOgoebxdS2wuX1s0y0ZlY9UVvi6CF2ekOcHMGNPxVBF2x5d7XbhiOC",
	"BDZ1zG4RfnjbZKAHvJ3Ylri8fJbR1syqJ21FgzpsWz4Ej5sm3PJ6dsFNMJqQ0JxuKv4YvOWRpuabGpZ1",
	"wDXS6i1c3qVOE6fG4DfAabdOFbYDdklEno1JJ4OPwByEmdj6KQzKNuFqOfXlDfrSZdvkADxoukCT1eyg",
	"mUA8jSkxdphImcAIqpWhPtAoix3XrBiMbaId5dVXtbI/XZatGMTVM/znkdOFXFHYduhIyCinKzEL92xl",
	"CrtGEsODV4Sb1IEjjRpaht+p3HoCWLzlXLatwwaW43i8f+v90+Rfo99+h4HbpXEBt8sR/Xt/oRJbHoL5",
	"49Uk9NsubbVvu9Qr3/vlFNx7v/Tq6VZvu+xg3pZRQYzteM3Dj2DdltEHMrXLJRX1s826RlZ9ncs71GXk",
	"1BC8cLqEU/XsoFsSMXQwhhtEH8E2FWd+WGLGJ+YbDM023upJ9dVNdajLuMEIvG26bINydqCNpzOxYRiJ",
	"GQoFZcaOC36RyPDgXS/uggcIGZxDSKeJO66fbdp9Jb++8PFULUK1BJ0WkKePKM78+RDaDDxuuQ4cChwb",
	"E1DgeIRZnpjcVZagcrZxV6XUVzjZki6zJnDsSdNFmsBxF8UYniEhULidhXtsDrRGGiNM6B7ur4Lzhwd1",
	"k/75++ABh5uE/D3DwfWlHMb88Sq4IVy4jV2jqta5dyq73gQyfA7vOd9jN093rY3hgc4fr7yI2kRsNFxH",
	"HE2rOB6Hru+JzatlI3NafXNTttosj2HPmmbWOnrGsyXhGzLDMQ4FM3eC2MtMxlidzWMGV0XM6dyX9URF",
	"rXPwKwn2FjF/32Kpum3j0WD8eWXatTxuw3Y3abKmkbEj9FT0ES7cmazp5UVtg1+MmXDaRFU5yxxsJNXT",
	"vrwxHQZPNZ3XTZNuqiE6iPaMjHH2jEaw7BlNbc8FfUa2SVZm1JexZ+S0Yc/IT9N0Q/aMOij2hcSxOcgg",
	"+giWqTiwXGHZTU42GKBtuNWT6uub6lOXiYMReOV0KwdlbYUuQXsZyghzEHtw5G4hyrRcg8rZpVo9pX6m",
	"wQJzWDTI3zumxzFoq3bFsKndDQkefvfC7dW88us6WVG2U5O1WypkKVyGDFu2L6FKqCdi2OWdBbdXcw+Y",
	"JsBw2IEvgdLUmGAy+PCIYXGeplObh0HtbBOsllNfxKAvHXYMms5Tposy2Q5dNFsjgc1xJqOP4RnEmRxo",
	"clTWiVZLqjdp0JxOmyZH4FHThposZyfVMGIGVcNohI1lVw/vrs7vJ6gaRsw+1aqk+qsmm9Nt1TDym800",
	"qoZRlw1ngm9panCyBuHHmK2pQJODDYZlnWz1rHrTpjrUadtgCB43bbhBPdt1W5PE1O0bIPbwrkGUiaEm",
	"x2SZaLWUenIGLemwZTJ/f7CGZtBkUds125i6LFKyGf46SLc/L9RF39w/OSDZWHbZoyqhnnhtXL600e3P",
	"/l6ousDatF/FKCGmtCIjHFMmH6E4uE64YPlbTOjGCwmxDDCixy/iMl/XXi9NepEOeHExS/aRMcJU+OEh",
	"u148BLePl8GP37+G6xJByZYZiYXKpvyFN/kvSLuclk1V1jbfGln1VY6L233k5hWK5nt8LfCOe+t0Wac6",
	"q7N4bwyT92Y88958/3oCkr2xk7I3Oi174yZmt4+Xb1776xFpx+xNd81mYYp3SIQb06yViYzqWzC/uwo+",
	"yLBTkK6soaXkHeenx7550cEOG3h3BU3oIdQMYdlx7SLSCM+qRMxgWM9heAdphL//XNsu9wtlW2nfO0az",
	"dCL7SusVtUzFE6n1BJFGuFiYLm/Iqw3Dg6gJxHqzdbLwMzeI4Gc+in5/Xkzt0BConX3OfebagPvMHaft",
	"z34vq0bUPnfY0Uq3BBnDbEvQCJbJKHeMRlkoJkfaliDbRKtS6guabE2XPdsS5DnTxdmWdLggEf1Cd8YO",
	"HYHgI3gGYW6xeKJsyycnmhydbaTVcuprGjSoy6jJAXjVdKkmq9nOWrozZVq6Gx60uw/Bd39e/PCw+EOQ",
	"onCL1lh+fsWmeBbsMeOEJk67lu4sQ61MqKdo6c7NfQsfF4s71V9eM02apbt2yrJcMROYydjDcwZRvpv/",
	"yw9v/2XKoMlhWkZaLaWeqEGXetY8a5I12QztsO1JZG5LGgQfnrbH68vr82qN8yKLYyyI245B6SyDrJ5T",
	"T8lUW7q7wlk0W9FrXjVNqkFjtLP2pVgUBBvb6VnPYXDk5lf3D8HtX6e2Xa1eQ8u0O5FaT/S+VMvM5W1t",
	"f/XnymtGr95qrfbRUNA047MIpzE1ddhbM4nB9fuowgWXKty0EGzW0i4FT+bWj8F8WapF6bCDjXF4CvVQ",
	"2Oy3dgu3wtTKrQw9vHsyyMS02wrL1mtrGfWUTXajw6BthT8wRJdjW9G+Fkt3TI3BBF8y9vB+QZTHRsWm",
	"oZgcmGWM1VLq6Rj0pcOQyfy9ZJokk8VspyzBM1NX3IXYg1P241Vwly1jwjc4Ko/brcvmOGiyiJaBVkup",
	"J2gJvnLZswT78+11cSabqp2zFJk6tk2GHhwzCPLdxznaxRM+GESO0jLSqox6iiYb1B8J4kmTpKVo10E0",
	"nMzCfbQ0xloef3DbHjY4+JjiJJjHNIuOVj7lJ+vNv9VuPcp5piRbIo6dti6vr23gNdPqqx5O5rKHHZ7L",
	"ySE8Xl54/HThlzdYJwGXPDLo35IPf/VL2V8Xi8tKuLfk2e0VU1U4+1irkuqPmuxLt027WFx60vSRtuRR",
	"J9A43xgEjfPNKKAtFj9PbS+oqp59qlVJ9VdNNqfbqi0WP3vV9KnG+aajavGM4xBFe6O4FUmMZNzNJI0r",
	"imgjdUe56RAvXqi+dd29mwUOz6O910+nfkW/dUNQoHBr0j8Zfxz6INIE8ZPjstC9WloayIM2dZw7OQZP",
	"nUbqZEE7KffEhEHjnpgYRbhfmJigb09M2KdblVR/22RzuivbL/cP3jR9pj2x9tPtKUNhbOw4OAg+vGcq",
	"zMQ4g0FZplk9p56Yqb5017IPWCDZRB40TaBBQ3T0bBammVHTZAJjuTZnRJAQxcEd3NlG3fh0SsjJYtoI",
	"XS0vHdjN08zltVI1hrtPHjyd4Mke+x3ozUKOVsblgyyM8seD+eL87STkg2Layl89OU0GzmUHT8BB2YDe",
	"Qt0WQsO1g8iN7Yfl4+x8DRY0YyE+Pp9rEgcGc9t2vXJN+1u503tZF4+eM02c8Q47VAUzdZ04GXp4xB7u",
	"p3ZjLFk3y+SqMupJl+xGh+16uPc3xNKFl2AdLvn2lIQxzYydu5CHH16xp0SdtDUxyfL6WaZZM6ueohUd",
	"6rBqefN52TTJlrdEq24pilEiCDOkWxF+cN3uikCTulJ5UT67cDvKqh9uxYJzGLdiCB43PbgV/dUFNzpD",
	"saDmdFPxx+CNBucy0kRvAliW0jrqGmn1to7Khei2dTAEf5ly7eapRuuAXoI4TUhoDL08/gjoFZFOXuTy",
	"ENwQLpw2Lx+fbeY10+prXtGuLqOXj8Frp0u7vKAdtEsxCzNhDDsVfgTrUszmWe1Mhulc/rIoom3MNbLq",
	"q1zepi4jpzrQG6fLONUS7cThtan7LMjQw9Mmg0xrsxxeW3abhVpGPSGTzegwYnjtT2PQBRhet99mId2Q",
	"mKSmDv/Iow9PWB5nYtvc1Kgsk6yRVE/M8uZ02DM1Ar+1TTNtqqwddKM4Ic8zOUgUGlsJbWYxgnYQL5jn",
	"8aamXqOatul3Krm+CsJ75kvTaQzrA/Em6jax0XrtNlIu1gxz/vfYlItVBsObmMda/OVmkpvoqlJaBuKL",
	"xHpiWOtahyWsutHzp4m/qjHa6WMUftWUe3n44dErAhW35DqPMRPT2ISXD80y7ZpZ9aSu6FKHncuH4JHT",
	"hFxezy7C0RV83swZlycwhnJFqImt6ZYDs065Zl69nSt61Wnp8kF467RZl1e0XbvM1J270mz4e3bdZcvg",
	"u0vExA9v40wIzCZ8V8I0s+weXVVCPZHLlv6WhB42gC1bdhCN4Zn8U7TGxmirUhjBOIaDRR5sWsea1Mpo",
	"G20vMutrHMP5MnR5JleNwounS7yq09rpO6SoWBoEG9tG18xieAAPd+dTW31tltAy/E4m19O/Q4qqJecy",
	"gYe7c797VrOBzYbrwiAxZx8ZAzwSfHd3EBuaTHmF9pAS6+Qjurgjfp3W65brRlpJ+3uCUkOkydCDk/aX",
	"2/O7ic3hZN3s4quWUT++/iK70d05mmw2P0fTq5jsrXbFMhSHdLczJVkefnjNikCT2hxXlM8y1JpZ9YSt",
	"aFCHccuH4GHTBFtez064HbhB2g58FNgOUzsXTNXOPtUOXJtpB+64aAd/HJxGzw7t29AYSjjdPSFmah9q",
	"lcDgqj1mcTLf4HAb3JdBHfasqpxdpr3Iq59r1bJy2LZqEFfPaUyJPwROE3NVs7VTh6MNMnWwrwo+OHH3",
	"OAp+RlM7ylcVzzLl6jn1FE41psO6wQDmj1deNU2qQUE7iJZgjrgx0iD6CKapOFMzDUZlG2r1pPqqpprT",
	"ZdZgBB41XahBOTuotid7Y6ujEHwE0yDM1EiTg7JNtFpOfUGDvnTZMzkAz5kuzmQ12zWj4fYJx6YuIFKE",
	"H160ItB5JugOFuDUeMtHaBlwzax6Elc0q8PI5UPwzGliLq9nJ+gOBpU7jELcIbghSfY8HdEO9nF20GbZ",
	"wc2Dbz+lERJ+oqZRsEM7X1m4zYxtSoPgwwOmwkzqaDVVOssQq+fUUzHVlg7Px2AA3jJNlkE1O2DGBceh",
	"+XNEXyYyAnJcLHA4kRnai/rZJt1X8uurHrztJM4UbY7Fn4igTcLjzmtVkaMQM1MHgKjgg+u3QFlEgvnV",
	"/YPD6qla2SVdI6d+ui1UH7pL2sKf+q5ZM9VdHQQzd7lKiD28X+fXtw9BfpAkd9ow6y5KWU+pr2BuX4oS",
	"8vdH4momrMt1KDmKMV9RFmJjjBUJjDAXizF/C6GmtSe0qqFtwB3l1Ve5slddpq5oQg+dLuiKtuig3W6J",
	"jEG3W6IRjJNRSt7ucYwRdxy33RLZ5lqVUl/SZEO6rNlu6e9+qg2y3RJ1MCw1Jlg6wvpm7XpEd0iEm+AS",
	"Hdz2K7VNr1STXanT28zuvFu63Gq/BBEPNwkmEWYzHONQMBKaQuxFIsObVoQMroqQJXG3VJBVvpidVu5F",
	"WS1D72v59TSweNtiybos4vFY/E4FzU6+6MF2NnE4C2nCs9jYboYqg+GhvJoH8zzWxLbQVVW0zMUXifUE",
	"EYf5EnRZwqt5PghPnyb6qjbrYF5szLp4jMngEybii6x3siYJxnLxBDdoSRkS6pC86c0OcWwbe7Em7lw+",
	"N2uB/WlZ2oCLO8CWCJLgmCbGdrZWGQwPXR7rY4IndNf6WgVtE+04sb6yVc3qsnBlE3rpdElXNkYH8die",
	"hDihT8bAKxIYwTsIdUufgvnj1eTWX4s62qbeUV590Sv71WXzikb05Okir2iLdvE2KKJPHFKaYXVEI45M",
	"6XcymeElrIVVDaAuPzKhWeDJwlpG47dy7Mlk7a2vyh53WEwYz6I5nnq3+l0guiQ92ZTtqpJwa8pQEm6H",
	"F/N6/n5qM0YSbi0DscqoJ3+yGx3WjoRb75kmz0i47aAX3uGEGwMMog9vWB5naozBqGyTrJ5UX8xUc7rs",
	"GYzAH62imzYoaxfdGEOzJ8JwjLlB5epZjKEdYyj4pYg3qWs4HRXTOvxOJNcbQcZQsTDdtrA2EE+hNgrr",
	"LdeBxGRt8tImefjBEZwvzoPzGDP5h0k0lQmfKp5t6DWy6qtd3p4uO5es55j54/O0Cadaop22GIVbg7cn",
	"LOMPP8MrI01sjbYYl2XCHaXVk7iyTR02rhiDR04TckVB25WjMWJPJImMrc6WCQzvnAz1C4QqoZvQntqy",
	"kJZxd5xXT++qhnUYvLIT/bY8zfKV7dGFPmYOPTYGdwwO0LvHKWXCcduYdaoxXZ4xtyVj3i5tdrEOaiUk",
	"fELGbutVxh/Br4SEv8hIE1stLSpom2jNtPqyVrSpy7blDegnabqhy5ujXbsUhThGSz7bYBSLTWhwe9yJ",
	"VIY3sAg6NQNPFNMyDr+eYU8Zizf+uepoh418ORqvpWYtT3RiBzghc1NUwpn+w+MIYaYmoxyUbRbWcuqr",
	"H/Sly+DJAXjbdNkmk2jXjBs7sYyPcBbZ4lIhhoNLwsOYcvlwGppx284V45pODONOnwa2uPSzNM2S8Q4n",
	"dwnKdnxDcGyMsyqD4VmrxZoGZtWALEPtRWI9cav1qcPIVaPwyGlCrippB+zYYYuN7WFV0UdATsWZ2Eqo",
	"GpVtytWT6iucak6XdYMR+GmcbuGgrO26ZRE1RVsW0eFdk0EmhloWUctEqzLqyZnsRoctyyLqAdMEWBbR",
	"DnpxY7tR5ed0cL0+LSZ3XbqM27aHtMqor17c5V2g8z1beb106cU77Nt8IitjZ5zK2MP7BVFSFG7RGstP",
	"rdgUz4I9Ztz1i6TL4VmGWS2lnppBd7rHWUp++7hY3Kku855p8kw2QxfQOI/p2oKD3F5mMgZ2EDOoDiGC",
	"0xaqfaGOW3dcUevk+0qCvR2E953GYW4vBuM3vGmX8rgN29087FY0OZiyUkUf3sc8zsTWZ9WoLLOwkVRP",
	"//LmdBg9NQIvnCbhVDk7qJaEjHJqbh23TGAE22SohQw1Nd6KGtom3FFefZEre9Vl54om9NTpoq5oiy7a",
	"0ZiuzU3iVPgxpFOB7hiNsnCC3sHwrNOunlVv61SnOi0dDME7p805qGercgKjnQTM2PFwVQKDS/eA0e5R",
	"hZrUtYKrEtqF3Iu8+jH3ULWqu9BVPeip00Nd1WUdsEvCfHxGpIPoIzCn4jTunhTcE76Fm1mH2G3rYHC2",
	"QVdPqq9yqkddJg5G4H3T5RuUsx23DYqxqYtlquDD06bClLO3T2mEhNuewYgs46yeU0/NVFM6jBkMwFum",
	"yTKoZgfK8I5wTpJ1TJKtMdLqSQxOmwyZxwsg4LQ2wzWraZt3J3Lr616jg132D39QA7khib9noTYH6+3R",
	"wUOGkZihUFBmboZXy2FwDeW663yDw23wAHGDcxVXOue0grUi2obgy9T6GijfUS04pwUsh/ELEZurZ6XE",
	"x+VnHAo/M9QmYq392kEkphQkI2y+e0Y8uE64YPnfT2tnBbHMPaIHO+IycdeeMU2MkQ52LUNqjK9lOPwp",
	"+g/XF/OPU1t/lZWzTa4qpb54yZZ02C+ZvydMF2HLsP1EfZHOTG6bU9GHl+xudjPBbXGqepZp1kiqp2fp",
	"jeNb3e781jaNoqnWajeNoQTPBA43Ro/8PU5jeOVkwOChCjjNI4GP62qZf6ez6wmhfNNqwbosYnMknkZN",
	"NB51XQcjcRLtSMiMrcKWCYzgIk6i4APEmtY2uLKGthl4lFdf/cpedRk+nETQg948XeYVbdFBu4yLJ7TH",
	"xrDL449gXRFpapO+fFy2SddMqy90RZu67Fw+Bs+cLubygrYr9xRiZuysCAg+vG+IPKEkmF/dPxydGHFL",
	"HT+CGApoGW/1nHrapprTYdh+mWMm/FWZNOsGbdFKW7Ykf8+IscNFivCD8/apCHQ8e5vGCmtRR7uUO8qq",
	"n3PFEnRYumII3jg9xhX91UG5LBGZMeNk8BGEgzClb+6fyqoKZxtptZz6ggZN6TJncgDzxyvvmS7PZEHb",
	"NUvIytS+V4g9vGUQ5Rt7WQOURA3q3IZODtcy52op9WQOutVh5WT+XjhNwslidgGO09CccJyGwxN3e734",
	"OJ/WblNVOusgq3LqLZlsS6cp4zT0lmmzjNOwHTNjd8DPRrgDvowxrR2imW03vs803fj+k9M3vv+0uPRw",
	"aYKrww3vM053xtiiu+GnX4uPHya1rYzTnW1slRn1dYvunIbr4we/c1O3YHTXStgeJdFha+rItDz68BcC",
	"QcmljDOtSVhePbtEaybVD7XHvDnddS1vPE+aHtLy5uqgWkqiGC25Mdfy+CPIlpLoRkaqH4/mumt59WyT",
	"rZlWX9uKFnVZt7z5/NRNt3N5c7RLFxmbu0UjzNsur9TBttOYr0W2zdUiTfO0yOk52uWV90uzX1GHORrG",
	"yNTWM4g9vF4QZWLrnHJMlilWS6mnY9CSDksm8/eGaTJMFrNdMUoijk0dhpFHH14ySqIFDidCmCqaZYg1",
	"kurJWN6TDkOm+s1Tpoky1RDtmGVxEm5wuJ2FNFmRtSnVjtIY8TrhcwiYqQ+V08gd1dAy7U5n15O94k3V",
	"QnSZv6If1Ug8g5oYPOq63+HhFu+NY7jF+xElfH/1OAn+tnhvq31Vaprge4/3U1Dv/dWjJ083eVu8/x3e",
	"JfvIuHfJPhrRu9vHy0l4l+wjW72rUtPk3e3exYN1U/LbfI+vBd7xq2eBkwhHnjvd3CX76Pdx98YG796M",
	"C17w+GYq5r2xGL032tV74yZ7t4+Xb17PH688ewOy96aTe+V7zlBMEDd2y+eTuYyiYFXVcxXVcQpfVNE+",
	"Eb+WYn8Yy3fOl6WbPr4ciRdSn5Avuq8dygMizNjxdRB8eApVmEmdYq9KZ5l/9Zx6gqfa0uEtff9xfn3v",
	"D7rTbRy0RStqT0iEm3WGmKktfFUCg+P2SxVqWofhVTW0S7kXefWTrlp+DmsHg3gnB+Gl0yNd1WXt2m2Q",
	"4ChNTVmXhx9eOhnoPE2n5lxeP8uUa2bV07iiQx0WLm8+75sm3/KWaNeNLE1dsFeGHl41GWRx4ALv+NRk",
	"I0vLrtpby6inaLIrHdaMLDMvmSbJyDLroBjDfIPY1hhlefwRPCsiTQ2zfFy2idZMqy9rRZu6bFs+Bg+c",
	"LuDygnZQTmxmEB8bc67MYATpxEYhhydnXVlF27Q7Tqyvd2KjlqDT4BWD8OLpEq9ss3bzaLwyddcsiD28",
	"cxBlYsLJMVlmWy2lnqpBSzoMmszfW6bJMlnMTopxHht0jPN4FMkWi5sJXUcur5x9klVJ9bdMNqbbmi0W",
	"N94zfZ5xHncQjUUrnITG1kSL+COoVkSakmv5mGyTrZlWX9uKFnVZt3wM3jddvuUFbRXuGSeGbHvGyeCq",
	"/TtOprGq+YwTuxCrEurH17/jxGG4/h0nniw9ZD3jpANWjD4b44rR5xHAklEmdZIBFM42vKqU+vIlO9Jl",
	"wBh99oTpIozR53bECKI7Uxv7VfDhGVNhpuUYjMkyyOo59ZRMtaXDlMEAvGWaLINqtmN2iLGpi5ND7OEp",
	"gyjT2nEJlbNMslpKPSGDlnTYMZm/Z0wTY7KYrYod6Jau0RMyBFkRfnDL/qMINC3OivrZJdpRVv1QK5ac",
	"w64VQ/Cns+slruizduWyJQmpKeMg+PDCqTAT8w0GZZlu9Zx62qb60mHZYADeM02eQTVbNfsSmdqG9iUa",
	"fgPaXzGjwSU6BNcJEQQJssfTsOxLZNkmtCqhfor9NXJ545nst0t08HMzvZZ9ido3oX3BjPKQGDzKrJbB",
	"KLAt8ljTOdKsVkHLdHuRWE/las3qtnZ5E3rxNItXNUi7fGS3ZKY2uqngw3unwkxrhVTVzjLp6jn1RE71",
	"pcO+wQA8aZpIg2q2a0apqT2hMvTwkskgkzqiQ5bNMsSqjHoSJpvRYcAo9btAdfFFafse0C88RLGMZMYv",
	"FX14wvI4E5uNqVFZJlkjqZ6Y5c3psGdqBJ40TaSpcrarlnFT+ztl6OE9+7T4eHSPllsqyCpfik6jlnHL",
	"9njWMurJmexKhy3LuN/XqQuyjHfY03l4xqYuqgGxh3cMokxsVibHZJlgtZR6EgYt6bBhMn+PmCbEZDG/",
	"oRhNcYLSrx+tkceS/VvddfP87jr4bv/TH4KPKU7kE57isJzZnGrMj3mYnt2EoojIH6H4jskYgsj3ESzD",
	"r4qq0+VnHIqvt4qlC/NrlSyWWgFgsdzSjH39a+cCcRwFVC22/B1xFNx9ur859hQIYyoHVH7h7Js7f4E9",
	"+NpgOIZvppy0FIVb+fUR/ALYMpyI+BDwLE0pE8EGP78K1jRGyfpVsFG/+ipI0t2rACVRkB6gIV70yp0c",
	"2quz0k8O9WuO8NP9TaAWicQe8iERTgRZHeC9YxrKrxUUcLoSTzLzPNWzV2dEvgEYffbqLEE7uXhTFVN6",
	"SBiOip76ehv8bTQX9z/JN2U0jjHjv8niFD+SX7Pf+PEHLJBUwbNZfNLUV+9xc9d6GsFn5BsfO/l67b64",
	"4ZtvwVlM6IpP1fVdgKKIYc4xf1X0q/xgIh6wLElkN8/pbicbWH7Nv/m3YK6WbUCSFUNcsCwU6lKmLz41",
	"D2jNy7vrzt+0fYDeUrZDkJX8HF/fBedFZvLbozEh+u5SzSl58ED/FAj8LP7wlU/RCt70bMjPTWuT/C86",
	"ITjutfmbRrt9raUhggypegS+VM5+2P909o+//eP/DwAA//8sFSApglgLAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
